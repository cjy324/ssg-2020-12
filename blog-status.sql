-- MariaDB dump 10.18  Distrib 10.4.17-MariaDB, for Win64 (AMD64)
--
-- Host: localhost    Database: textBoard
-- ------------------------------------------------------
-- Server version	10.4.17-MariaDB

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Current Database: `textBoard`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `textBoard` /*!40100 DEFAULT CHARACTER SET utf8mb4 */;

USE `textBoard`;

--
-- Table structure for table `article`
--

DROP TABLE IF EXISTS `article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `article` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `regDate` datetime NOT NULL,
  `updateDate` datetime NOT NULL,
  `title` char(100) NOT NULL,
  `body` text NOT NULL,
  `boardId` int(10) NOT NULL,
  `memberId` int(10) NOT NULL,
  `likesCount` int(10) unsigned NOT NULL,
  `commentsCount` int(10) unsigned NOT NULL,
  `hitCount` int(10) unsigned NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=79 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article`
--

LOCK TABLES `article` WRITE;
/*!40000 ALTER TABLE `article` DISABLE KEYS */;
INSERT INTO `article` VALUES (1,'2020-12-19 17:19:16','2021-04-24 15:28:16','Dev_J Blog에 오신것을 환영합니다.📣📣','이 블로그는 개인 블로그이며, \r\n<br>\r\n주로 프로그래밍, IT 관련 내용을 다룰 예정입니다.',1,1,1,1,7),(2,'2020-12-17 18:07:18','2021-04-24 15:28:16','1강. STS 개발툴 간단 소개','# < Spring Tool Suite >\r\n: 스프링 툴 스위트(STS, Spring Tool Suite)란 이클립스 기반 스프링 애플리케이션을 개발 하기 위한 개발 환경(툴)이다.\r\n\r\n### Project\r\n\r\n- 프로그램을 만들기 위한 파일들을 모아놓은 폴더\r\n\r\n### src\r\n\r\n- 패키지들을 모아놓는 폴더\r\n\r\n### package\r\n\r\n- 각각의 기능을 수행하는 클래스들을 모아놓은 폴더\r\n\r\n### class\r\n\r\n- 각각의 기능을 수행하는 소스코드 묶음\r\n\r\n\r\n\r\n# < 기본 단축어 정리 >\r\n\r\n* 새 프로젝트 만들기 단축키: alt+shift+N\r\n* **자동 완성 기능: ctrl+space**\r\n* **저장: ctrl+S**\r\n* **자동 줄맞춤: ctrl+shift+F**\r\n* **블록 주석:  ctrl+shift+/**\r\n* **주석 풀기: ctrl+shift+\\\\**\r\n* **코드 실행: ctrl+F11**\r\n* **import java util: ctrl+shift+O**\r\n* 문장 맨 앞으로: Home\r\n* 문장 맨 뒤로: End\r\n* 빨간줄 발생시 커서 위치시키고 ctrl+1\r\n* **동일 변수명 한번에 바꾸기 단축키: alt+shift+r**\r\n* Home : 줄에서 맨 앞으로 이동\r\n* End : 줄에서 맨 뒤으로 이동\r\n* Ctrl + Home : 맨 위으로 이동\r\n* Ctrl + End : 맨 아래으로 이동\r\n* Ctrl + Z : 이전 히스토리로 한 단계 이동\r\n* Ctrl + Y : 이후 히스토리로 한 단계 이동\r\n\r\n\r\n# < 그 외 소소한 Tip\'s >\r\n- 파일명은 무조건 대문자, 띄어쓰기는 불가, 문자별 첫문자는 대문자\r\n\r\n- 프로그램의 시작 폴더는 \"Main\" 하나 만들고 시작\r\n\r\n- 왼쪽의 녹색 점(Break point)이 생성되면 다시 더블 클릭해서 삭제 가능(참고로 break point를 찍고 디버깅을 실시하면 그 포인트에서 진행이 걸리게(?) 되는데 소스코드의 문제점 등을 파악할 때 유용하다)\r\n\r\n- System.out 은 출력 개념, System.in은 입력 개념\r\n\r\n',2,1,1,0,1),(3,'2020-12-17 18:38:39','2021-04-24 15:28:16','2강. Scanner객체를 통한 입력','내가 원하는 명령어 입력하고 이 명령어를 컴퓨터에게 올바르게 인식시키기 위해 JAVA에선 **Scanner 유틸**을 사용한다.\r\n<br>\r\n\r\n별도의 입력없이\r\n**Scanner scanner = new Scanner(System.in);** 라고 작성하면 **Scanner** 부분에 밑줄이 생긴다.\r\n\r\n이때 **Scanner에 커서를 올려두고 \'ctrl+shift+O\'를 누르면,**\r\n\r\n**상단에 import java.util.Scanner; 라고 자동으로 유틸을 불러올 수 있다.**\r\n\r\n(자바에는 사용하기 편리하게 몇가지 유용한 유틸들이 라이브러리에 이미 저장되어 있다.)\r\n<br>\r\n\r\n이후에 예를 들어\r\n\r\nString command = scanner.nextLine(); 라는 객체를 만들고 실행을 하면\r\n\r\n콘솔창에서 명령어를 입력할 수 있게 된다.\r\n<br>\r\n\r\n또한 Scanner 객체를 생성한 후 하단에는 scanner.close();이라고 작성해 주는 것이 좋다.\r\n\r\n(scanner.close();을 꼭 작성하지 않아도 실행하는 데 문제는 없지만 그래도 클린 코드를 위해 작성하도록 하자)\r\n\r\n* * *\r\n\r\n\r\n**예시**\r\n\r\n``` java\r\nimport java.util.Scanner;  //Scanner 유틸을 불러온 것\r\n\r\npublic class Main {\r\n\r\n	public static void main(String[] args) {\r\n		Scanner scanner = new Scanner(System.in);\r\n		\r\n		String command = scanner.nextLine();\r\n		\r\n		scanner.close();   //마지막에는 scanner를 종료시켜주는 것이 좋다\r\n\r\n	}\r\n\r\n}\r\n```',2,1,0,0,1),(4,'2020-12-20 19:27:12','2021-04-24 15:28:17','3강. println(), printf()를 통한 출력','입력을 했다면 다음은 **출력**이다.\r\n\r\nJAVA에서 출력은 **System.out.println()** 과 **System.out.printf()** 을 활용해 수행할 수 있다.\r\n\r\n이 둘은 비슷하지만 그 사용법과 결과물에서 조금 차이가 있다.\r\n<br>\r\n아래 예시를 통해 그 차이를 살펴보자.\r\n\r\n### 1. System.out.println()\r\n```java\r\n//1.문장 출력\r\nSystem.out.println(\"명령어\");\r\n//출력 결과: 명령어\r\n				\r\n//2.변수 출력\r\nint a = 50;\r\nSystem.out.println(a);\r\n//출력 결과: 50\r\n				\r\n//3.문장 + 변수 출력\r\nSystem.out.println(\"a = \" + a + \"이다.\");\r\n//출력 결과: a = 50이다.\r\n\r\n//4.연속으로 사용하면 아래방향으로 출력이 진행된다.\r\nSystem.out.println(\"명령어1\");\r\nSystem.out.println(\"명령어2\");\r\nSystem.out.println(\"명령어3\");\r\n/*출력 결과: 명령어1\r\n            명령어2\r\n            명령어3    */\r\n```\r\n<br><br>\r\n\r\n### 2. System.out.printf()\r\n```java\r\n//1.문장 출력\r\nSystem.out.printf(\"명령어\");\r\n//출력 결과: 명령어\r\n				\r\n//2.변수 출력\r\nint a = 50;\r\nSystem.out.printf(\"%d\",a);\r\n//출력 결과: 50\r\n\r\n/*\r\n여기서 println()과 다른점은 위와 같이 변수만 입력해서는 출력이 진행되지 않는다는 점이다. \"%d\"와 같이 각 변수 타입에 맞는 명령어를 입력해주어야 그 자리에 원하는 변수 값을 치환시켜 출력할 수 있다.\r\n\r\n-변수 타입과 치환명령어 (예시)\r\n\r\nint => %d\r\nfloat => %f\r\nString => %s\r\n...\r\n이 외에도 다양한 치환명령어가 존재한다.\r\n*/\r\n\r\n				\r\n//3.문장 + 변수 출력\r\nSystem.out.printf(\"a = \" + a + \"이다.\");\r\n//출력 결과: a = 50이다.\r\n\r\n//4.연속으로 사용하면 println()와 다르게 가로방향으로 출력이 진행된다.\r\nSystem.out.printf(\"명령어1\");\r\nSystem.out.printf(\"명령어2\");\r\nSystem.out.printf(\"명령어3\");\r\n//출력 결과: 명령어1명령어2명령어3\r\n\r\n/*\r\n만약 printf()로 println()와 같이 아래방향으로 출력을 진행시키고 싶다면 명령어 뒤에 \"\\n\"을 입력해주면 된다.\r\n\r\nSystem.out.printf(\"명령어1\\n\");\r\nSystem.out.printf(\"명령어2\\n\");\r\nSystem.out.printf(\"명령어3\\n\");\r\n/*출력 결과: 명령어1\r\n            명령어2\r\n            명령어3    */\r\n\r\n*/\r\n```',2,1,1,0,1),(5,'2020-12-20 19:39:22','2021-04-24 15:28:17','4강. 기본 자료형(데이터 타입)','JAVA에서의 기본 자료형(데이터 타입) 정리한 표이다.\r\nJAVA에서 변수는 매우 중요한 역할을 하므로 이 표를 통해 각 변수의 특징에 대해 알아두는 것이 좋다. \r\n<br>\r\n\r\n#### <기본 자료형>\r\n\r\n<table style=\"border-collapse: collapse; width: 100%; height: 586px;\" border=\"1\" data-ke-style=\"style8\"><tbody><tr style=\"height: 69px;\"><td style=\"text-align: center; height: 69px;\" width=\"85\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\"><b>유형</b></span></p></td><td style=\"text-align: center; height: 69px;\" width=\"142\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\"><b>종류</b></span></p></td><td style=\"text-align: center; height: 69px;\" width=\"274\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\"><b>표현 가능 범위</b></span></p></td><td style=\"text-align: center; height: 69px;\" width=\"101\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\"><b>메모리 크기</b></span></p></td></tr><tr style=\"height: 69px;\"><td style=\"text-align: center; height: 300px;\" rowspan=\"4\" width=\"85\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\"><b>정수형</b></span></p></td><td style=\"text-align: center; height: 69px;\" width=\"142\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\">byte</span></p></td><td style=\"text-align: center; height: 69px;\" width=\"274\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\">-128 ~ 127</span></p></td><td style=\"text-align: center; height: 69px;\" width=\"101\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\">1 byte</span></p></td></tr><tr style=\"height: 69px;\"><td style=\"text-align: center; height: 69px;\" width=\"142\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\">short</span></p></td><td style=\"text-align: center; height: 69px;\" width=\"274\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\">-32,768 ~ 32,767</span></p></td><td style=\"text-align: center; height: 69px;\" width=\"101\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\">2 byte</span></p></td></tr><tr style=\"height: 69px;\"><td style=\"text-align: center; height: 69px;\" width=\"142\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\">Int</span></p></td><td style=\"text-align: center; height: 69px;\" width=\"274\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\">-2,147,483,648 ~ 2,147,483,647</span></p></td><td style=\"text-align: center; height: 69px;\" width=\"101\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\">4 byte</span></p></td></tr><tr style=\"height: 93px;\"><td style=\"text-align: center; height: 93px;\" width=\"142\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\">long</span></p></td><td style=\"text-align: center; height: 93px;\" width=\"274\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\">- 9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807</span></p></td><td style=\"text-align: center; height: 93px;\" width=\"101\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\">8 byte</span></p></td></tr><tr style=\"height: 69px;\"><td style=\"text-align: center; height: 79px;\" rowspan=\"2\" width=\"85\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\"><b>실수형</b></span></p></td><td style=\"text-align: center; height: 69px;\" width=\"142\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\">float</span></p></td><td style=\"text-align: center; height: 69px;\" width=\"274\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\">1.4E-45 ~ 3.4028235E38</span></p></td><td style=\"text-align: center; height: 69px;\" width=\"101\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\">4 byte</span></p></td></tr><tr style=\"height: 10px;\"><td style=\"text-align: center; height: 10px;\" width=\"142\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\">double<br>(float보다 2배 크기)</span></p></td><td style=\"text-align: center; height: 10px;\" width=\"274\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\">4.9E-324 ~ 1.7976931348623157E308</span></p></td><td style=\"text-align: center; height: 10px;\" width=\"101\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\">8 byte</span></p></td></tr><tr style=\"height: 69px;\"><td style=\"text-align: center; height: 69px;\" width=\"85\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\"><b>문자형</b></span></p></td><td style=\"text-align: center; height: 69px;\" width=\"142\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\">char</span></p></td><td style=\"text-align: center; height: 69px;\" width=\"274\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\">모든 유니코드 문자</span></p></td><td style=\"text-align: center; height: 69px;\" width=\"101\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\">2 byte</span></p></td></tr><tr style=\"height: 69px;\"><td style=\"text-align: center; height: 69px;\" width=\"85\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\"><b>논리형</b></span></p></td><td style=\"text-align: center; height: 69px;\" width=\"142\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\">boolean</span></p></td><td style=\"text-align: center; height: 69px;\" width=\"274\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\">true, false</span></p></td><td style=\"text-align: center; height: 69px;\" width=\"101\"><p><span style=\"font-family: \'Noto Sans Demilight\', \'Noto Sans KR\';\">1 byte</span></p></td></tr></tbody></table>',2,1,0,0,1),(6,'2020-12-22 18:27:10','2021-04-24 15:28:17','YouTube 영상 테스트입니다.','\r\n# 영상 테스트\r\n\r\n```youtube\r\nIUI2O8g2Rs4\r\n```\r\n\r\n출처:몰입코딩',1,1,0,0,3),(7,'2020-12-22 19:09:39','2021-04-24 15:28:17','5강. 비교연산자','JAVA에서 두 수의 크기를 비교하고 싶을 때에는 **비교연산자**를 사용할 수 있다.\r\n\r\n비교연산자의 종류는 다음과 같다.\r\n```\r\n ==,  <,  <=,  >,  >=,  !=\r\n```\r\n\r\n\r\n\r\n\r\n수학에서 쓰이는 기호와 같다고 생각하면 된다.\r\n<br>\r\n\r\n단, 사용시 주의할 점은 \" = \" 기호를 쓸 때 일반 수학에서는 하나만 입력해도 되지만 JAVA에서는 \" == \" 처럼 2개를 입력해야 한다.\r\n\r\n또한 \" >= \", \" <= \" 기호를 입력할 때에는 반드시 \" > \", \" < \" 기호가 \" = \" 기호 앞에 위치해야 한다는 점을 명심하자.\r\n<br>\r\n\r\n### 예시\r\n\r\n```java\r\nint a = 20;\r\nint b = 20;   \r\n\r\n// a와 b가 같은지 비교하는 연산자\r\n    System.out.println(a == b);    \r\n    // 결과: true\r\n		    \r\n// a가 b보다 작은지 비교하는 연산자\r\n    System.out.println(a < b);\r\n    // 결과: false\r\n		    \r\n// a가 b보다 작거나 같은지 비교하는 연산자\r\n    System.out.println(a <= b);\r\n    // 결과: true\r\n		    \r\n// a가 b보다 큰지 비교하는 연산자\r\n    System.out.println(a > b);      \r\n    // 결과: false\r\n\r\n// a가 b보다 크거나 같은지 비교하는 연산자\r\n    System.out.println(a >= b);     \r\n    // 결과: true\r\n		    \r\n// a와 b가 다른지 비교하는 연산자\r\n    System.out.println(a != b);   \r\n    // 결과: false \r\n```',2,1,1,0,0),(8,'2020-12-28 18:14:33','2021-04-24 15:28:18','6강. 논리연산자','# 논리연산자\r\n\r\n## &&\r\n\'**AND 연산자**\', \'**그리고 연산자**\', true && true라면 true값을, true && false 라면 false의 결과를 나타낸다.\r\n<br>\r\n## ||\r\n\'**OR 연산자**\', \'**또는 연산자**\', true || true라면 true값을, true || false 라면 true의 결과를 나타낸다.\r\n<br>\r\n## 예시)\r\n```java\r\nint a = 15;\r\nint b = 16;\r\n\r\n		\r\n/* && : AND 연산자 */\r\n\r\nif(a == 15 && b == 16) {\r\n	System.out.println(true);\r\n}\r\n//해석: a는 15이고 b도 16이면 true를 출력\r\n//출력 결과: true\r\n\r\n\r\n		\r\n/* || : OR 연산자 */\r\n\r\nif(a == 15 || b == 30) {\r\n	System.out.println(true);\r\n}\r\n//해석: a가 15이거나 b가 30이면 true를 출력\r\n//출력 결과: true\r\n```',2,1,0,0,0),(9,'2020-12-28 18:15:22','2021-04-24 15:28:18','7강. 삼항연산자','# 삼항연산자\r\n\r\n## 개념\r\n\r\n간단한 조건을 확인할 수 있는 연산자로 \'**조건연산자**\'라고도 한다.\r\n<br>\r\n원하는 조건에 부합하는 결과를 얻고 싶을때 대표적으로 if()함수를 사용하지만, **간단한 조건을 확인할 때에는 삼항연산자도 자주 사용**된다.\r\n<br>\r\n삼항연산자의 문법은 다음과 같다.\r\n\r\n```\r\n조건 ? 참일 경우 실행할 내용 : 거짓일 경우 실행할 내용;\r\n```\r\n<br>\r\n예시를 통해 사용법을 알아보자\r\n<br>\r\n## 예시\r\n```java\r\nint a = 10;\r\nint b = 16;\r\n		\r\nSystem.out.println(a > b ? true : false);\r\n/*해석: \r\n	조건: a > b\r\n	조건에 부합한다면(맞다면): true\r\n	조건에 부합하지 않다면(틀리면): false\r\n*/\r\n//출력 결과: false\r\n		\r\n		\r\nint c = 30;\r\nint d = 40;\r\n		\r\nSystem.out.println(c >= d ? c : d);\r\n/*해석: \r\n	조건: c >= d\r\n	조건에 부합한다면(맞다면): c\r\n	조건에 부합하지 않다면(틀리면): d\r\n*/\r\n//출력 결과: 40\r\n```',2,1,0,0,0),(10,'2020-12-28 18:15:22','2021-04-24 15:28:18','8강. 변수','# 변수\r\n\r\n## 변수의 기본 속성\r\n\r\n- **변수에는 오직 한개의 값만 선언될 수 있다.**\r\n- **변수는 자신이 선언된(속한) 공간을 벗어날 수 없다.**\r\n\r\n```\r\n    예를 들어, 반복문 안에 변수를 선언하면 반복이 계속될 동안 변수는 그 영역 안에서 계속 변경될 수 있지만, 외부 영역(여기에서는 반복문 외부를 뜻함)에는 영향을 미치지 못한다. 하지만, 변수를 반복문 영역 밖으로 빼내고 반복문보다 위쪽에 위치시키면, 그 변수의 값은 반복문의 영향을 받지 않는다.\r\n```\r\n<br>\r\n## 변수의 종류\r\n\r\n - 변수의 종류는 **\'변수가 선언된 위치\'** 에 의해 결정된다.\r\n - 종류로는 **인스턴스 변수**, **클래스변수**, **지역변수**가 있다.\r\n\r\n![image](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdScUgz%2FbtqLFSwo2qn%2FokVUtvk47Ds2KjtKE1OSTk%2Fimg.jpg)\r\n(출처: itmining.tistory.com/20)\r\n\r\n```\r\n※ 변수의 유지 조건 ※\r\n- 객체(인스턴스)가 살아있는 동안 유지 = 인스턴스 변수\r\n- 함수(매서드)가 실행되는 동안만 유지 = 지역변수\r\n```\r\n\r\n<br>\r\n## 변수별 특징\r\n\r\n1. **인스턴스 변수**\r\n   - 인스턴스가 생성될 때 생성됨\r\n   - 인스턴스마다 **고유의 값**을 가질 수 있음\r\n   <br>\r\n2. **클래스 변수**\r\n   - 인스턴스 변수에 **static**을 붙여준 것\r\n   - 인스턴스 변수는 각각의 고유한 값을 가지지만 클래스 변수는 모든 인스턴스가 **공통된 값을 공유**하게 됨\r\n   - 클래스가 로딩 시 생성되고 종료 시 까지 유지되는 변수에는 public을 붙여주어야 함\r\n   - public이 붙은 변수는 전역 변수라 하며, 동일 프로그램 내에서 어디서든 접근이 가능함\r\n   - 인스턴스 전근법과 다르게 인스턴스를 생성하지 않고 \"클래스이름.클래스변수명\"으로도 접근이 가능함\r\n     <br>\r\n3. **지역 변수**\r\n   - **메서드 내**에서 선언됨\r\n   - **메서드 내에서만** 사용이 가능한 변수\r\n   - 메서드 실행 시 메모리가 할당되며(생성되며) **메서드 종료 시 기능을 상실**\r\n   <br>\r\n4. **레퍼런스 변수**\r\n   - **하나의 객체가 여러 기능을 원격으로 조종**할 수 있는 **리모컨 기능**을 갖고 있는 객체가 되는 것을 레퍼런스 변수라 함\r\n```\r\n참조(reference)는 심볼릭 링크(symbolic link) 혹은 바로가기(윈도우)를 만드는 것과 비슷하다.\r\n원본 파일에 대해서 심볼릭 링크를 만들면 원본이 수정되면 심볼릭 링크에도 그 내용이 실시간으로 반영되는 것과 같은 효과다.\r\n심볼릭 링크를 통해서 만든 파일은 원본 파일에 대한 주소 값이 담겨 있다.\r\n누군가 심볼릭 링크에 접근하면 컴퓨터는 심볼릭 링크에 저장된 원본의 주소를 참조해서 원본의 위치를 알아내고 원본에 대한 작업을 하게 된다.\r\n\r\n다시 말해서 원본을 복제한 것이 아니라 원본 파일을 참조(reference)하고 있는 것 이다. 덕분에 저장 장치의 용량을 절약할 수 있고, 원본 파일을 사용하고 있는 모든 복제본이 동일한 내용을 유지할 수 있게 된다. 참조는 전자화된 세계의 극치라고 할 수 있다.\r\n\r\n(출처: opentutorials.org/module/2495/14152)\r\n```\r\n\r\n',2,1,1,1,3),(11,'2021-01-06 21:48:37','2021-04-24 15:28:19','1강. HTML & CSS & JS의 개념 및 역할','하나의 웹페이지는 **HTML,** **CSS,** **JS**로 구성되어 있다.  **HTML,** **CSS,** **JS**는 각각 자신들만의 역할을 담당하고 있는데, 그 역할들을 잘 조합하면 하나의 웹페이지를 만들어 낼 수 있다. \r\n\r\n 이러한 **HTML,** **CSS,** **JS**을 다루는 것을 **\'웹코딩\'** 이라 한다. \r\n \r\n 지금부터 각각의 기본적인 개념과 역할들을 알아보자.\r\n<br>\r\n\r\n# < HTML >\r\n####  주요 역할 : 문서 내용 담당[배우]\r\n<br>\r\n- 웹페이지를 만들기 위한 언어로 웹브라우저 위에서 동작하는 언어다.\r\n- html안에는 이미  **기본 태그**와  **속성**들이 저장되어 있다.\r\n- CSS는 이 속성들을 창조하는 것이 아닌 변화시켜주는 리모컨 역할을 한다.\r\n```\r\n< HTML의 의미 >\r\n\r\nHT - HyperText, 문서와 문서가 링크로 연결되어 있다.\r\n\r\nM - Markup, 태그로 이루어져 있다.\r\n\r\nL - Language\r\n```\r\n\r\n\r\n\r\n# < CSS >\r\n\r\n####  주요 역할 : 문서 꾸밈 담당[스타일리스트]\r\n<br>\r\n- CSS는 HTML을 아름답게 꾸며주는 **디자이너의 언어**다.\r\n- 잘 설계된 CSS는 **재활용이 가능**하며 **테마, 템플릿**의 형태로 **확장**할 수 있다. \r\n- 또한 자바스크립트와 연계해 콘텐츠의 내용이나 디자인을 **동적**으로 처리할 경우에도 유용하게 사용된다.\r\n```\r\n< CSS의 의미 >\r\n\r\nC - Cascading, \'폭포처럼 떨어져 내리는\'이라는 사전적 의미로 상위 요소에서 정의한 속성이 하위 요소로 전달된다는 의미에서 유래했다.\r\n\r\nSS - StyleSheet, 스타일을 다루는 정체성을 보여준다.\r\n```\r\n\r\n# < JS; JavaScript >\r\n\r\n####  주요 역할: 감독[감독]\r\n<br>\r\n- JavaScript는 **객체(object)** 기반의 스크립트 언어다.\r\n- **HTML로는 웹의 내용을 작성**하고, **CSS로는 웹을 디자인**하고, **JavaScript로는 웹의 동작을 구현**할 수 있다.\r\n- JavaScript는 **동적**이며, 타입을 명시할 필요가 없는 **인터프리터 언어**다.\r\n- 따라서, 컴파일 작업이 필요하지 않고, 소스코드를 바로 실행한다.\r\n```\r\n< Java와 JavaScript >\r\n\r\nJava와 JavaScript는 그 이름만 놓고 보면 서로 관련이 있는 언어로 생각되기 쉽다.\r\n\r\n하지만 두 언어는 서로 직접적인 관련은 없으며, 비슷한 점보다는 다른 점이 훨씬 많다.\r\n\r\n문법상 비슷한 부분은 두 언어의 문법이 모두 C언어를 기반으로 만들어졌기 때문이다.\r\n\r\n(출처: http://www.tcpschool.com/javascript/js_intro_basic)\r\n\r\n```',3,1,1,0,2),(12,'2021-01-08 18:08:22','2021-04-24 15:28:19','2강. HTML 태그, 엘리먼트 개념 및 관계성(feat.부모,자식,형제)','# HTML의 구성 개념\r\n\r\n```\r\n\r\n태그1---▶     <엘리먼트1(여는 태그)>  내용1  </엘리먼트1(닫는 태그)>     ◀---태그2\r\n태그3---▶     <엘리먼트2(여는 태그)>  내용2  </엘리먼트2(닫는 태그)>     ◀---태그4\r\n\r\n```\r\n\r\n\r\n- <  >각각을 **\'태그\'** 라 한다.\r\n- 서로 짝이되는(여는 태그+닫는 태그)태그를 **1개의 엘리먼트**라고 한다.\r\n- 즉, 위 내용에서 태그는 총 4개이고, 엘리먼트는 총 2개이다.\r\n- HTML에서 태그는 여러 종류가 존재하는데 이는 다음에 자세히 살펴보도록 하자.\r\n\r\n# 엘리먼트간의 관계성(feat. 부모, 자식, 형제)\r\n```html\r\n\r\n<div1>                   \r\n    <section>           \r\n        <nav></nav>    \r\n    </section>\r\n</div1>\r\n\r\n<div2></div2>   \r\n\r\n```\r\n\r\n - 각각의 엘리먼트간에는 **관계성**이 존재한다.\r\n - 위 내용에서 div1 엘리먼트의 여는태그(\\<div1>)와 닫는태그(\\</div1>) 사이에 section과 nav 엘리먼트가 위치하고 있는 것을 볼 수 있다.\r\n - 마찬가지로 section엘리먼트의 여는태그(\\<section>)와 닫는태그(\\</section>) 사이에는 nav 엘리먼트가 있는 것을 볼 수 있다.\r\n - 이 관계를 해석하면 아래와 같다.\r\n```html\r\n\r\n<div1>                           <!--section의 부모--><!--nav의 조상-->\r\n    <section>                    <!--div의 자식-->\r\n        <nav></nav>              <!--div의 후손--> <!--section의 자식-->\r\n    </section>\r\n</div1>\r\n\r\n\r\n- div1엘리먼트에 속한 자식은 section엘리먼트\r\n\r\n- section엘리먼트에 속한 자식은 nav엘리먼트\r\n\r\n- div1엘리먼트의 후손은 nav엘리먼트\r\n\r\n- nav엘리먼트의 조상은 div1엘리먼트\r\n\r\n```\r\n- 엘리먼트간의 관계성에서 **자식과 후손**은 각각의 **부모 또는 조상**으로부터 **영향을 받는다.**\r\n- **즉, 부모 또는 조상의 속성을 변경하면 자식과 후손도 속성이 변한다는 의미이다.**\r\n- 이를 적절히 활용하면 스타일을 적용할 때 모든 엘리먼트를 일일이 선택할 필요없이 부모나 조상의 스타일만 바꿔도 이에 속한 자식과 후손들의 스타일을 한번에 바꿀 수 있다.(다만, 속성에 따라 적용이 되지 않는 것도 있으니 유의하도록 하자.)\r\n<br>\r\n- 다음으로 div2 엘리먼트는 div1에 속해있지 않고 다른 위치에 있는 것을 확인할 수 있다.\r\n- 이러한 관계는 **형제관계**라 한다.\r\n\r\n```html\r\n\r\n<div1>                           <!--section의 부모--><!--nav의 조상-->\r\n    <section>                    <!--div의 자식-->\r\n        <nav></nav>              <!--div의 후손--> <!--section의 자식-->\r\n    </section>\r\n</div1>\r\n\r\n\r\n<div2></div2>                   <!--형제관계(동등)-->\r\n\r\n- div1 엘리먼트와 div2 엘리먼트는 형제관계\r\n```\r\n- 즉, div1 엘리먼트와 div2 엘리먼트는 **서로 영향을 받지 않는 동등한 관계**라는 것을 의미한다.\r\n- 웹코딩을 할 때 선택한 엘리먼트 외 다른 엘리먼트에는 영향을 끼치고 싶지 않다면 이와 같은 형제관계를 적절히 사용하도록 하자.',3,1,0,0,6),(13,'2021-01-09 13:08:43','2021-04-24 15:28:19','Codepen 적용 테스트입니다.','# Type 1 = html\r\n```codepen\r\nhttps://codepen.io/jangka44/embed/JjRyxQY?height=265&theme-id=light&default-tab=html,result\r\n```\r\n\r\n# Type 2 = html, css\r\n```codepen\r\nhttps://codepen.io/jangka44/embed/BaLdbyr?height=265&theme-id=light&default-tab=css,result\r\n```\r\n\r\n# Type 3 = html, css, editable\r\n```codepen\r\nhttps://codepen.io/jangka44/embed/BaLdbyr?height=265&theme-id=light&default-tab=css,result&editable=true\r\n```\r\n\r\n# Type 4 = html, css, dark, editable\r\n```codepen\r\nhttps://codepen.io/jangka44/embed/BaLdbyr?height=265&theme-id=dark&default-tab=css,result&editable=true\r\n```\r\n\r\n# Type 5 = html, css, js, dark, editable\r\n```codepen\r\nhttps://codepen.io/jangka44/embed/oNzeVjY?height=265&theme-id=dark&default-tab=js,result&editable=true\r\n```\r\n\r\n# Type 6 = js, console, dark, editable\r\n```codepen\r\nhttps://codepen.io/jangka44/embed/wvzqZqB?height=300&theme-id=light&default-tab=js,result&editable=true\r\n```\r\n\r\n# 테스트\r\n```codepen\r\nhttps://codepen.io/cjy324/embed/preview/poEZLJM?height=265&theme-id=light&default-tab=html,css,result&editable=true\r\n```',1,1,1,0,6),(14,'2021-01-17 23:22:09','2021-04-24 15:28:19','1강. DB, SQL 그리고 MySQL 소개','# 데이터베이스(DB; Database)\r\nMySQL을 학습하기전에 데이터베이스에 대한 간략한 개념정리를 먼저 해보자.\r\n\r\n* 데이터베이스란, **통합하여 관리되고 있는 데이터들의 집합**이다.\r\n* 즉, **정보 저장소**라고 생각하면 될 것이다.\r\n* 데이터베이스는 별도의 미들웨어에 의해 관리되는데 이러한 미들웨어를 **DBMS(Database Management System) 즉, \'데이터베이스 관리시스템\'** 이라 한다.\r\n(*MySql은 현재 가장 많이 사용되고 있는 관계형 데이터베이스 관리 시스템(RDBMS: Relational DBMS)이다, 자세한 내용은 아래 참고)\r\n* 또한, 데이터베이스에서 데이터를 정의, 조작 등을 수행하는 언어가 존재하는데 이를 \'SQL\'이라 한다.\r\n\r\n# SQL(Structured Query Language)\r\n\r\n* SQL은 데이터베이스에서 데이터를 **정의, 조작, 제어**하기 위해 사용하는 언어이다.\r\n* SQL 구문에는 목적에 따라 크게 3가지(DDL, DML, DCL)로 분류할 수 있는데 이부분에 대해선 아래 표를 통해 간략히 이해정도만 하고 넘어가도록 하자\r\n\r\n\r\n| 속성 |설명  |주요 명령어  |\r\n| --- | --- | --- |\r\n|DDL  | 데이터베이스나 테이블 등을 생성, 삭제하거나 그 구조를 변경하기 위한 명령어 |CREATE, ALTER, DROP  |\r\n| DML | 데이터베이스에 저장된 데이터를 처리하거나 조회, 검색하기 위한 명령어 | INSERT, UPDATE, DELETE, SELECT 등|\r\n|  DCL| 데이터베이스에 저장된 데이터를 관리하기 위하여 데이터의 보안성 및 무결성 등을 제어하기 위한 명령어 |GRANT, REVOKE 등  |\r\n\r\n\r\n# MySQL\r\n지금부터는 **MySQL**에 대해 본격적으로 살펴보도록 하자\r\n\r\n\r\n\r\n## MySQL의 개념\r\n* MySQL은 현재 가장 많이 사용되고 있는 ***관계형 데이터베이스 관리 시스템(RDBMS: Relational DBMS)** 이다. \r\n\r\n```\r\n*RDBMS란?\r\n - 현재 가장 많이 사용되고 있는 데이터베이스의 한 종류\r\n - 데이터의 종속성을 관계(relationship)로 표현\r\n```\r\n* MySQL은 **오픈 소스**이며, 다중 사용자와 다중 스레드를 지원한다.\r\n* 또한, C언어, C++, JAVA, PHP 등 **여러 프로그래밍 언어를 위한 다양한 API를 제공**하고 있다.\r\n* MySQL은 유닉스, 리눅스, 윈도우 등 **다양한 운영체제에서 사용**할 수 있으며, 특히 **PHP와 함께 웹 개발에 자주 사용**된다.\r\n* MySQL은 오픈 소스 라이센스를 따르기는 하지만, 상업적으로 사용할 때는 상업용 라이센스를 구입해야만 한다.\r\n\r\n## MySQL의 장점\r\n1. 오픈 소스이므로 **무료**로 사용할 수 있다.\r\n\r\n2. **다양한 운영체제**와 **프로그래밍 언어**에서 사용할 수 있다.\r\n\r\n3. 크기가 큰 데이터 집합도 **빠르고 효과적으로 처리**할 수 있다.\r\n\r\n4. **표준 SQL 형식**을 사용한다.\r\n\r\n5. MySQL 응용 프로그램을 사용자의 용도에 맞게 수정할 수 있다.\r\n\r\n\r\n## MySQL 개념도\r\n\r\n```\r\nDatabase > Table > Column, row, Data\r\n\r\n- Database\r\n:Table들의 집합\r\n\r\n- Table\r\n: Column + Row들의 집합\r\n\r\n- Column\r\n: 각각의 data 값에 대한 열\r\n\r\n- Low\r\n: 각각의 data 값에 대한 행\r\n\r\n즉, Database는 = 폴더, 저장소\r\nTable = 각각의 data들이 Column과 Low로 정렬된 표\r\n\r\n그리고\r\n\r\nDB들 + 관리프로그램이 \'MySQL\'이다.\r\n```\r\n\r\n## MySQL client 그리고 server\r\nMySQL에는 **Client, Server**라는 개념이 존재한다.\r\n\r\n* Client\r\n: 데이터를 수정하거나 반환하기 위해 서버에 접속하는 프로그램\r\n* Server\r\n: 주요 데이터베이스를 다루는 프로그램\r\n\r\n정리하자면, MySQL client는 MySQL sever에게 요청을 하는 **\"고객\"** 개념으로 이해하면 되고, MySQL sever는 고객의 요청을 받고 이를 DB에서 직접적으로 수행하는 **\"종업원\"** 정도로 이해하면 된다.\r\n\r\n즉, MySQL client는 MySQL sever를 관리하기 위해 사용하는 것(cmd)',4,1,0,0,0),(15,'2021-01-18 00:02:43','2021-04-24 15:28:20','2강. 기초 SQL문법 정리','# 기초적인 SQL 문법 정리\r\nMySQL은 **SQL 문법**을 통해 DB내 데이터를 **정의, 조작, 제어**한다. 따라서 당연하게도 **SQL 문법을 알아야만 MySQL을 다룰 수 있다.**\r\n<br>\r\n아래 표는 기초적인 SQL문법들을 정리한 표이다. 표 내용을 통해 기초적인 SQL문법들에 대해 학습하도록 하자\r\n\r\n\r\n| 종류 | DB(데이터베이스) | TABLE(테이블) | ROW(로우/행 데이터) |\r\n| --- | --- | --- | --- |\r\n| 조회 | SHOW DATABASES;<br>(모든 DB조회) |SHOW TABLES; (DB내 모든 Table조회)<br> DESC 테이블명; (Table의 구조 조회) | SELECT * FROM 테이블명<br>(Table 내 모든 컬럼(*) 조회) |\r\n| 생성 | CREATE DATABASE 이름;<br>(DB생성) | CREATE TABLE 이름 (<br> id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT, <br>regDate DATETIME NOT NULL, <br>title VARCHAR(100) NOT NULL<br>);<br>(해당 칼럼들을 가진 Table 생성) | INSERT INTO 테이블명 <br>SET regDate = NOW(), <br>title = \'제목1\';<br>(해당 테이블 각 해당 칼럼에 Data 삽입) |\r\n| 수정 | 없음 |ALTER TABLE 테이블명 ADD COLUMN 칼럼명 INT(10);<br>(테이블에 새로운 칼럼 추가)<br>(그 외, ADD 위치에 MODIFY, CHANGE, DROP 등을 입력해 컬럼 조작 가능)  | UPDATE 테이블명<br>SET title = \'인기글\'<br>WHERE id = 3;<br>(id가 3인 row의 title을 \'인기\'로 수정) |\r\n| 삭제 | DROP DATABASE 이름;<br>(DB삭제)| DROP TABLE 이름;<br>(Table 삭제) | DELETE FROM 테이블명<br>WHERE id = 3;<br>(id가 3인 row 삭제); |',4,1,0,0,0),(16,'2021-01-18 22:36:23','2021-04-24 15:28:20','9강. 배열','# 배열이란?\r\n - 배열은 **같은 타입의 데이터**를 연속된 공간에 나열시키고 각 데이터에 **인덱스(index)** 를 부여해 놓은 자료구조다.\r\n - 즉, **타입이 같은 연관된 데이터들**을 **그룹화**하여 **\'배열\'** 이란 **\'상자\'** 에 담아두는 것이다.\r\n - 배열은 프로그래밍을 할 때 아주 다양하게 활용되므로 반드시 학습해 두어야 한다.\r\n\r\n\r\n\r\n# 배열의 장점\r\n - 변수는 **한개의 데이터만 저장**할 수 있다. 따라서 저장해야 할 **데이터의 수가 많아지면** 그만큼 많은 양의 변수를 선언해줘야하는 **비효율성이 발생**한다.\r\n - 배열은 이러한 문제를 **효율적**으로 해결할 수 있다.\r\n - 연관된 데이터를 저장할 때 변수의 선언을 줄여주며, 반복문 등 반복되는 계산과정을 쉽게 처리할 수 있다.\r\n\r\n \r\n\r\n# 배열 선언 방법\r\nJAVA에서 배열의 선언 방법은 크게 **2가지**가 있다. \r\n<br>\r\n## (1) 자료형[ ] 변수명 = {데이터1, 데이터2, 데이터3};\r\n<br>\r\n#### 이 방법은 데이터 값들을 이미 알고 있을 때 활용하면 편리한 방법이다.\r\n<br>\r\n\r\n```\r\n자료형[] 변수명 = {데이터1, 데이터2, 데이터3};\r\n\r\nex) String[] data = {\"데이터1\", \"데이터2\", \"데이터3\"};\r\n \r\n \r\n<배열의 구조 해석>\r\n\r\nlength(배열의 크기(길이)) -> 3\r\nelement(데이터 값) -> 데이터1, 데이터2, 데이터3\r\nindex(구분자(번호)) -> 0, 1, 2\r\n```\r\n\r\n\r\n \r\n<br>\r\n## (2) 자료형[ ] 변수명 = new 자료형[배열의 크기(길이)];\r\n<br>\r\n#### 이 방법은 현재 데이터 값은 잘 모르지만 변수를 미리 선언해 놓고 향후에 데이터를 추가하고자 할 때 활용하면 편리한 방법이다.\r\n <br>\r\n\r\n```\r\n 자료형[] 변수명 = new 자료형[배열의 크기(길이)];\r\n \r\n    변수명[0] = 데이터1;\r\n\r\n    변수명[1] = 데이터2;\r\n\r\n    변수명[2] = 데이터3;\r\n\r\n\r\n\r\n ex) String[] data = new String[3];\r\n\r\n         data[0] = \"데이터1\";\r\n\r\n         data[1] = \"데이터2\";\r\n\r\n         data[2] = \"데이터3\";\r\n\r\n\r\n<배열의 구조 해석>\r\n\r\nlength(배열의 크기(길이)) -> 3\r\nelement(데이터 값) -> 데이터1, 데이터2, 데이터3\r\nindex(구분자(번호)) -> 0, 1, 2\r\n```\r\n<br>\r\n각 방법마다 장단점이 있으므로 꼭 한가지 방법만 활용하기 보다는 자신에게 요구되는 상황에 맞게 적절하게 선택하여 활용하는 것이 좋다.',2,1,0,0,0),(17,'2021-01-20 23:45:44','2021-04-24 15:28:20','P.JSP - 개발일지(회원가입 기능 구현)','\r\n# 회원가입 기능 구현\r\n - [x] 아이디 중복 여부 확인\r\n - [x] 비밀번호 확인\r\n   - [x] email,연락처 올바른 양식 확인\r\n - [x] 공란 여부 확인\r\n - [x] 알림창 확인\r\n - [x] 완료페이지 이동 확인\r\n<br>\r\n## 영상\r\n\r\n```youtube\r\nV5vZMGrp-_o\r\n```\r\n<br>\r\n## 소스코드\r\n```java\r\n// 회원가입 폼\r\n	public String doJoinForm(HttpServletRequest request, HttpServletResponse response) {\r\n\r\n		HttpSession session = request.getSession();\r\n\r\n		// 로그인 여부 확인\r\n		if (session.getAttribute(\"loginedMemberId\") != null) {\r\n			request.setAttribute(\"alertMsg\", \"이미 로그인된 상태입니다.\");\r\n			request.setAttribute(\"historyBack\", true); // historyBack: 뒤로 돌아가기\r\n			return \"common/redirect\";\r\n		}\r\n		\r\n		return \"usr/member/doJoinForm\";\r\n	}\r\n\r\n	// 회원가입\r\n	public String doJoin(HttpServletRequest request, HttpServletResponse response) {\r\n\r\n		String loginId = request.getParameter(\"loginId\");\r\n		String loginPw = request.getParameter(\"loginPw\");\r\n		String name = request.getParameter(\"name\");\r\n		String nickname = request.getParameter(\"nickname\");\r\n		String email = request.getParameter(\"email\");\r\n		String cellPhoneNo = request.getParameter(\"cellPhoneNo\");\r\n\r\n		List<Member> members = memberService.getMemberListForPrint();\r\n\r\n		// 해당 loginId가 사용가능한지 중복확인\r\n		for (int i = 0; i < members.size(); i++) {\r\n			if (members.get(i).getLoginId().equals(loginId) == true) {\r\n				request.setAttribute(\"alertMsg\", \"해당 아이디는 이미 사용중인 아이디입니다.\");\r\n				request.setAttribute(\"historyBack\", true); // historyBack: 뒤로 돌아가기\r\n				return \"common/redirect\";\r\n			}\r\n		}\r\n\r\n		// 해당 nickname이 사용가능한지 중복확인\r\n		for (int i = 0; i < members.size(); i++) {\r\n			if (members.get(i).getNickname().equals(nickname) == true) {\r\n				request.setAttribute(\"alertMsg\", \"해당 닉네임는 이미 사용중인 닉네임입니다.\");\r\n				request.setAttribute(\"historyBack\", true); // historyBack: 뒤로 돌아가기\r\n				return \"common/redirect\";\r\n			}\r\n		}\r\n\r\n		Map<String, Object> joinArg = new HashMap<>();\r\n		joinArg.put(\"loginId\", loginId);\r\n		joinArg.put(\"loginPw\", loginPw);\r\n		joinArg.put(\"name\", name);\r\n		joinArg.put(\"nickname\", nickname);\r\n		joinArg.put(\"email\", email);\r\n		joinArg.put(\"cellPhoneNo\", cellPhoneNo);\r\n\r\n		// 신규 회원가입\r\n		int id = memberService.join(joinArg);\r\n\r\n		// 생성 알림창 보여주고 회원정보로 이동하기\r\n		request.setAttribute(\"alertMsg\", id + \"번 회원님 반갑습니다.\");\r\n\r\n		Member member = memberService.getMemberById(id);\r\n\r\n		request.setAttribute(\"member\", member);\r\n\r\n		return \"usr/member/doJoin\";\r\n\r\n	}\r\n\r\n\r\n\r\n\r\n```',6,1,0,0,0),(18,'2021-01-20 23:47:40','2021-04-24 15:28:20','P.JSP - 개발일지(로그인 기능 구현)','\r\n# 로그인 기능 구현\r\n - [x] 아이디 확인\r\n - [x] 비밀번호 확인\r\n - [x] 공란 여부 확인\r\n - [x] 닉네임 + 환영메시지 알림창 확인\r\n - [x] session에 로그인 정보 기록됐는지 확인\r\n  -> 상단의 로그인 버튼이 로그아웃으로 바뀌면 O\r\n - [x] 메인페이지 이동 확인\r\n<br>\r\n# 로그아웃 기능 구현\r\n - [x] 로그인 여부 확인\r\n - [x] 로그아웃 확인\r\n  -> 상단의 로그아웃 버튼이 로그인으로 바뀌면 O\r\n<br>\r\n\r\n## 영상\r\n\r\n```youtube\r\nMJB_svUx40Y\r\n```\r\n<br>\r\n## 소스코드\r\n```java\r\n// 로그인 폼\r\npublic String doLoginForm(HttpServletRequest request, HttpServletResponse response) {\r\n		return \"usr/member/doLoginForm\";\r\n	}\r\n\r\n// 로그인\r\npublic String doLogin(HttpServletRequest request, HttpServletResponse response) {\r\n		String loginId = request.getParameter(\"loginId\");\r\n		String loginPw = request.getParameter(\"loginPw\");\r\n\r\n		Member member = memberService.getMemberByLoginId(loginId);\r\n\r\n		// 해당 loginId가 등록된 id인지 확인\r\n		if (member == null) {\r\n			request.setAttribute(\"alertMsg\", \"해당 아이디는 없는 아이디입니다. 아이디를 확인하세요.\");\r\n			request.setAttribute(\"historyBack\", true); // historyBack: 뒤로 돌아가기\r\n			return \"common/redirect\";\r\n		}\r\n\r\n		// 해당 loginPw가 일치하는지 확인\r\n		if (member.getLoginPw().equals(loginPw) == false) {\r\n			request.setAttribute(\"alertMsg\", \"비밀번호가 틀렸습니다.\");\r\n			request.setAttribute(\"historyBack\", true); // historyBack: 뒤로 돌아가기\r\n			return \"common/redirect\";\r\n		}\r\n\r\n		// 로그인 여부를 세션에 저장\r\n		HttpSession session = request.getSession();\r\n		session.setAttribute(\"loginedMemberId\", member.getId());\r\n\r\n		// 로그인 알림창 보여주고 메인화면으로 이동\r\n		request.setAttribute(\"alertMsg\", member.getNickname() + \", 님 반갑습니다.\");\r\n		request.setAttribute(\"replaceUrl\", \"../home/main\");\r\n		return \"common/redirect\";\r\n	}\r\n\r\n// 로그아웃\r\npublic String doLogout(HttpServletRequest request, HttpServletResponse response) {\r\n\r\n		HttpSession session = request.getSession();\r\n\r\n		// 로그인 여부 확인\r\n		if (session.getAttribute(\"loginedMemberId\") == null) {\r\n			request.setAttribute(\"alertMsg\", \"이미 로그아웃 상태입니다.\");\r\n			request.setAttribute(\"historyBack\", true); // historyBack: 뒤로 돌아가기\r\n			return \"common/redirect\";\r\n		}\r\n\r\n		// 로그인 여부를 세션에서 삭제\r\n		session.removeAttribute(\"loginedMemberId\");\r\n\r\n		request.setAttribute(\"alertMsg\", \"로그아웃 되었습니다.\");\r\n		request.setAttribute(\"replaceUrl\", \"../home/main\");\r\n		return \"common/redirect\";\r\n\r\n	}\r\n\r\n\r\n```',6,1,0,0,0),(19,'2021-01-21 23:50:10','2021-04-24 15:28:21','P.JSP - 개발일지(홈-메인화면 임시템플릿 적용)','\r\n# 홈-메인화면 임시템플릿 적용\r\n - [x] 메뉴버튼별 hover\r\n - [x] 상단바 고정\r\n - [x] 공란 여부 확인\r\n - [x] 모바일용 메뉴 토글\r\n<br>\r\n\r\n## 영상\r\n\r\n```youtube\r\nETdjJbZNrFI\r\n```',6,1,0,0,0),(20,'2021-01-21 23:53:39','2021-04-24 15:28:21','P.JSP - 개발일지(게시판별 CRUD 기능 구현)','\r\n# 게시판별 CRUD 기능 구현\r\n - [x] 게시판별 게시물 리스팅\r\n - [x] Create\r\n   - [x] 로그인 회원만 가능\r\n - [x]  Read\r\n - [x]  Update\r\n   - [x] 로그인시에만 버튼 노출\r\n   - [x] 로그인 회원만 가능\r\n   - [x]  작성자만 수정 가능(권한체크)\r\n   - [x] 확인창(최소 가능)\r\n - [x]  Delete\r\n   - [x] 로그인시에만 버튼 노출\r\n   - [x] 로그인 회원만 가능\r\n   - [x]  작성자만 수정 가능(권한체크)\r\n   - [x] 확인창(최소 가능)\r\n<br>\r\n\r\n## 영상\r\n\r\n```youtube\r\nuqnKGhVZ4QA\r\n```\r\n<br>\r\n## 소스코드\r\n```java\r\n\r\n// 리스트 가져오기\r\npublic String showList(HttpServletRequest request, HttpServletResponse response) {\r\n\r\n		int boardId = Integer.parseInt(request.getParameter(\"boardId\"));\r\n\r\n		List<Article> articles = articleService.getArticlesForPrintByBoardId(boardId);\r\n\r\n		// 만약, 해당 게시판 번호의 게시판이 없으면 알림 메시지와 뒤로 돌아가기 실시\r\n		if (articles.size() <= 0) {\r\n			request.setAttribute(\"alertMsg\", boardId + \"번 게시물은 존재하지 않습니다. 게시판 번호를 확인하세요.\");\r\n			request.setAttribute(\"historyBack\", true); // historyBack: 뒤로 돌아가기\r\n			return \"common/redirect\";\r\n		}\r\n\r\n		request.setAttribute(\"articles\", articles);\r\n\r\n		return \"usr/article/list\";\r\n	}\r\n\r\n// 게시물 상세보기\r\npublic String showDetail(HttpServletRequest request, HttpServletResponse response) {\r\n\r\n		int id = Integer.parseInt(request.getParameter(\"id\"));\r\n\r\n		Article article = articleService.getArticleById(id);\r\n\r\n		if (article == null) {\r\n			request.setAttribute(\"alertMsg\", id + \"번 게시물은 존재하지 않습니다. 게시물 번호를 확인하세요.\");\r\n			request.setAttribute(\"historyBack\", true); // historyBack: 뒤로 돌아가기\r\n			return \"common/redirect\";\r\n		}\r\n\r\n		request.setAttribute(\"article\", article);\r\n\r\n		return \"usr/article/detail\";\r\n	}\r\n\r\n// 게시물 등록 폼\r\npublic String doWriteForm(HttpServletRequest request, HttpServletResponse response) {\r\n\r\n		HttpSession session = request.getSession();\r\n\r\n		// 로그인 여부 체크\r\n		if (session.getAttribute(\"loginedMemberId\") == null) {\r\n			request.setAttribute(\"alertMsg\", \"로그인 후 이용가능합니다.\");\r\n			request.setAttribute(\"replaceUrl\", \"../member/doLoginForm\");\r\n			return \"common/redirect\";\r\n		}\r\n\r\n		return \"usr/article/doWriteForm\";\r\n	}\r\n\r\n// 게시물 등록\r\npublic String doWrite(HttpServletRequest request, HttpServletResponse response) {\r\n\r\n		HttpSession session = request.getSession();\r\n\r\n		int boardId = Integer.parseInt(request.getParameter(\"boardId\"));\r\n		int memberId = (int) session.getAttribute(\"loginedMemberId\");\r\n\r\n		String title = request.getParameter(\"title\");\r\n\r\n		String body = request.getParameter(\"body\");\r\n\r\n		// 해당 게시판이 존재하는지 확인\r\n		List<Article> articles = articleService.getArticlesForPrintByBoardId(boardId);\r\n\r\n		if (articles.size() <= 0) {\r\n			request.setAttribute(\"alertMsg\", boardId + \"번 게시판은 존재하지 않습니다. 게시판 번호를 확인하세요.\");\r\n			request.setAttribute(\"historyBack\", true); // historyBack: 뒤로 돌아가기\r\n			return \"common/redirect\";\r\n		}\r\n\r\n		// 게시물 생성\r\n		int id = articleService.add(boardId, title, body, memberId);\r\n\r\n		// 생성 알림창 보여주고 detail로 이동하기\r\n		request.setAttribute(\"alertMsg\", id + \"번 게시물이 생성되었습니다.\");\r\n		request.setAttribute(\"replaceUrl\", String.format(\"detail?id=%d\", id));\r\n		return \"common/redirect\";\r\n\r\n	}\r\n\r\n// 게시물 수정 폼\r\npublic String doModifyForm(HttpServletRequest request, HttpServletResponse response) {\r\n\r\n		HttpSession session = request.getSession();\r\n		\r\n		// 로그인 여부 체크\r\n		if (session.getAttribute(\"loginedMemberId\") == null) {\r\n			request.setAttribute(\"alertMsg\", \"로그인 후 이용가능합니다.\");\r\n			request.setAttribute(\"replaceUrl\", \"../member/doLoginForm\");\r\n			return \"common/redirect\";\r\n		}\r\n\r\n		int memberId = (int) session.getAttribute(\"loginedMemberId\");\r\n\r\n		// 해당 게시판이 존재하는지 확인\r\n		int id = Integer.parseInt(request.getParameter(\"id\"));\r\n\r\n		Article article = articleService.getArticleById(id);\r\n\r\n		if (article == null) {\r\n			request.setAttribute(\"alertMsg\", id + \"번 게시물은 존재하지 않습니다. 게시물 번호를 확인하세요.\");\r\n			request.setAttribute(\"historyBack\", true); // historyBack: 뒤로 돌아가기\r\n			return \"common/redirect\";\r\n		}\r\n\r\n		// 작성자 본인 여부 체크\r\n		if (article.getMemberId() != memberId) {\r\n			request.setAttribute(\"alertMsg\", \"작성자만 수정이 가능합니다.\");\r\n			request.setAttribute(\"historyBack\", true); // historyBack: 뒤로 돌아가기\r\n			return \"common/redirect\";\r\n		}\r\n\r\n		request.setAttribute(\"article\", article);\r\n\r\n		return \"usr/article/doModifyForm\";\r\n	}\r\n\r\n// 게시물 수정\r\npublic String doModify(HttpServletRequest request, HttpServletResponse response) {\r\n\r\n		int id = Integer.parseInt(request.getParameter(\"id\"));\r\n		String title = request.getParameter(\"title\");\r\n		String body = request.getParameter(\"body\");\r\n\r\n		// 게시물 수정\r\n		articleService.articleModify(id, title, body);\r\n\r\n		// 수정 알림창 보여주고 detail로 이동하기\r\n		request.setAttribute(\"alertMsg\", id + \"번 게시물이 수정되었습니다.\");\r\n		request.setAttribute(\"replaceUrl\", String.format(\"detail?id=%d\", id));\r\n		return \"common/redirect\";\r\n\r\n	}\r\n\r\n// 게시물 삭제\r\npublic String doDelete(HttpServletRequest request, HttpServletResponse response) {\r\n\r\n		HttpSession session = request.getSession();\r\n\r\n		// 로그인 여부 체크\r\n		if (session.getAttribute(\"loginedMemberId\") == null) {\r\n			request.setAttribute(\"alertMsg\", \"로그인 후 이용가능합니다.\");\r\n			request.setAttribute(\"historyBack\", true); // historyBack: 뒤로 돌아가기\r\n			return \"common/redirect\";\r\n		}\r\n\r\n		int memberId = (int) session.getAttribute(\"loginedMemberId\");\r\n\r\n		\r\n		// 해당 게시판이 존재하는지 확인\r\n		int id = Integer.parseInt(request.getParameter(\"id\"));\r\n\r\n		Article article = articleService.getArticleById(id);\r\n\r\n		if (article == null) {\r\n			request.setAttribute(\"alertMsg\", id + \"번 게시물은 존재하지 않습니다. 게시물 번호를 확인하세요.\");\r\n			request.setAttribute(\"historyBack\", true); // historyBack: 뒤로 돌아가기\r\n			return \"common/redirect\";\r\n		}\r\n		\r\n		// 작성자 본인 여부 체크\r\n		if (article.getMemberId() != memberId) {\r\n			request.setAttribute(\"alertMsg\", \"작성자만 삭제가 가능합니다.\");\r\n			request.setAttribute(\"historyBack\", true); // historyBack: 뒤로 돌아가기\r\n			return \"common/redirect\";\r\n		}\r\n		\r\n		// 게시물 삭제\r\n		articleService.articleDelete(id);\r\n\r\n		// 삭제 알림창 보여주고 리스트로 이동하기\r\n		request.setAttribute(\"alertMsg\", id + \"번 게시물이 삭제되었습니다.\");\r\n		request.setAttribute(\"replaceUrl\", String.format(\"list?boardId=%d\", article.getBoardId()));\r\n		return \"common/redirect\";\r\n\r\n	}\r\n\r\n\r\n```\r\n',6,1,0,0,0),(21,'2021-01-22 00:00:42','2021-04-24 15:28:21','P.JSP - 개발일지(회원가입 기능 추가(ajax통신으로 중복체크 ))','\r\n# 회원가입 기능 추가(ajax통신으로 중복체크 )\r\n - [x] 중복체크 미수행시 알림창\r\n - [x] 사용가능 메시지 + code 알림창\r\n - [x] 사용불가 메시지 + code  알림창\r\n   - [x] 중복일 경우 F-1\r\n   - [x] 공란일 경우 F-2\r\n<br>\r\n\r\n## 영상\r\n\r\n```youtube\r\nBmHl7y2W9Rw\r\n```\r\n<br>\r\n## 소스코드\r\n```java\r\n\r\n// 회원가입 폼 작성 시 ajax로 중복체크\r\npublic String getLoginIdDup(HttpServletRequest request, HttpServletResponse response) {\r\n		\r\n		Map<String, Object> rs = new HashMap<>();\r\n		\r\n		String loginId = request.getParameter(\"loginId\");\r\n		\r\n		Member member = memberService.getMemberByLoginId(loginId);\r\n		\r\n		String code = null;\r\n		String msg = null;\r\n		\r\n		\r\n		if(member == null) {\r\n			code = \"S-1\";   //S = success의 약자, 숫자는 유형 개념\r\n							//1이면 일반적인 성공, 2이면 약간 문제는 있지만 성공? 이런 방식\r\n			msg = \"해당 ID는 사용이 가능합니다.\";\r\n		}\r\n		if(member != null){\r\n			code = \"F-1\";\r\n			msg = \"해당 ID는 이미 사용중입니다.\";\r\n		}\r\n		if(loginId.trim().length() == 0){\r\n			code = \"F-2\";\r\n			msg = \"해당 ID는 사용이 불가능합니다.\";\r\n		}\r\n		\r\n		rs.put(\"loginId\", loginId);\r\n		rs.put(\"code\", code);\r\n		rs.put(\"msg\", msg);\r\n		\r\n		//rs 맵리스트를 json방식으로 생성해서 data로 보내기\r\n		request.setAttribute(\"data\", Util.getJsonText(rs));\r\n		\r\n		return \"common/pure\";\r\n	}\r\n\r\n\r\n```\r\n<br>\r\n## doJoinForm.jsp\r\n\r\n```html\r\n\r\n<script>\r\n	\r\n	//변수명과 함수명이 같으면 에러발생!!\r\n	let checkedDupId = \"\";\r\n	\r\n	\r\n	// 중복체크\r\n	function checkDupId(el){\r\n		//가장 근접한 \'form\'을 가져오기\r\n		//$(el).parent.parent.parent 방식으로 부모를 찾아도 됨\r\n		const form = $(el).closest(\'form\').get(0);\r\n		\r\n		const loginId = form.loginId.value;\r\n		\r\n		\r\n		//ajax 통신으로 보내고 데이터 받기\r\n		$.get(\r\n			\'getLoginIdDup\',  //요청할 주소\r\n			{		\r\n				//	loginId:loginId도 맞다\r\n				// 최신 JS에서는 이 방식이 가능함\r\n				loginId:loginId\r\n			},\r\n			function(data){\r\n				if( data.code.substring(0,2) == \"S-\"){\r\n					alert(data.msg + \" (\" + data.code + \")\");\r\n					checkedDupId = data.loginId;\r\n				\r\n				}\r\n				else{\r\n					alert(data.msg + \" (\" + data.code + \")\");\r\n				//	alert();\r\n				}\r\n			},			\r\n			\'json\'\r\n		\r\n		);\r\n		\r\n	};\r\n\r\n\r\n	\r\n	// 폼 공백 체크\r\n	function check(form) {\r\n	\r\n		if (form.loginId.value.trim().length == 0) {\r\n			alert(\"ID를 입력해주세요.\");\r\n			form.loginId.focus();\r\n			\r\n			return;\r\n		}\r\n		\r\n		if (form.loginId.value != checkedDupId) {\r\n			alert(\"먼저 ID 중복 검사를 해주세요.\");\r\n			form.dupIdCheck.focus();\r\n			\r\n			return false;\r\n		}\r\n		\r\n		if (form.loginPw.value.trim().length == 0) {\r\n			alert(\"PW를 입력해주세요.\");\r\n			form.loginPw.focus();\r\n			\r\n			return;\r\n		}\r\n		if (form.loginPw.value != form.loginPwConfirm.value) {\r\n			alert(\"PW가 일치하지 않습니다. PW를 확인해 주세요.\");\r\n			form.loginPwConfirm.focus();\r\n			\r\n			return;\r\n		}\r\n		\r\n		if (form.name.value.trim().length == 0) {\r\n			alert(\"이름을 입력해주세요.\");\r\n			form.name.focus();\r\n			\r\n			return;\r\n		}\r\n		if (form.nickname.value.trim().length == 0) {\r\n			alert(\"닉네임을 입력해주세요.\");\r\n			form.nickname.focus();\r\n			\r\n			return;\r\n		}\r\n		if (form.email.value.trim().length == 0) {\r\n			alert(\"e-mail을 입력해주세요.\");\r\n			form.email.focus();\r\n			\r\n			return;\r\n		}\r\n		if (form.cellPhoneNo.value.trim().length == 0) {\r\n			alert(\"연락처를 입력해주세요.\");\r\n			form.cellPhoneNo.focus();\r\n			\r\n			return;\r\n		}\r\n		\r\n		form.submit();\r\n	};\r\n</script>\r\n\r\n\r\n<form name=\"form\" onsubmit=\"check(this); return false;\" action=\"doJoin\" method=\"POST\">\r\n	<span>로그인 ID</span>\r\n	<br />\r\n	<input type=\"text\" name=\"loginId\" maxlength=\"50\" placeholder=\"ID 입력\">\r\n	<button name=\"dupIdCheck\" onclick=\"checkDupId(this);\" type = \"button\">중복체크</button>\r\n	<br />\r\n	<span>로그인 PW</span>\r\n	<br />\r\n	<input type=\"password\" name=\"loginPw\" maxlength=\"50\"\r\n		placeholder=\"PW 입력\">\r\n	<br />\r\n	<span>로그인 PW 확인</span>\r\n	<br />\r\n	<input type=\"password\" name=\"loginPwConfirm\" maxlength=\"50\"\r\n		placeholder=\"PW 입력\">\r\n	<br />\r\n	<span>이름</span>\r\n	<br />\r\n	<input type=\"text\" name=\"name\" maxlength=\"50\" placeholder=\"이름 입력\">\r\n	<br />\r\n	<span>닉네임</span>\r\n	<br />\r\n	<input type=\"text\" name=\"nickname\" maxlength=\"50\" placeholder=\"닉네임 입력\">\r\n	<br />\r\n	<span>E-Mail</span>\r\n	<br />\r\n	<input type=\"email\" name=\"email\" maxlength=\"100\"\r\n		placeholder=\"이메일 주소 입력\">\r\n	<br />\r\n	<span>연락처</span>\r\n	<br />\r\n	<input type=\"number\" name=\"cellPhoneNo\" maxlength=\"50\"\r\n		placeholder=\"연락처 입력\">\r\n	<br />\r\n	<hr />\r\n	<input type=\"submit\" value=\"회원가입\">\r\n	<button type=\"button\" onclick=\"history.back();\">뒤로가기</button>\r\n\r\n</form>\r\n\r\n\r\n```',6,1,0,0,0),(22,'2021-01-24 22:24:32','2021-04-24 15:28:21','P.BLOG - 개발일지(게시물별 html생성, 게시판 별 게시물리스트 페이지 생성)','# 소스코드: 게시물별 html파일 생성\r\n\r\n```java\r\npackage JDBCtest.service;\r\n\r\nimport java.io.File;\r\nimport java.util.List;\r\n\r\nimport JDBCtest.container.Container;\r\nimport JDBCtest.dto.Article;\r\nimport JDBCtest.dto.Board;\r\nimport JDBCtest.util.Util;\r\n\r\npublic class BuildService {\r\n\r\n	ArticleSerivice articleSerivice;\r\n	MemberService memberService;\r\n\r\n	public BuildService() {\r\n		articleSerivice = Container.articleSerivice;\r\n		memberService = Container.memberService;\r\n	}\r\n\r\n	public void buildSite() {\r\n		// site라는 폴더가 없을 경우 폴더 생성\r\n		File site = new File(\"site\");\r\n		File articleFolder = new File(\"site/article\");\r\n\r\n		if (site.exists() == false) {\r\n			site.mkdir();\r\n		}\r\n		if (articleFolder.exists() == false) {\r\n			articleFolder.mkdir();\r\n		}\r\n\r\n		String head = Util.getFileContents(\"site_template/part/head.html\");\r\n		String foot = Util.getFileContents(\"site_template/part/foot.html\");\r\n\r\n		// 각 게시판 별 게시물리스트 페이지 생성\r\n		List<Board> boards = articleSerivice.getBoards();\r\n\r\n		for (Board board : boards) {\r\n			String fileName = board.code + \"-list-1.html\";\r\n\r\n			String html = \"\";\r\n			int boardId = Container.session.selectedBoardId;\r\n\r\n			List<Article> articles = articleSerivice.getBoardArticlesForPrint(boardId);\r\n\r\n			for (Article article : articles) {\r\n				html += \"<tr>\";\r\n				html += \"<td>\" + article.id + \"</td>\";\r\n				html += \"<td>\" + article.regDate + \"</td>\";\r\n				html += \"<td><a href=\\\"\" + article.id + \".html\\\">\" + article.title + \"</a></td>\";\r\n				html += \"</tr>\";\r\n			}\r\n\r\n			html = head + html + foot;\r\n\r\n			Util.writeFileContents(\"site/article/\" + fileName, html);\r\n		}\r\n\r\n		// 게시물 별 파일 생성\r\n		List<Article> articles = articleSerivice.getArticlesForPrint();\r\n\r\n		for (Article article : articles) {\r\n			Board board = articleSerivice.getBoardById(article.boardId);\r\n\r\n			String fileName = \"article_\" + article.id + \".html\";\r\n			String html = \"<meta charset=\\\"UTF-8\\\">\";\r\n			html += \"<div>번호 : \" + article.id + \"</div>\";\r\n			html += \"<div>날짜 : \" + article.regDate + \"</div>\";\r\n			html += \"<div>작성자 : \" + article.extra_memberName + \"</div>\";\r\n			html += \"<div>제목 : \" + article.title + \"</div>\";\r\n			html += \"<div>내용 : \" + article.body + \"</div>\";\r\n			html += \"<div>게시판 : \" + board.name + \" 게시판\" + \"</div>\";\r\n\r\n			if (article.id > 1) {\r\n				html += \"<div><a href=\\\"article_\" + (article.id - 1) + \".html\\\">이전글</a></div>\";\r\n			}\r\n			if (article.id != (articles.size())) {\r\n				html += \"<div><a href=\\\"article_\" + (article.id + 1) + \".html\\\">다음글</a></div>\";\r\n			}\r\n\r\n			html = head + html + foot;\r\n\r\n			Util.writeFileContents(\"site/article/\" + article.id + \".html\", html);\r\n		}\r\n	}\r\n\r\n}\r\n\r\n```\r\n<br>\r\n# 소스코드: 각 게시판 별 게시물리스트 페이지 생성\r\n```java\r\n\r\npackage JDBCtest.service;\r\n\r\nimport java.io.File;\r\nimport java.util.List;\r\n\r\nimport JDBCtest.container.Container;\r\nimport JDBCtest.dto.Article;\r\nimport JDBCtest.dto.Board;\r\nimport JDBCtest.util.Util;\r\n\r\npublic class BuildService {\r\n\r\n	ArticleSerivice articleSerivice;\r\n	MemberService memberService;\r\n\r\n	public BuildService() {\r\n		articleSerivice = Container.articleSerivice;\r\n		memberService = Container.memberService;\r\n	}\r\n\r\n	public void buildSite() {\r\n		// site라는 폴더가 없을 경우 폴더 생성\r\n		File site = new File(\"site\");\r\n		File articleFolder = new File(\"site/article\");\r\n\r\n		if (site.exists() == false) {\r\n			site.mkdir();\r\n		}\r\n		if (articleFolder.exists() == false) {\r\n			articleFolder.mkdir();\r\n		}\r\n\r\n		String head = Util.getFileContents(\"site_template/part/head.html\");\r\n		String foot = Util.getFileContents(\"site_template/part/foot.html\");\r\n\r\n		// 각 게시판 별 게시물리스트 페이지 생성\r\n		List<Board> boards = articleSerivice.getBoards();\r\n\r\n		for (Board board : boards) {\r\n			String fileName = board.code + \"-list-1.html\";\r\n\r\n			String html = \"\";\r\n			int boardId = Container.session.selectedBoardId;\r\n\r\n			String template = Util.getFileContents(\"site_template/article/list.html\");\r\n			\r\n			List<Article> articles = articleSerivice.getBoardArticlesForPrint(boardId);\r\n\r\n			for (Article article : articles) {\r\n				html += \"<tr>\";\r\n				html += \"<td>\" + article.id + \"</td>\";\r\n				html += \"<td>\" + article.regDate + \"</td>\";\r\n				html += \"<td><a href=\\\"\" + article.id + \".html\\\">\" + article.title + \"</a></td>\";\r\n				html += \"</tr>\";\r\n			}\r\n\r\n			html = template.replace(\"${TR}\", html);\r\n			\r\n			html = head + html + foot;\r\n\r\n			Util.writeFileContents(\"site/article/\" + fileName, html);\r\n		}\r\n\r\n		// 게시물 별 파일 생성\r\n		List<Article> articles = articleSerivice.getArticlesForPrint();\r\n\r\n		for (Article article : articles) {\r\n			Board board = articleSerivice.getBoardById(article.boardId);\r\n\r\n	//		String fileName = \"article_\" + article.id + \".html\";\r\n			String html = \"<meta charset=\\\"UTF-8\\\">\";\r\n			html += \"<div>번호 : \" + article.id + \"</div>\";\r\n			html += \"<div>날짜 : \" + article.regDate + \"</div>\";\r\n			html += \"<div>작성자 : \" + article.extra_memberName + \"</div>\";\r\n			html += \"<div>제목 : \" + article.title + \"</div>\";\r\n			html += \"<div>내용 : \" + article.body + \"</div>\";\r\n			html += \"<div>게시판 : \" + board.name + \" 게시판\" + \"</div>\";\r\n\r\n			if (article.id > 1) {\r\n				html += \"<div><a href=\\\"article_\" + (article.id - 1) + \".html\\\">이전글</a></div>\";\r\n			}\r\n			if (article.id != (articles.size())) {\r\n				html += \"<div><a href=\\\"article_\" + (article.id + 1) + \".html\\\">다음글</a></div>\";\r\n			}\r\n\r\n			html = head + html + foot;\r\n\r\n			Util.writeFileContents(\"site/article/\" + article.id + \".html\", html);\r\n		}\r\n	}\r\n\r\n}\r\n\r\n```',5,1,0,0,0),(23,'2021-01-24 23:06:54','2021-04-24 15:28:22','P.JSP - 개발일지(회원정보 페이지 정보별 수정기능 구현, 템플릿 적용)','\r\n# 회원정보 페이지 정보별 수정기능 구현, 템플릿 적용\r\n- [x] 각 정보별 개별 수정\r\n - [x] 각 정보별 개별 수정 폼 노출\r\n- [x] 취소 버튼\r\n - [x] 각 정보별 개별 수정 폼 사라짐\r\n- [x] 공란 체크\r\n- [x] 중복체크(ajax)\r\n  - [x] 중복아닐 경우 S-1\r\n  - [x] 중복일 경우 F-1\r\n  - [x] 공란일 경우 F-2\r\n<br>\r\n\r\n## 영상\r\n\r\n```youtube\r\nZmO_NBaKOqc\r\n```\r\n<br>\r\n## 소스코드\r\n```java\r\n\r\n// 회원 정보 수정\r\n	public String doModifyInfo(HttpServletRequest request, HttpServletResponse response) {\r\n		int id = Integer.parseInt(request.getParameter(\"id\"));\r\n\r\n		String loginId = request.getParameter(\"loginId\");\r\n		String name = request.getParameter(\"name\");\r\n		String nickname = request.getParameter(\"nickname\");\r\n		String email = request.getParameter(\"email\");\r\n		String cellphoneNo = request.getParameter(\"cellphoneNo\");\r\n\r\n		Member member = memberService.getMemberById(id);\r\n\r\n		if (loginId == null) {\r\n			loginId = member.getLoginId();\r\n		}\r\n		if (name == null) {\r\n			name = member.getName();\r\n		}\r\n		if (nickname == null) {\r\n			nickname = member.getNickname();\r\n		}\r\n		if (email == null) {\r\n			email = member.getEmail();\r\n		}\r\n		if (cellphoneNo == null) {\r\n			cellphoneNo = member.getCellphoneNo();\r\n		}\r\n\r\n		memberService.doModifyMemberName(id, loginId, name, nickname, email, cellphoneNo);\r\n\r\n		request.setAttribute(\"alertMsg\", \"수정되었습니다.\");\r\n		request.setAttribute(\"replaceUrl\", \"../member/showMyPage\");\r\n		return \"common/redirect\";\r\n	}\r\n\r\n\r\n```\r\n<br>\r\n## showMyPage.jsp\r\n\r\n```html\r\n\r\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\r\n	pageEncoding=\"UTF-8\"%>\r\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>\r\n\r\n<c:set var=\"pageTitle\" value=\"MyPage\"/>\r\n<%@ include file=\"../../part/head.jspf\" %>\r\n	\r\n	<script>\r\n\r\n	//아이디 중복체크\r\n	let checkedDupId = \"\";\r\n\r\n	function checkDupId(el){\r\n		const form = $(el).closest(\'form\').get(0);\r\n		\r\n		const loginId = form.loginId.value;\r\n\r\n		$.get(\r\n			\'getLoginIdDup\',  \r\n			{		\r\n				loginId:loginId\r\n			},\r\n			function(data){\r\n				if( data.code.substring(0,2) == \"S-\"){\r\n					alert(data.msg + \" (\" + data.code + \")\");\r\n					checkedDupId = data.loginId;\r\n				}\r\n				else{\r\n					alert(data.msg + \" (\" + data.code + \")\");\r\n				//	alert();\r\n				}\r\n			},			\r\n			\'json\'\r\n		);\r\n	};\r\n	\r\n\r\n	\r\n	// 닉네임 중복체크\r\n	let checkedDupNick = \"\";\r\n\r\n	function checkDupNick(el){\r\n		const form = $(el).closest(\'form\').get(0);\r\n		const nickname = form.nickname.value;\r\n\r\n		$.get(\r\n			\'getNicknameDup\',  //요청할 주소\r\n			{		\r\n				nickname:nickname\r\n			},\r\n			function(data){\r\n				if( data.code.substring(0,2) == \"S-\"){\r\n					alert(data.msg + \" (\" + data.code + \")\");\r\n					checkedDupNick = data.nickname;\r\n				}\r\n				else{\r\n					alert(data.msg + \" (\" + data.code + \")\");\r\n				}\r\n			},			\r\n			\'json\'\r\n		);	\r\n	};\r\n\r\n\r\n	// 아이디 폼 공백 체크\r\n	function check0(form) {\r\n		\r\n		if (form0.loginId.value.trim().length == 0) {\r\n			alert(\"ID를 입력해주세요.\");\r\n			form0.loginId.focus();\r\n			\r\n			return;\r\n		}\r\n		\r\n		if (form0.loginId.value != checkedDupId) {\r\n			alert(\"먼저 ID 중복체크를 해주세요.\");\r\n			form0.dupIdCheck.focus();\r\n			\r\n			return false;\r\n		}\r\n\r\n		form0.submit();\r\n	};\r\n\r\n	\r\n	// 이름 폼 공백 체크\r\n	function check1(form) {\r\n		\r\n		if (form1.name.value.trim().length == 0) {\r\n			alert(\"이름을 입력해주세요.\");\r\n			form1.name.focus();\r\n			\r\n			return;\r\n		}\r\n\r\n		form1.submit();\r\n	};\r\n\r\n	// 닉네임 폼 공백 체크\r\n	function check2(form) {\r\n		if (form2.nickname.value.trim().length == 0) {\r\n			alert(\"닉네임을 입력해주세요.\");\r\n			form2.nickname.focus();\r\n			\r\n			return false;\r\n		}\r\n		if (form2.nickname.value != checkedDupNick) {\r\n			alert(\"먼저 중복체크를 해주세요.\");\r\n			form2.dupNickCheck.focus();\r\n			\r\n			return false;\r\n		}\r\n		\r\n		form2.submit();\r\n	};\r\n	\r\n	\r\n	// 이메일 폼 공백 체크\r\n	function check3(form) {		\r\n		if (form3.email.value.trim().length == 0) {\r\n			alert(\"e-mail을 입력해주세요.\");\r\n			form3.email.focus();\r\n			\r\n			return;\r\n		}\r\n\r\n		form3.submit();\r\n	};\r\n	\r\n	// 연락처 폼 공백 체크\r\n	function check4(form) {\r\n		\r\n		if (form4.cellphoneNo.value.trim().length == 0) {\r\n			alert(\"연락처를 입력해주세요.\");\r\n			form4.cellphoneNo.focus();\r\n			\r\n			return;\r\n		}\r\n		\r\n		form4.submit();\r\n	};\r\n</script>\r\n	\r\n  <!-- 메인 컨텐츠 박스 시작 -->\r\n  <main class=\"main-box flex-grow-1\">\r\n    <section class=\"main-box-section con\">\r\n      <!-- 메인-회원정보 페이지 시작 -->\r\n      <div class=\"section-MyPage min-height-50vh flex flex-jc-c flex-ai-c\">\r\n        <div class=\"section-MyPage-body\">\r\n          <div class=\"MyPage_cell__title\">\r\n            <span>회원번호</span>\r\n          </div>\r\n          <div class=\"MyPage_cell__body\">\r\n            <span>${loginedMember.id}</span>\r\n          </div>\r\n          <div class=\"MyPage_cell__title\">\r\n            <span>회원ID</span>\r\n            <button class =\"infoModifyBtn0\" type = \"button\">수정</button>\r\n          </div>\r\n          <div class=\"MyPage_cell__body\">\r\n            <span class=\"oldLoginIdInfo\">${loginedMember.loginId}</span>\r\n		<form class=\"newLoginIdInfo\" name=\"form0\" onsubmit=\"check0(this); return false;\" action=\"doModifyInfo\" method=\"POST\">\r\n		   <input type=\"hidden\" name=\"id\" value=\"${loginedMember.id}\">\r\n           <input type=\"text\" name=\"loginId\" placeholder=\"${loginedMember.loginId}\">\r\n           <button name=\"dupIdCheck\" onclick=\"checkDupId(this);\" type = \"button\">중복체크</button>\r\n           <input type=\"submit\" onclick=\"if(confirm(\'정말 변경하시겠습니까?\') == false) {return false;}\" value=\"변경\">\r\n           <button class =\"cleModifyBtn0\" type=\"button\">취소</button>\r\n        </form>\r\n          </div>\r\n          <div class=\"MyPage_cell__title\">\r\n            <span>회원이름</span>\r\n            <button class =\"infoModifyBtn1\" type = \"button\">수정</button>\r\n          </div>\r\n          <div class=MyPage_cell__body>\r\n            <span class=\"oldNameInfo\">${loginedMember.name}</span>\r\n            <form class=\"newNameInfo\" name=\"form1\" onsubmit=\"check1(this); return false;\" action=\"doModifyInfo\" method=\"POST\">\r\n		   <input type=\"hidden\" name=\"id\" value=\"${loginedMember.id}\">\r\n           <input type=\"text\" name=\"name\" placeholder=\"${loginedMember.name}\">\r\n           <input type=\"submit\" onclick=\"if(confirm(\'정말 변경하시겠습니까?\') == false) {return false;}\" value=\"변경\">\r\n           <button class =\"cleModifyBtn1\" type=\"button\">취소</button>\r\n        </form>\r\n          </div>\r\n          <div class=MyPage_cell__title>\r\n            <span>닉네임</span>\r\n            <button class =\"infoModifyBtn2\" type = \"button\">수정</button>\r\n          </div>\r\n          <div class=MyPage_cell__body>\r\n            <span class=\"oldNicknameInfo\">${loginedMember.nickname}</span>\r\n            <form class=\"newNicknameInfo\" name=\"form2\" onsubmit=\"check2(this); return false;\" action=\"doModifyInfo\" method=\"POST\">\r\n			<input type=\"hidden\" name=\"id\" value=\"${loginedMember.id}\">\r\n			<input type=\"text\" name=\"nickname\" placeholder=\"${loginedMember.nickname}\">\r\n			<button name=\"dupNickCheck\" onclick=\"checkDupNick(this);\" type = \"button\">중복체크</button>\r\n			<input type=\"submit\" onclick=\"if(confirm(\'정말 변경하시겠습니까?\') == false) {return false;}\"  value=\"변경\">\r\n              <button class =\"cleModifyBtn2\" type=\"button\">취소</button>\r\n        </form>\r\n          </div>\r\n          <div class=MyPage_cell__title>\r\n            <span>e-Mail</span>\r\n            <button class =\"infoModifyBtn3\" type = \"button\">수정</button>\r\n          </div>\r\n          <div class=MyPage_cell__body>\r\n            <span class=\"oldEmailInfo\">${loginedMember.email}</span>\r\n            <form class=\"newEmailInfo\" name=\"form3\" onsubmit=\"check3(this); return false;\" action=\"doModifyInfo\" method=\"POST\">\r\n		   <input type=\"hidden\" name=\"id\" value=\"${loginedMember.id}\">\r\n           <input type=\"email\" name=\"email\" placeholder=\"${loginedMember.email}\">\r\n           <input type=\"submit\" onclick=\"if(confirm(\'정말 변경하시겠습니까?\') == false) {return false;}\" value=\"변경\">\r\n              <button class =\"cleModifyBtn3\" type=\"button\">취소</button>\r\n        </form>\r\n          </div>\r\n          <div class=MyPage_cell__title>\r\n            <span>연락처</span>\r\n            <button class =\"infoModifyBtn4\" type = \"button\">수정</button>\r\n          </div>\r\n          <div class=MyPage_cell__body>\r\n            <span class=\"oldPhoneInfo\">${loginedMember.cellphoneNo}</span>\r\n            <form class=\"newPhoneInfo\" name=\"form4\" onsubmit=\"check4(this); return false;\" action=\"doModifyInfo\" method=\"POST\">\r\n		   <input type=\"hidden\" name=\"id\" value=\"${loginedMember.id}\">\r\n           <input type=\"number\" name=\"cellphoneNo\" placeholder=\"${loginedMember.cellphoneNo}\">\r\n           <input type=\"submit\" onclick=\"if(confirm(\'정말 변경하시겠습니까?\') == false) {return false;}\" value=\"변경\">\r\n              <button class =\"cleModifyBtn4\" type=\"button\">취소</button>\r\n        </form>\r\n          </div>\r\n          <div class=MyPage_cell__title>\r\n            <span>회원등급</span>\r\n          </div>\r\n          <div class=MyPage_cell__body>\r\n            <span>${loginedMember.authLevel}</span>\r\n          </div>\r\n          <div class=MyPage_cell__title>\r\n            <span>회원가입일</span>\r\n          </div>\r\n          <div class=MyPage_cell__body>\r\n            <span>${loginedMember.regDate}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!-- 메인-회원가입 페이지 끝 -->\r\n    </section>\r\n  </main>\r\n  <!-- 메인 컨텐츠 박스 끝 -->\r\n<%@ include file=\"../../part/foot.jspf\" %>\r\n\r\n```',6,1,0,0,0),(24,'2021-01-24 23:07:18','2021-04-24 15:28:22','P.JSP - 개발일지(회원가입시 축하메일 발송 기능 추가)','\r\n# 회원가입시 축하메일 발송 기능 추가\r\n- [x] 회원가입 시 자동발송\r\n<br>\r\n\r\n## 영상\r\n\r\n```youtube\r\nvWfaKVilc04\r\n```\r\n<br>\r\n## 소스코드\r\n```java\r\n\r\n// 회원가입\r\n	public String doJoin(HttpServletRequest request, HttpServletResponse response) {\r\n\r\n		String loginId = request.getParameter(\"loginId\");\r\n		String loginPw = request.getParameter(\"loginPw\");\r\n		String name = request.getParameter(\"name\");\r\n		String nickname = request.getParameter(\"nickname\");\r\n		String email = request.getParameter(\"email\");\r\n		String cellPhoneNo = request.getParameter(\"cellPhoneNo\");\r\n\r\n		List<Member> members = memberService.getMemberListForPrint();\r\n\r\n		// 해당 loginId가 사용가능한지 중복확인\r\n		for (int i = 0; i < members.size(); i++) {\r\n			if (members.get(i).getLoginId().equals(loginId) == true) {\r\n				request.setAttribute(\"alertMsg\", \"해당 아이디는 이미 사용중인 아이디입니다.\");\r\n				request.setAttribute(\"historyBack\", true); // historyBack: 뒤로 돌아가기\r\n				return \"common/redirect\";\r\n			}\r\n		}\r\n\r\n		// 해당 nickname이 사용가능한지 중복확인\r\n		for (int i = 0; i < members.size(); i++) {\r\n			if (members.get(i).getNickname().equals(nickname) == true) {\r\n				request.setAttribute(\"alertMsg\", \"해당 닉네임는 이미 사용중인 닉네임입니다.\");\r\n				request.setAttribute(\"historyBack\", true); // historyBack: 뒤로 돌아가기\r\n				return \"common/redirect\";\r\n			}\r\n		}\r\n\r\n		Map<String, Object> joinArg = new HashMap<>();\r\n		joinArg.put(\"loginId\", loginId);\r\n		joinArg.put(\"loginPw\", loginPw);\r\n		joinArg.put(\"name\", name);\r\n		joinArg.put(\"nickname\", nickname);\r\n		joinArg.put(\"email\", email);\r\n		joinArg.put(\"cellPhoneNo\", cellPhoneNo);\r\n\r\n		// 신규 회원가입\r\n		int id = memberService.join(joinArg);\r\n\r\n		// 생성 알림창 보여주고 회원정보로 이동하기\r\n		request.setAttribute(\"alertMsg\", id + \"번 회원님 반갑습니다.\");\r\n\r\n		Member member = memberService.getMemberById(id);\r\n\r\n		request.setAttribute(\"member\", member);\r\n\r\n		// 회원가입시 축하메일 발송\r\n		EmailService emailService = Container.emailService;\r\n\r\n		emailService.send(email, nickname + \"님, 회원가입을 축하드립니다.\", nickname + \"님, 회원가입을 축하드립니다.\");\r\n\r\n		return \"usr/member/doJoin\";\r\n\r\n	}\r\n\r\n\r\n```\r\n\r\n<br>\r\n## Util.java\r\n\r\n```java\r\n\r\n//메일 보내는 유틸\r\n	public static int sendMail(String smtpServerId, String smtpServerPw, String from, String fromName, String to, String title, String body) {\r\n		Properties prop = System.getProperties();\r\n		prop.put(\"mail.smtp.starttls.enable\", \"true\");\r\n		prop.put(\"mail.smtp.host\", \"smtp.gmail.com\");\r\n		prop.put(\"mail.smtp.auth\", \"true\");\r\n		prop.put(\"mail.smtp.port\", \"587\");\r\n\r\n		Authenticator auth = new MailAuth(smtpServerId, smtpServerPw);\r\n\r\n		Session session = Session.getDefaultInstance(prop, auth);\r\n\r\n		MimeMessage msg = new MimeMessage(session);\r\n\r\n		try {\r\n			msg.setSentDate(new Date());\r\n\r\n			msg.setFrom(new InternetAddress(from, fromName));\r\n			msg.setRecipient(Message.RecipientType.TO, new InternetAddress(to));\r\n			msg.setSubject(title, \"UTF-8\");\r\n			msg.setContent(body, \"text/html; charset=UTF-8\");\r\n\r\n			Transport.send(msg);\r\n\r\n		} catch (AddressException ae) {\r\n			System.out.println(\"AddressException : \" + ae.getMessage());\r\n			return -1;\r\n		} catch (MessagingException me) {\r\n			System.out.println(\"MessagingException : \" + me.getMessage());\r\n			return -2;\r\n		} catch (UnsupportedEncodingException e) {\r\n			System.out.println(\"UnsupportedEncodingException : \" + e.getMessage());\r\n			return -3;\r\n		}\r\n\r\n		return 1;\r\n	}\r\n\r\n\r\n```',6,1,0,0,0),(25,'2021-01-28 22:12:17','2021-04-24 15:28:22','P.JSP - 개발일지(아이디, 비번찾기 기능 + 암호 해시화)','\r\n# 아이디 찾기, 비번 찾기 기능 구현\r\n\r\n- [x] 로그인창에서 버튼 노출\r\n- [x] 이름 또는 이메일 틀릴시 알림창 노출\r\n- [x] 아이디찾기\r\n- [x] 비번찾기 시 임시비번 생성 및 메일 자동 발송\r\n   - [x] 메일에서 로그인 바로가기\r\n   - [x] 임시비번으로 회원정보 자동 수정\r\n   - [x] 임시비번으로 로그인 가능\r\n\r\n+회원가입 시 암호 해시화\r\n- [x] 회원가입시 해시화\r\n- [x] 로그인시 일반 암호로 로그인 가능\r\n<br>\r\n\r\n## 영상\r\n\r\n```youtube\r\nHSkghuwxh9c\r\n```\r\n<br>\r\n## 주요소스코드\r\n```java\r\n\r\n// 아이디 찾기\r\n	public String doFindLoginId(HttpServletRequest request, HttpServletResponse response) {\r\n		String name = request.getParameter(\"name\");\r\n		String email = request.getParameter(\"email\");\r\n\r\n		Member member = memberService.getMemberByNameAndEmail(name, email);\r\n\r\n		// 해당 이름과 이메일주소를 가진 회원이 존재하는지 확인\r\n		if (member == null) {\r\n			request.setAttribute(\"alertMsg\", \"일치하는 회원이 존재하지 않습니다.\");\r\n			request.setAttribute(\"historyBack\", true); // historyBack: 뒤로 돌아가기\r\n			return \"common/redirect\";\r\n		}\r\n\r\n		// 로그인아이디 알림창 보여주고 로그인화면으로 이동\r\n		request.setAttribute(\"alertMsg\", name + \"회원님의 아이디는 \\\"\" + member.getLoginId() + \"\\\"입니다.\");\r\n		request.setAttribute(\"replaceUrl\", \"../member/doLoginForm\");\r\n		return \"common/redirect\";\r\n	}\r\n\r\n	// 비밀번호 찾기 폼\r\n	public String doFindLoginPwForm(HttpServletRequest request, HttpServletResponse response) {\r\n		return \"usr/member/doFindLoginPwForm\";\r\n	}\r\n\r\n	// 비밀번호 찾기\r\n	public String doFindLoginPw(HttpServletRequest request, HttpServletResponse response) {\r\n		String loginId = request.getParameter(\"loginId\");\r\n		String email = request.getParameter(\"email\");\r\n\r\n		Member member = memberService.getMemberByLoginId(loginId);\r\n\r\n		// 해당 loginId가 등록된 id인지 확인\r\n		if (member == null) {\r\n			request.setAttribute(\"alertMsg\", \"일치하는 회원이 존재하지 않습니다.\");\r\n			request.setAttribute(\"historyBack\", true); // historyBack: 뒤로 돌아가기\r\n			return \"common/redirect\";\r\n		}\r\n\r\n		// 해당 email이 일치하는지 확인\r\n		if (member.getEmail().equals(email) == false) {\r\n			request.setAttribute(\"alertMsg\", \"이메일주소가 일치하지 않습니다.\");\r\n			request.setAttribute(\"historyBack\", true); // historyBack: 뒤로 돌아가기\r\n			return \"common/redirect\";\r\n		}\r\n\r\n		// 임시 비밀번호 생성 후 회원 email로 발송\r\n		// memberService.sendTempLoginPwToEmail(member);\r\n\r\n		// 임시 비밀번호 생성 후 회원 email로 발송(개선)\r\n		/*\r\n		 * //ResultData 객체 도입으로 삭제 Map<String, Object> sendTempLoginPwToEmailRs =\r\n		 * memberService.sendTempLoginPwToEmail(member);\r\n		 * \r\n		 * String resultCode = (String) sendTempLoginPwToEmailRs.get(\"resultCode\");\r\n		 * String resultMsg = (String) sendTempLoginPwToEmailRs.get(\"resultMsg\");\r\n		 */\r\n\r\n		// 임시 비밀번호 생성 후 회원 email로 발송(개선)\r\n		ResultData sendTempLoginPwToEmailRs = memberService.sendTempLoginPwToEmail(member);\r\n\r\n		/// 만약 메일 발송 실패인 경우\r\n		// if(resultCode.contains(\"F\")) {\r\n		if (sendTempLoginPwToEmailRs.isFail()) {\r\n			request.setAttribute(\"alertMsg\", sendTempLoginPwToEmailRs.getMsg());\r\n			request.setAttribute(\"historyBack\", true);\r\n			return \"common/redirect\";\r\n		}\r\n\r\n		// 임시패스워드 발급 알림창 보여주고 메인화면으로 이동\r\n		request.setAttribute(\"alertMsg\", sendTempLoginPwToEmailRs.getMsg());\r\n		request.setAttribute(\"replaceUrl\", \"../home/main\");\r\n		return \"common/redirect\";\r\n	}\r\n\r\n\r\n```\r\n\r\n\r\n<br>\r\n## MemberService.java\r\n\r\n```java\r\n\r\npublic ResultData sendTempLoginPwToEmail(Member actor) {\r\n		// 메일의 제목과 내용 생성\r\n		String siteName = App.getSite();\r\n		String siteLoginUrl = App.getLoginUrl();\r\n		String title = \"[\" + siteName + \"]\" + actor.getName() + \" 회원님, 임시 패스워드 발급\";\r\n		String tempPassword = Util.getTempPassword(6);\r\n		String body = \"<h1>임시 패스워드 : \" + tempPassword + \"</h1>\";\r\n		body += \"<a href=\\\"\" + siteLoginUrl + \"\\\" target=\\\"_blank\\\">로그인하러 가기</a>\";\r\n\r\n		// 메일 발송(결과를 알 수 없음)\r\n		// emailService.send(actor.getEmail(), title, body);\r\n\r\n		// 메일 발송 결과를 int값으로 받음(개선)\r\n		int sendRs = emailService.send(actor.getEmail(), title, body);\r\n\r\n		//Map<String, Object> rs = new HashMap<>();\r\n\r\n		/*  //ResultData객체 도입으로 삭제\r\n		 * if (sendRs == 1) { // 발송 성공인 경우 rs.put(\"resultCode\", \"S-1\");\r\n		 * rs.put(\"resultMsg\", \"회원님의 임시 비밀번호가 \\\"\" + actor.getEmail() + \"\\\"로 발송되었습니다.\");\r\n		 * \r\n		 * // 회원의 패스워드를 방금 생성한 임시 패스워드로 변경 setTempPassword(actor, tempPassword); } else\r\n		 * { // 발송 실패인 경우 rs.put(\"resultCode\", \"F-1\"); rs.put(\"resultMsg\",\r\n		 * \"메일 발송에 실패했습니다.\");\r\n		 * \r\n		 * }\r\n		 * \r\n		 * \r\n		 * return rs;\r\n		 */\r\n\r\n		\r\n		if(sendRs != 1) {\r\n			return new ResultData(\"F-1\", \"메일 발송에 실패했습니다.\");\r\n		}\r\n		\r\n		setTempPassword(actor, tempPassword);\r\n		String resultMsg = \"회원님의 임시 비밀번호가 \\\"\" + actor.getEmail() + \"\\\"로 발송되었습니다.\";\r\n		return new ResultData(\"S-1\", resultMsg, \"email\", actor.getEmail());\r\n		\r\n	}\r\n\r\n	private void setTempPassword(Member actor, String tempPassword) {\r\n		Map<String, Object> modifyArg = new HashMap<>();\r\n		modifyArg.put(\"id\", actor.getId());\r\n		modifyArg.put(\"loginPw\", Util.sha256(tempPassword));\r\n\r\n	//	attrService.setValue(\"member__\" + actor.getId() + \"__extra__isUsingTempPassword\", \"1\", null);\r\n		\r\n		modify(modifyArg);\r\n	}\r\n\r\n	public void modify(Map<String, Object> modifyArg) {\r\n		memberDao.modify(modifyArg);\r\n\r\n	}\r\n    \r\n ```',6,1,0,0,0),(26,'2021-01-28 22:12:29','2021-04-24 15:28:22','P.JSP - 개발일지(게시물 검색, 리스팅, 페이징)','\r\n# 게시물 검색기능 구현\r\n\r\n- [x] 총 게시물 수 노출\r\n- [x] 제목+내용,제목,내용으로 분류 검색 가능\r\n- [x] 검색 안했을 경우 전체 게시물 리스팅, 페이징\r\n- [x] 검색어 입력 없을 시  알림창\r\n- [x] 검색된 게시물만 리스팅\r\n\r\n\r\n# 게시물 리스트 페이징\r\n- [x] 한 페이지 당 10개씩만 리스팅\r\n- [x] 하단에 페이지 버튼 생성\r\n  - [x] 선택된 페이지 버튼만 빨간표시\r\n  - [x] 첫 페이지 또는 마지막 페이지일 경우\r\n        이전, 다음 버튼 안나오게\r\n  - [x] 검색시 검색된 게시물들만 페이징\r\n     - [x] 검색된 리스트 유지된채로 페이지 이동 가능\r\n\r\n\r\n+글쓰기 버튼 노츨\r\n- [x] 로그인시에만 노출\r\n<br>\r\n\r\n## 영상\r\n\r\n```youtube\r\nnNJP01vAASI\r\n```\r\n<br>\r\n## 주요소스코드\r\n```java\r\n\r\n// 리스트 가져오기\r\n	public String showList(HttpServletRequest request, HttpServletResponse response) {\r\n\r\n		int boardId = Integer.parseInt(request.getParameter(\"boardId\"));\r\n\r\n		String searchKeywordType = request.getParameter(\"searchKeywordType\");\r\n		String searchKeyword = request.getParameter(\"searchKeyword\");\r\n\r\n		// 총 게시물 수 카운트\r\n		int totalCount = articleService.getArticlesCountByBoardId(boardId, searchKeywordType, searchKeyword);\r\n\r\n		// 페이징\r\n		int articlesInAPage = 10; // 한 페이지에 들어갈 article 수 설정\r\n		int page = Util.getAsInt(request.getParameter(\"page\"), 1); // pageNum이 null이면 1로 변환, 정수형(int)이 아니면 정수형으로\r\n																	// 변환\r\n		int pageLimitStartIndex = (page - 1) * articlesInAPage;\r\n\r\n		List<Article> articles = articleService.getArticlesForPrintByBoardId(boardId, pageLimitStartIndex,\r\n				articlesInAPage, searchKeywordType, searchKeyword);\r\n\r\n		int pageMenuBoxSize = 5; // 한 메인페이지 화면에 나올 하단 페이지 메뉴 버튼 수 ex) 1 2 3 4 5 6 7 8 9 10\r\n		int totalArticlesCount = totalCount; // 전체 article의 수 카운팅\r\n		int totalPages = (int) Math.ceil((double) totalArticlesCount / articlesInAPage); // 총 필요 페이지 수 카운팅\r\n\r\n		// 총 필요 페이지 수까지 버튼 만들기\r\n		// 하단 페이지 이동 버튼 메뉴 만들기\r\n		// 1. pageMenuBox내 시작 번호, 끝 번호 설정\r\n\r\n		int previousPageNumCount = (page - 1) / pageMenuBoxSize; // 현재 페이지가 2이면 previousPageNumCount = 1/5\r\n		int boxStartNum = pageMenuBoxSize * previousPageNumCount + 1; // 총 페이지 수 30이면 1~5 6~10 11~15\r\n		int boxEndNum = pageMenuBoxSize + boxStartNum - 1;\r\n\r\n		if (boxEndNum > totalPages) {\r\n			boxEndNum = totalPages;\r\n		}\r\n\r\n		// 2. \'이전\',\'다음\' 버튼 페이지 계산\r\n		int boxStartNumBeforePage = boxStartNum - 1;\r\n		if (boxStartNumBeforePage < 1) {\r\n			boxStartNumBeforePage = 1;\r\n		}\r\n		int boxEndNumAfterPage = boxEndNum + 1;\r\n		if (boxEndNumAfterPage > totalPages) {\r\n			boxEndNumAfterPage = totalPages;\r\n		}\r\n\r\n		// 3. \'이전\',\'다음\' 버튼 필요 유무 판별\r\n		boolean boxStartNumBeforePageBtnNeedToShow = boxStartNumBeforePage != boxStartNum;\r\n		boolean boxEndNumAfterPageBtnNeedToShow = boxEndNumAfterPage != boxEndNum;\r\n\r\n		// 만약, 해당 게시판 번호의 게시판이 없으면 알림 메시지와 뒤로 돌아가기 실시\r\n\r\n		if (articles.size() <= 0) {\r\n			request.setAttribute(\"alertMsg\", \"해당 키워드가 포함된 게시물이 존재하지 않습니다.\");\r\n			request.setAttribute(\"historyBack\", true); // historyBack: 뒤로 돌아가기\r\n			return \"common/redirect\";\r\n\r\n		}\r\n\r\n		request.setAttribute(\"totalCount\", totalCount);\r\n		request.setAttribute(\"articles\", articles);\r\n		request.setAttribute(\"totalCount\", totalCount);\r\n		request.setAttribute(\"page\", page);\r\n\r\n		request.setAttribute(\"boxStartNum\", boxStartNum);\r\n		request.setAttribute(\"boxEndNum\", boxEndNum);\r\n		request.setAttribute(\"boxStartNumBeforePage\", boxStartNumBeforePage);\r\n		request.setAttribute(\"boxEndNumAfterPage\", boxEndNumAfterPage);\r\n		request.setAttribute(\"boxStartNumBeforePageBtnNeedToShow\", boxStartNumBeforePageBtnNeedToShow);\r\n		request.setAttribute(\"boxEndNumAfterPageBtnNeedToShow\", boxEndNumAfterPageBtnNeedToShow);\r\n		\r\n		return \"usr/article/list\";\r\n	}\r\n\r\n\r\n```\r\n\r\n\r\n<br>\r\n## ArticleDao.java\r\n\r\n```java\r\n\r\npublic List<Article> getArticlesForPrintByBoardId(int boardId, int pageLimitStartIndex, int articlesInAPage, String searchKeywordType, String searchKeyword) {\r\n		List<Article> articles = new ArrayList<>();\r\n\r\n		SecSql sql = new SecSql();\r\n		sql.append(\"SELECT A.*\");\r\n		sql.append(\", M.name AS extra_memberName\");\r\n		sql.append(\", M.nickname AS extra_memberNickname\");\r\n		sql.append(\", B.name AS extra_boardName\");\r\n		sql.append(\", B.code AS extra_boardCode\");\r\n		sql.append(\"FROM article AS A\");\r\n		sql.append(\"INNER JOIN `member` AS M\");\r\n		sql.append(\"ON A.memberId = M.id\");\r\n		sql.append(\"INNER JOIN `board` AS B\");\r\n		sql.append(\"ON A.boardId = B.id\");\r\n		sql.append(\"WHERE 1\");\r\n\r\n		if (boardId != 0) {\r\n			sql.append(\"AND A.boardId = ?\", boardId);\r\n		};\r\n\r\n		if (searchKeyword != null) {\r\n			if (searchKeywordType == null || searchKeywordType.equals(\"title\")) {\r\n				sql.append(\"AND A.title LIKE CONCAT(\'%\', ? \'%\')\", searchKeyword);\r\n			} else if (searchKeywordType.equals(\"body\")) {\r\n				sql.append(\"AND A.body LIKE CONCAT(\'%\', ? \'%\')\", searchKeyword);\r\n			} else if (searchKeywordType.equals(\"titleAndBody\")) {\r\n				sql.append(\"AND (A.title LIKE CONCAT(\'%\', ? \'%\') OR A.body LIKE CONCAT(\'%\', ? \'%\'))\", searchKeyword, searchKeyword);\r\n			}\r\n		};\r\n		\r\n		sql.append(\"ORDER BY A.id DESC\");\r\n		\r\n		if ( articlesInAPage != -1 ) {\r\n			sql.append(\"LIMIT ?, ?\", pageLimitStartIndex, articlesInAPage);\r\n		}\r\n\r\n		List<Map<String, Object>> articlesMapList = MysqlUtil.selectRows(sql);\r\n\r\n		for (Map<String, Object> articlesMap : articlesMapList) {\r\n			Article article = new Article(articlesMap);\r\n\r\n			articles.add(article);\r\n\r\n		}\r\n		// Collections.reverse(articles);\r\n		return articles;\r\n	}\r\n\r\n```',6,1,0,0,0),(27,'2021-02-04 17:45:12','2021-04-24 15:28:23','10강. startsWith()과 endsWith()','# startsWith()\r\n**startsWith()** 함수는 **대상 문자열이 특정 문자 또는 문자열로 시작하는지 체크하는 함수**이다.\r\n\r\n- 해당 문자열로 시작되는지 여부를 확인하고 boolean 에 맞춰 true/false 값을 리턴한다.\r\n <br>\r\n\r\n```java\r\n\r\npublic class StartsWithTest{\r\n\r\n    \r\n\r\n    public static void main(String[] args){\r\n\r\n        String startsWithT = \"자바 코딩 테스트 \";\r\n\r\n        System.out.println( startsWithT.startsWith(\"자바\") );  // true\r\n\r\n        System.out.println( startsWithT.startsWith(\"자바 \") );// true\r\n\r\n        System.out.println( startsWithT.startsWith(\"자\") );// true\r\n\r\n        System.out.println( startsWithT.startsWith(\" 자\") );// false\r\n\r\n \r\n\r\n    }\r\n\r\n}\r\n\r\n```\r\n<br>\r\n위와 같이 특정 문자 또는 문자열로 시작하는지 체크하는 함수이기 때문에 \"자 / 자바\" 를 사용해도 true가 반환되는 것을 확인할 수 있다.\r\n<br>\r\n 단, **공백도 취급**하기 때문에 확인을 하면서 사용해야 한다.\r\n<br>\r\n<br>\r\n\r\n# endsWith()\r\n**endsWith()** 함수는 **대상 문자열이 특정 문자 또는 문자열로 끝나는지 체크**하는 함수이다.\r\n\r\n- 해당 문자열로 끝나는 여부를 확인하고 boolean 에 맞춰 true/false 값을 리턴한다.\r\n\r\n \r\n```java\r\n\r\npublic class EndsWithTest{\r\n\r\n    \r\n\r\n    public static void main(String[] args){\r\n\r\n        String endsWithT = \"자바 코딩 테스트 \";\r\n\r\n        System.out.println( endsWithT.endsWith(\"테스트\") );  // false\r\n\r\n        System.out.println( endsWithT.endsWith(\"테스트 \") );// true\r\n\r\n        System.out.println( endsWithT.endsWith(\"트 \") );// true\r\n\r\n        System.out.println( endsWithT.endsWith(\" 테\") );// false\r\n\r\n \r\n\r\n    }\r\n\r\n}\r\n\r\n```\r\n<br>\r\n위와 같이 특정 문자 또는 문자열로 끝나는지 체크하는 함수이기 때문에 \"트 / 테스트 \" 를 사용해도 true가 반환되는 것을 확인할 수 있다.\r\n<br>\r\n단, startsWith() 함수와 마찬가지로 **공백도 취급**하기 때문에 확인을 하면서 사용해야 한다.\r\n(예시로 쓴것처럼 테스트로 분명 끝나는데 false가 나오는 이유는 테스트 다음에 공백이 있기 때문이다.)\r\n<br>\r\n<br>\r\n(참조: mine-it-record.tistory.com/128)',2,1,1,0,0),(28,'2021-02-04 18:12:06','2021-04-24 15:28:23','11강. split()','# split()\r\n\r\n**split()** 함수는 문장을 쪼개주는 역할을 하는 함수이다.\r\n<br>\r\n사용법은 다음과 같다.\r\n<br>\r\n```\r\n<사용법>\r\n\r\n    문자열변수.split(구분자)[인덱스];\r\n\r\n```\r\n<br>\r\n대상이 되는 **문자열 변수**에 **split**를 입력하고 괄호안에는 문자열을 쪼개는 기준이 될 **구분자**를 입력한다. \r\n마지막으로 []안에 그 문자열의 **인덱스 값** 즉, 쪼개진 문자열의 번호를 입력하면 해당 번호에 해당하는 문자열을 구할 수 있다.\r\n<br>\r\n아래 예시를 통해 사용법을 살펴보도록 하자\r\n\r\n## <예시>\r\n```java\r\n\r\n/* 예시1(공백을 기준으로 쪼개기) */\r\nString str1 = \"가 나 다 라 마 바 사\";\r\n\r\nString rs1 = str1.split(\" \")[0];\r\n\r\nSystem.out.println(rs1);\r\n\r\n// 출력결과 => 가\r\n		\r\n		\r\n		\r\n/* 예시2( / 을 기준으로 쪼개기) */\r\nString str2 = \"가/나/다/라/마/바/사\";\r\n\r\nString rs2 = str2.split(\"/\")[1];\r\n\r\nSystem.out.println(rs2);\r\n		\r\n// 출력결과 => 나\r\n\r\n		\r\n		\r\n/* 예시3( _ 을 기준으로 쪼개기) */\r\nString str3 = \"가_나_다_라마바사\";\r\n\r\nString rs3 = str3.split(\"_\")[3];\r\n\r\nSystem.out.println(rs3);\r\n		\r\n// 출력결과 => 라마바사\r\n\r\n```\r\n\r\n예시와 같이  ()안에 들어가 있는 구분자을 기준으로 문장을 쪼갠다.\r\n\r\n사용법은 어렵지 않지만 유용하게 사용할 수 있는 함수이므로 학습해 두도록 하자.\r\n\r\n',2,1,0,0,0),(29,'2021-02-04 18:22:03','2021-04-24 15:28:23','12강. 날짜비교(feat.SimpleDateFormat, Calendar, Date 그리고 compareTo())','# 날짜비교\r\n\r\n**SimpleDateFormat**, **Calendar**, **Date**유틸들과 **compareTo()** 함수를 이용해 날짜를 비교해서 기간만료 여부를 확인하는 방법이다.\r\n<br>\r\n알아두면 유용하게 활용할 수 있으니 학습해두도록 하자.\r\n<br>\r\n```java\r\n\r\npackage zCodeTest;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\n\r\npublic class App {\r\n\r\n	public void goTest() {\r\n		\r\n		// 날짜 포멧 셋팅\r\n		// 날짜 형식 셋팅\r\n		SimpleDateFormat sdf = new SimpleDateFormat(\"yyMMdd\");\r\n\r\n		Calendar cal = Calendar.getInstance();\r\n\r\n		//오늘 날짜\r\n		Date date = new Date();\r\n		\r\n		//오늘 날짜로 셋팅\r\n		cal.setTime(date);\r\n		\r\n		// 오늘 날짜에 기간을 더한다\r\n		cal.add(cal.DATE, 0);  //0 자리에 원하는 숫자(기간)를 입력\r\n		\r\n		// cal에 셋팅한 값을 지정한 형식으로 가져온다\r\n		String endDate = sdf.format(cal.getTime());\r\n\r\n		System.out.println(\"endDate : \" + endDate);\r\n		\r\n		\r\n		\r\n		//오늘 날짜로 셋팅\r\n		Calendar cal2 = Calendar.getInstance();\r\n		\r\n		\r\n		cal2.setTime(date);\r\n		\r\n		String todayDate = sdf.format(cal2.getTime());\r\n		\r\n		System.out.println(\"todayDate : \" + todayDate);\r\n\r\n		int compare = todayDate.compareTo(endDate);\r\n		\r\n		if(compare >= 0) {\r\n			System.out.println(\"기간이 만료되었습니다.\");\r\n		}\r\n		else if(compare < 0) {\r\n			System.out.println(\"기간이 남았습니다.\");\r\n		}\r\n		\r\n	}\r\n\r\n}\r\n\r\n\r\n```',2,1,1,0,0),(30,'2021-02-04 18:29:09','2021-04-24 15:28:23','P.BLOG - 개발일지(게시판 페이징 1,2 성공, 게시판 별 게시물 이전글,다음글 진행중)','# 소스코드: 게시판 페이징 1,2 성공, 게시판 별 게시물 이전글,다음글 진행중\r\n\r\n```java\r\n\r\npackage JDBCtest.service;\r\n\r\nimport java.io.File;\r\nimport java.util.List;\r\n\r\nimport JDBCtest.container.Container;\r\nimport JDBCtest.dto.Article;\r\nimport JDBCtest.dto.Board;\r\nimport JDBCtest.util.Util;\r\n\r\npublic class BuildService {\r\n\r\n	ArticleSerivice articleSerivice;\r\n	MemberService memberService;\r\n\r\n	public BuildService() {\r\n		articleSerivice = Container.articleSerivice;\r\n		memberService = Container.memberService;\r\n	}\r\n\r\n	public void buildSite() {\r\n		// site라는 폴더가 없을 경우 폴더 생성\r\n		File site = new File(\"site\");\r\n		File articleFolder = new File(\"site/article\");\r\n\r\n		if (site.exists() == false) {\r\n			site.mkdir();\r\n		}\r\n		if (articleFolder.exists() == false) {\r\n			articleFolder.mkdir();\r\n		}\r\n\r\n		String head = Util.getFileContents(\"site_template/part/head.html\");\r\n		String foot = Util.getFileContents(\"site_template/part/foot.html\");\r\n		\r\n		\r\n		// 각 게시판 별 게시물리스트 페이지 생성\r\n		List<Board> boards = articleSerivice.getBoards();\r\n\r\n		String fileName = \"\";\r\n		for (Board board : boards) {\r\n\r\n			int listNo = 1;\r\n			String html = \"\";\r\n			\r\n\r\n			String template = Util.getFileContents(\"site_template/article/list.html\");\r\n\r\n			List<Article> articles = articleSerivice.getBoardArticlesByCodeForPrint(board.code);\r\n\r\n	\r\n			//5개씩 페이징\r\n			int articlesInAPage = 5;\r\n			int startPoint = articles.size() - 1;\r\n			startPoint -= (listNo - 1) * articlesInAPage;\r\n			int endPoint = startPoint - (articlesInAPage - 1);\r\n\r\n			\r\n			if (startPoint < 0) {\r\n				return;\r\n			}\r\n			if (endPoint < 0) {\r\n				endPoint = 0;\r\n			}\r\n			for (int i = startPoint; i >= endPoint; i--) {\r\n				html += \"<tr>\";\r\n				html += \"<td>\" + articles.get(i).id + \"</td>\";\r\n				html += \"<td>\" + articles.get(i).regDate + \"</td>\";\r\n				html += \"<td><a href=\\\"\" + articles.get(i).id + \".html\\\">\" + articles.get(i).title + \"</a></td>\";\r\n				html += \"<td><a href=\\\"\" + articles.get(i).id + \".html\\\">\" + articles.get(i).extra_memberName + \"</a></td>\";\r\n				html += \"</tr>\";\r\n			}\r\n\r\n			fileName = board.code + \"-list-\" + listNo + \".html\";\r\n			\r\n			html = template.replace(\"${TR}\", html);\r\n			if (listNo > 1) {\r\n				html += \"<div><a href=\\\"\" + board.code + \"-list-\" + (listNo-1) + \".html\\\">이전페이지</a></div>\";\r\n			}\r\n			if (listNo < 2) {\r\n				html += \"<div><a href=\\\"\" + board.code + \"-list-\" + (listNo+1) + \".html\\\">다음페이지</a></div>\";\r\n			}\r\n			\r\n			html = head + html + foot;\r\n\r\n			Util.writeFileContents(\"site/article/\" + fileName, html);\r\n			\r\n			listNo++;\r\n			\r\n			//다음 5개씩 페이징\r\n			startPoint -= (listNo - 1) * articlesInAPage;\r\n			endPoint = startPoint - (articlesInAPage - 1);\r\n\r\n			\r\n			if (startPoint < 0) {\r\n				return;\r\n			}\r\n			if (endPoint < 0) {\r\n				endPoint = 0;\r\n			}\r\n			String html2 = \"\";\r\n			for (int i = startPoint; i >= endPoint; i--) {\r\n				html2 += \"<tr>\";\r\n				html2 += \"<td>\" + articles.get(i).id + \"</td>\";\r\n				html2 += \"<td>\" + articles.get(i).regDate + \"</td>\";\r\n				html2 += \"<td><a href=\\\"\" + articles.get(i).id + \".html\\\">\" + articles.get(i).title + \"</a></td>\";\r\n				html2 += \"<td><a href=\\\"\" + articles.get(i).id + \".html\\\">\" + articles.get(i).extra_memberName + \"</a></td>\";\r\n				html2 += \"</tr>\";\r\n			}\r\n\r\n			fileName = board.code + \"-list-\" + listNo + \".html\";\r\n\r\n			html2 = template.replace(\"${TR}\", html2);\r\n			\r\n			if (listNo > 1) {\r\n				html2 += \"<div><a href=\\\"\" + board.code + \"-list-\" + (listNo-1) + \".html\\\">이전페이지</a></div>\";\r\n			}\r\n			if (listNo < 2) {\r\n				html2 += \"<div><a href=\\\"\" + board.code + \"-list-\" + (listNo+1) + \".html\\\">다음페이지</a></div>\";\r\n			}\r\n			\r\n			html2 = head + html2 + foot;\r\n			\r\n			Util.writeFileContents(\"site/article/\" + fileName, html2);\r\n			\r\n		}\r\n		\r\n\r\n		// 게시물 별 파일 생성\r\n		\r\n		for(Board board : boards) {\r\n			List<Article> articles = articleSerivice.getBoardArticlesByCodeForPrint(board.code);\r\n			int articlesSize = articles.size();\r\n			int x = 0;\r\n			int beforeArticleId = articles.get(x).id; \r\n		for (Article article : articles) {\r\n//			Board board = articleSerivice.getBoardById(article.boardId);\r\n			\r\n			// String fileName = \"article_\" + article.id + \".html\";\r\n			String html = \"<meta charset=\\\"UTF-8\\\">\";\r\n			html += \"<div>번호 : \" + article.id + \"</div>\";  //4\r\n			html += \"<div>날짜 : \" + article.regDate + \"</div>\";\r\n			html += \"<div>작성자 : \" + article.extra_memberName + \"</div>\";\r\n			html += \"<div>제목 : \" + article.title + \"</div>\";\r\n			html += \"<div>내용 : \" + article.body + \"</div>\";\r\n			html += \"<div>게시판 : \" + board.name + \" 게시판\" + \"</div>\";\r\n\r\n			\r\n			\r\n			if (article.id > beforeArticleId) {\r\n				html += \"<div><a href=\\\"\" + articles.get(beforeArticleId-1).id + \".html\\\">이전글</a></div>\";\r\n			}\r\n			if (article.id < articlesSize) {\r\n				html += \"<div><a href=\\\"\" + articles.get(beforeArticleId+1).id + \".html\\\">다음글</a></div>\";\r\n			}\r\n\r\n			html = head + html + foot;\r\n\r\n			Util.writeFileContents(\"site/article/\" + article.id + \".html\", html);\r\n			x++;\r\n			beforeArticleId = articles.get(x).id;\r\n		}\r\n		}\r\n	}\r\n\r\n}\r\n\r\n\r\n```',5,1,0,0,0),(31,'2021-02-04 18:30:07','2021-04-24 15:28:24','P.BLOG - 개발일지(타이블바 콘텐츠 반환 함수 만들어서 전체 페이지 생성에 적용)','# 소스코드: 타이블바 콘텐츠 반환 함수 만들어서 전체 페이지 생성에 적용\r\n\r\n```java\r\n\r\npackage com.sbs.example.mysqlTextBoard.service;\r\n\r\nimport java.util.List;\r\n\r\nimport com.sbs.example.mysqlTextBoard.container.Container;\r\nimport com.sbs.example.mysqlTextBoard.dto.Article;\r\nimport com.sbs.example.mysqlTextBoard.dto.Board;\r\nimport com.sbs.example.mysqlTextBoard.util.Util;\r\n\r\npublic class BuildService {\r\n	ArticleService articleService;\r\n\r\n	public BuildService() {\r\n		articleService = Container.articleService;\r\n\r\n	}\r\n\r\n	public void builSite() {\r\n		System.out.println(\"= site 폴더 생성 =\");\r\n\r\n		Util.rmdir(\"site\"); // 기존 site 폴더 삭제\r\n		Util.mkdir(\"site\"); // 신규 site 폴더 생성\r\n\r\n		// site_template에 있는 app.css(원본)를 복사해 site폴더 생성시 그 안에 복사본 붙여넣기\r\n		Util.copy(\"site_template/app.css\", \"site/app.css\");\r\n\r\n		buildIndexPage(); // 함수로 정리\r\n		buildArticleDetailPages(); // 함수로 정리\r\n	}\r\n\r\n	private void buildIndexPage() {\r\n		StringBuilder html = new StringBuilder();\r\n\r\n		String head = getHeadHtml(\"index\");\r\n		String foot = Util.getFileContents(\"site_template/foot.html\");\r\n\r\n		String mainHtml = Util.getFileContents(\"site_template/index.html\");\r\n\r\n		html.append(head);\r\n		html.append(mainHtml);\r\n		html.append(foot);\r\n\r\n		String fileName = \"index.html\";\r\n		String path = \"site/\" + fileName;\r\n\r\n		Util.writeFile(path, html.toString());\r\n	}\r\n\r\n	// 게시물 상세페이지 생성\r\n	private void buildArticleDetailPages() {\r\n		List<Article> articles = articleService.getArticlesForPrint();\r\n\r\n		String head = getHeadHtml(\"article_detail\");\r\n		String foot = Util.getFileContents(\"site_template/foot.html\"); // foot.html 가져오기\r\n\r\n		System.out.println(\"= article 상세페이지 생성 =\");\r\n		int articleIndex = 0;\r\n		for (Article article : articles) {\r\n			StringBuilder html = new StringBuilder();\r\n\r\n			// 게시물 1개당 1개의 html 작성\r\n\r\n			// head.html을 따로 생성해 위쪽에 붙임\r\n			html.append(head);\r\n\r\n			html.append(\"<div>\");\r\n			html.append(\"번호 : \" + article.id + \"<br>\");\r\n			html.append(\"작성일 : \" + article.regDate + \"<br>\");\r\n			html.append(\"수정일 : \" + article.updateDate + \"<br>\");\r\n			html.append(\"제목 : \" + article.title + \"<br>\");\r\n			html.append(\"작성자 : \" + article.extra_memberName + \"<br>\");\r\n			html.append(\"내용 : \" + article.body + \"<br>\");\r\n			if (articleIndex > 0) {\r\n				html.append(\"<a href=\\\"\" + (article.id - 1) + \".html\" + \"\\\">이전글</a><br>\");\r\n			}\r\n			if (articleIndex < articles.size() - 1) {\r\n				html.append(\"<a href=\\\"\" + (article.id + 1) + \".html\" + \"\\\">다음글</a><br>\");\r\n			}\r\n			html.append(\"</div>\");\r\n\r\n			// head.html과 마찬가지로 foot.html을 따로 생성해 아래쪽에 붙임\r\n			html.append(foot);\r\n\r\n			String fileName = article.id + \".html\";\r\n			String path = \"site/\" + fileName;\r\n\r\n			Util.writeFile(path, html.toString());\r\n\r\n			System.out.println(path + \" 생성\");\r\n			articleIndex++;\r\n\r\n		}\r\n		System.out.println(\"= article 상세페이지 생성 종료 =\");\r\n\r\n	}\r\n\r\n	// head.html 가져오기\r\n	private String getHeadHtml(String pageName) {\r\n		List<Board> boards = articleService.getBoards();\r\n\r\n		String head = Util.getFileContents(\"site_template/head.html\"); // head.html 가져오기\r\n		StringBuilder boardMenuContentHtml = new StringBuilder();\r\n\r\n		for (Board board : boards) {\r\n			boardMenuContentHtml.append(\"<li>\");\r\n\r\n			String link = board.code + \"-list-1.html\";\r\n\r\n			boardMenuContentHtml.append(\"<a href=\\\"\" + link + \"\\\" class=\\\"block\\\">\");\r\n\r\n			boardMenuContentHtml.append(getTitleBarContentByPageName(\"article_list_\" + board.code));\r\n\r\n			/*\r\n			 * String iClass = \"fas fa-clipboard-list\"; // defult 아이콘\r\n			 * \r\n			 * if (board.code.contains(\"notice\")) { // 공지사항 게시판 아이콘 iClass =\r\n			 * \"fas fa-exclamation\"; } else if (board.code.contains(\"free\")) { // 자유 게시판 아이콘\r\n			 * iClass = \"fas fa-users\"; }\r\n			 * \r\n			 * boardMenuContentHtml.append(\"<i class=\\\"\" + iClass + \"\\\"></i>\");\r\n			 * boardMenuContentHtml.append(\" <span>\" + board.name + \"</span>\");\r\n			 */\r\n			boardMenuContentHtml.append(\"</a>\");\r\n\r\n			boardMenuContentHtml.append(\"</li>\");\r\n\r\n		}\r\n\r\n		head = head.replace(\"[게시판 이름 블록]\", boardMenuContentHtml.toString());\r\n\r\n		String titleBarContentHtml = getTitleBarContentByPageName(pageName);\r\n		// 입력받은 pageName에 맞는 타이틀바 컨텐츠를 리턴\r\n\r\n		head = head.replace(\"[타이틀바 컨텐츠]\", titleBarContentHtml);\r\n\r\n		return head;\r\n	}\r\n\r\n	private String getTitleBarContentByPageName(String pageName) {\r\n		if (pageName.equals(\"index\")) {\r\n			return \"<i class=\\\"fas fa-home\\\"></i> <span>HOME</span>\";\r\n		}\r\n		else if (pageName.equals(\"article_detail\")) {\r\n			return \"<i class=\\\"fas fa-file-invoice\\\"></i> <span>ARTICLE DETAIL</span>\";\r\n		}\r\n		else if (pageName.startsWith(\"article_list_notice\")) {\r\n			return \"<i class=\\\"fas fa-exclamation\\\"></i> <span>NOTICE LIST</span>\";\r\n		} else if (pageName.startsWith(\"article_list_free\")) {\r\n			return \"<i class=\\\"fas fa-users\\\"></i> <span>FREE LIST</span>\";\r\n		} else if (pageName.startsWith(\"article_list_\")) {\r\n			return \"<i class=\\\"fas fa-clipboard-list\\\"></i> <span>ARTICLE LIST</span>\";\r\n		}\r\n		return \"\";\r\n	}\r\n\r\n}\r\n\r\n```',5,1,0,0,0),(32,'2021-02-17 21:29:22','2021-04-24 15:28:24','P.BLOG - 개발일지(게시판 리스트,상세보기 템플릿 적용, 게시판 별 게시물 상세보기 페이지 이전글, 다음글 추가)','# 소스코드: 게시판 리스트,상세보기 템플릿 적용, 게시판 별 게시물 상세보기 페이지 이전글, 다음글 추가\r\n\r\n```java\r\n\r\npackage com.sbs.example.mysqlTextBoard.service;\r\n\r\nimport java.util.List;\r\n\r\nimport com.sbs.example.mysqlTextBoard.container.Container;\r\nimport com.sbs.example.mysqlTextBoard.dto.Article;\r\nimport com.sbs.example.mysqlTextBoard.dto.Board;\r\nimport com.sbs.example.mysqlTextBoard.util.Util;\r\n\r\npublic class BuildService {\r\n	ArticleService articleService;\r\n\r\n	public BuildService() {\r\n		articleService = Container.articleService;\r\n\r\n	}\r\n\r\n	public void builSite() {\r\n		System.out.println(\"= site 폴더 생성 =\");\r\n\r\n		Util.rmdir(\"site\"); // 기존 site 폴더 삭제\r\n		Util.mkdir(\"site\"); // 신규 site 폴더 생성\r\n\r\n		// site_template에 있는 app.css(원본)를 복사해 site폴더 생성시 그 안에 복사본 붙여넣기\r\n		Util.copy(\"site_template/app.css\", \"site/app.css\");\r\n\r\n		buildIndexPage(); // 함수로 정리\r\n		buildArticleListPages();\r\n		buildArticleDetailPages();\r\n\r\n	}\r\n\r\n	// 각 게시판 별 게시물리스트 페이지 생성\r\n	private void buildArticleListPages() {\r\n\r\n		System.out.println(\"= article 리스트 페이지 생성 =\");\r\n\r\n		String foot = Util.getFileContents(\"site_template/foot.html\");\r\n\r\n		List<Board> boards = articleService.getBoards();\r\n\r\n		for (Board board : boards) {\r\n			String head = getHeadHtml(\"article_list_\" + board.code);\r\n			String fileName = board.code + \"-list-1.html\";\r\n\r\n			String html = \"\";\r\n\r\n			List<Article> articles = articleService.getBoardArticlesByCodeForPrint(board.code);\r\n\r\n			String template = Util.getFileContents(\"site_template/list.html\");\r\n\r\n			for (Article article : articles) {\r\n\r\n				html += \"<div>\";\r\n				html += \"<div class=\\\"article-list__cell-id\\\">\" + article.id + \"</div>\";\r\n				html += \"<div class=\\\"article-list__cell-reg-date\\\">\" + article.regDate + \"</div>\";\r\n				html += \"<div class=\\\"article-list__cell-writer\\\">\" + article.extra_memberName + \"</a></div>\";\r\n				html += \"<div class=\\\"article-list__cell-title\\\"><a href=\\\"\" + article.id\r\n						+ \".html\\\" class=\\\"hover-underline\\\">\" + article.title + \"</a></div>\";\r\n				html += \"</div>\";\r\n			}\r\n\r\n			html = template.replace(\"[게시물 리스트 블록]\", html);\r\n\r\n			html = head + html + foot;\r\n\r\n			Util.writeFile(\"site/\" + fileName, html);\r\n		}\r\n\r\n		System.out.println(\"= article 리스트 페이지 생성 종료 =\");\r\n	}\r\n\r\n	private void buildIndexPage() {\r\n		StringBuilder html = new StringBuilder();\r\n\r\n		String head = getHeadHtml(\"index\");\r\n		String foot = Util.getFileContents(\"site_template/foot.html\");\r\n\r\n		String mainHtml = Util.getFileContents(\"site_template/index.html\");\r\n\r\n		html.append(head);\r\n		html.append(mainHtml);\r\n		html.append(foot);\r\n\r\n		String fileName = \"index.html\";\r\n		String path = \"site/\" + fileName;\r\n\r\n		Util.writeFile(path, html.toString());\r\n	}\r\n\r\n	// 게시판 별 게시물 상세페이지 생성\r\n	private void buildArticleDetailPages() {\r\n		List<Board> boards = articleService.getBoards();\r\n\r\n		for (Board board : boards) {\r\n			List<Article> articles = articleService.getBoardArticlesByCodeForPrint(board.code);\r\n			int articlesSize = articles.size();\r\n			if(articlesSize <= 0) {\r\n				break;\r\n			}\r\n			int beforeArticleIndex = 0;\r\n			int x = beforeArticleIndex;\r\n			int beforeArticleId = articles.get(x).id;\r\n\r\n			String head = getHeadHtml(\"article_detail\");\r\n			String foot = Util.getFileContents(\"site_template/foot.html\");\r\n\r\n			String template = Util.getFileContents(\"site_template/detail.html\");\r\n\r\n			System.out.println(\"= article 상세페이지 생성 =\");\r\n\r\n			for (Article article : articles) {\r\n\r\n				StringBuilder html = new StringBuilder();\r\n\r\n				html.append(head);\r\n\r\n				String html2 = \"\";\r\n\r\n				html2 += \"<div class=\\\"article-detail-cell__id\\\">\";\r\n				html2 += \"<div>\";\r\n				html2 += \"<span>번호 : </span><span>\" + article.id + \"</span>\";\r\n				html2 += \"</div>\";\r\n				html2 += \"</div>\";\r\n				html2 += \"<div class=\\\"article-detail-cell__title\\\">\";\r\n				html2 += \"<div>\";\r\n				html2 += \"<span>제목 : </span><span>\" + article.title + \"</span>\";\r\n				html2 += \"</div>\";\r\n				html2 += \"</div>\";\r\n				html2 += \"<div class=\\\"article-detail-cell__title\\\">\";\r\n				html2 += \"<div>\";\r\n				html2 += \"<span>작성자 : </span><span>\" + article.extra_memberName + \"</span>\";\r\n				html2 += \"</div>\";\r\n				html2 += \"</div>\";\r\n				html2 += \"<div class=\\\"article-detail-cell__title\\\">\";\r\n				html2 += \"<div>\";\r\n				html2 += \"<span>작성일 : </span><span>\" + article.regDate + \"</span>\";\r\n				html2 += \"</div>\";\r\n				html2 += \"</div><br>\";\r\n				html2 += \"<div class=\\\"article-detail-cell__body height-70p \\\">\";\r\n				html2 += \"<div>\";\r\n				html2 += \"<span>\" + article.body + \"</span>\";\r\n				html2 += \"</div>\";\r\n				html2 += \"</div><br><br>\";\r\n\r\n				html2 += \"</div></section><section class=\\\"section-3 con-min-width\\\"><div class=\\\"con\\\"><div class=\\\"article-list-bottom-cell flex flex-jc-c\\\">\";\r\n\r\n				if (article.id > beforeArticleId) {\r\n					html2 += \"<div class=\\\"./\\\"><a href=\\\"\" + articles.get(x - 1).id + \".html\"\r\n							+ \"\\\" class=\\\"hover-underline\\\">&lt 이전글</a></div>\";\r\n				}\r\n\r\n				html2 += \"<div class=\\\"./\\\"><i class=\\\"fas fa-th-list\\\"></i><a href=\\\"\" + board.code + \"-list-1.html\"\r\n						+ \"\\\" class=\\\"hover-underline\\\"> 목록 </a></div>\";\r\n				if (x < articlesSize - 1) {\r\n					html2 += \"<div class=\\\"./\\\"><a href=\\\"\" + articles.get(x + 1).id + \".html\"\r\n							+ \"\\\"class=\\\"hover-underline\\\">다음글 &gt</a></div>\";\r\n				}\r\n\r\n				html2 = template.replace(\"[상세페이지 블록]\", html2);\r\n\r\n				html.append(html2);\r\n				html.append(foot);\r\n\r\n				String fileName = article.id + \".html\";\r\n				String path = \"site/\" + fileName;\r\n\r\n				Util.writeFile(path, html.toString());\r\n\r\n				System.out.println(path + \" 생성\");\r\n				x++;\r\n				beforeArticleId = articles.get(x - 1).id;\r\n\r\n			}\r\n			System.out.println(\"= article 상세페이지 생성 종료 =\");\r\n\r\n		}\r\n	}\r\n\r\n	// head.html 가져오기\r\n	private String getHeadHtml(String pageName) {\r\n		List<Board> boards = articleService.getBoards();\r\n\r\n		String head = Util.getFileContents(\"site_template/head.html\"); // head.html 가져오기\r\n		StringBuilder boardMenuContentHtml = new StringBuilder();\r\n\r\n		for (Board board : boards) {\r\n			boardMenuContentHtml.append(\"<li>\");\r\n\r\n			String link = board.code + \"-list-1.html\";\r\n\r\n			boardMenuContentHtml.append(\"<a href=\\\"\" + link + \"\\\" class=\\\"block\\\">\");\r\n\r\n			boardMenuContentHtml.append(getTitleBarContentByPageName(\"article_list_\" + board.code));\r\n\r\n			boardMenuContentHtml.append(\"</a>\");\r\n\r\n			boardMenuContentHtml.append(\"</li>\");\r\n\r\n		}\r\n\r\n		head = head.replace(\"[게시판 이름 블록]\", boardMenuContentHtml.toString());\r\n\r\n		String titleBarContentHtml = getTitleBarContentByPageName(pageName);\r\n		// 입력받은 pageName에 맞는 타이틀바 컨텐츠를 리턴\r\n\r\n		head = head.replace(\"[타이틀바 컨텐츠]\", titleBarContentHtml);\r\n\r\n		return head;\r\n	}\r\n\r\n	private String getTitleBarContentByPageName(String pageName) {\r\n		if (pageName.equals(\"index\")) {\r\n			return \"<i class=\\\"fas fa-home\\\"></i> <span>HOME</span>\";\r\n		} else if (pageName.equals(\"article_detail\")) {\r\n			return \"<i class=\\\"fas fa-file-invoice\\\"></i> <span>ARTICLE DETAIL</span>\";\r\n		} else if (pageName.startsWith(\"article_list_notice\")) {\r\n			return \"<i class=\\\"fas fa-exclamation\\\"></i> <span>NOTICE LIST</span>\";\r\n		} else if (pageName.startsWith(\"article_list_free\")) {\r\n			return \"<i class=\\\"fas fa-users\\\"></i> <span>FREE LIST</span>\";\r\n		} else if (pageName.startsWith(\"article_list_\")) {\r\n			return \"<i class=\\\"fas fa-clipboard-list\\\"></i> <span>ARTICLE LIST</span>\";\r\n		}\r\n		return \"\";\r\n	}\r\n\r\n}\r\n\r\n```',5,1,0,0,0),(33,'2021-02-17 21:32:15','2021-04-24 15:28:24','P.BLOG - 개발일지(게시판 리스트 페이징 구현, index링크 연결, 디자인 일부 수정 등)','# 소스코드: 게시판 리스트 페이징 구현, index링크 연결, 디자인 일부 수정 등\r\n\r\n```java\r\n\r\npackage com.sbs.example.mysqlTextBoard.service;\r\n\r\nimport java.util.List;\r\n\r\nimport com.sbs.example.mysqlTextBoard.container.Container;\r\nimport com.sbs.example.mysqlTextBoard.dto.Article;\r\nimport com.sbs.example.mysqlTextBoard.dto.Board;\r\nimport com.sbs.example.mysqlTextBoard.util.Util;\r\n\r\npublic class BuildService {\r\n	ArticleService articleService;\r\n\r\n	public BuildService() {\r\n		articleService = Container.articleService;\r\n\r\n	}\r\n\r\n	public void builSite() {\r\n		System.out.println(\"= site 폴더 생성 =\");\r\n\r\n		Util.rmdir(\"site\"); // 기존 site 폴더 삭제\r\n		Util.mkdir(\"site\"); // 신규 site 폴더 생성\r\n\r\n		// site_template에 있는 app.css(원본)를 복사해 site폴더 생성시 그 안에 복사본 붙여넣기\r\n		Util.copy(\"site_template/app.css\", \"site/app.css\");\r\n\r\n		buildIndexPage(); // 인덱스 페이지 생성\r\n		buildArticleListPages(); // 각 게시판 별 게시물리스트 페이지 생성\r\n		buildArticleDetailPages(); // 게시판 별 게시물 상세페이지 생성\r\n\r\n	}\r\n\r\n	// 각 게시판 별 게시물리스트 페이지 생성\r\n	private void buildArticleListPages() {\r\n\r\n		System.out.println(\"= article 리스트 페이지 생성 =\");\r\n\r\n		List<Board> boards = articleService.getBoards();\r\n\r\n		for (Board board : boards) {\r\n\r\n			List<Article> articles = articleService.getBoardArticlesByCodeForPrint(board.code);\r\n\r\n			int articlesInAPage = 10; // 한 페이지에 들어갈 article 수 설정\r\n			int pageMenuBoxSize = 5; // 한 메인페이지 화면에 나올 하단 페이지 메뉴 버튼 수 ex) 1 2 3 4 5 6 7 8 9 10\r\n			int totalArticlesCount = articles.size(); // 전체 article의 수 카운팅\r\n			int totalPages = (int) Math.ceil((double) totalArticlesCount / articlesInAPage); // 총 필요 페이지 수 카운팅\r\n\r\n			// 각각의 페이지를 한개씩 반복적으로 생성\r\n			// 총 필요 페이지 수까지\r\n			for (int page = 1; page <= totalPages; page++) {\r\n				buildArticleListPage(board, articles, articlesInAPage, pageMenuBoxSize, totalPages, page);\r\n			}\r\n		}\r\n\r\n		System.out.println(\"= article 리스트 페이지 생성 종료 =\");\r\n	}\r\n\r\n	private void buildArticleListPage(Board board, List<Article> articles, int articlesInAPage, int pageMenuBoxSize,\r\n			int totalPages, int page) {\r\n\r\n		System.out.println(\"= \" + board.name + \" 리스트 페이지 생성 =\");\r\n\r\n		String head = getHeadHtml(\"article_list_\" + board.code);\r\n		String foot = Util.getFileContents(\"site_template/foot.html\");\r\n\r\n		StringBuilder html = new StringBuilder();\r\n\r\n		String template = Util.getFileContents(\"site_template/list.html\");\r\n\r\n		html.append(head);\r\n\r\n		// 1~10 11~20 21~30 ......\r\n		int startPoint = (page - 1) * articlesInAPage; // page=1일때 index=0(즉,id = 1) 2 10(11) 3 20(21)\r\n		int endPoint = startPoint + articlesInAPage - 1; // page=1일때 index0~9 -> id1~10\r\n\r\n		if (endPoint >= articles.size() - 1) {\r\n			endPoint = articles.size() - 1;\r\n		}\r\n\r\n		StringBuilder mainBody = new StringBuilder();\r\n		for (int i = startPoint; i <= endPoint; i++) {\r\n			Article article = articles.get(i);\r\n\r\n			mainBody.append(\"<div>\");\r\n			mainBody.append(\"<div class=\\\"article-list__cell-id\\\">\" + article.id + \"</div>\");\r\n			mainBody.append(\"<div class=\\\"article-list__cell-reg-date\\\">\" + article.regDate + \"</div>\");\r\n			mainBody.append(\"<div class=\\\"article-list__cell-writer\\\">\" + article.extra_memberName + \"</a></div>\");\r\n			mainBody.append(\"<div class=\\\"article-list__cell-title\\\"><a href=\\\"\" + article.id\r\n					+ \".html\\\" class=\\\"hover-underline\\\">\" + article.title + \"</a></div>\");\r\n			mainBody.append(\"</div>\");\r\n		}\r\n\r\n		// 하단 페이지 이동 버튼 메뉴 만들기\r\n		// 1. pageMenuBox내 시작 번호, 끝 번호 설정\r\n\r\n		int previousPageNumCount = (page - 1) / pageMenuBoxSize; // 현재 페이지가 2이면 previousPageNumCount = 1/5\r\n		int boxStartNum = pageMenuBoxSize * previousPageNumCount + 1; // 총 페이지 수 30이면 1~5 6~10 11~15\r\n		int boxEndNum = pageMenuBoxSize + boxStartNum - 1;\r\n\r\n		if (boxEndNum > totalPages) {\r\n			boxEndNum = totalPages;\r\n		}\r\n\r\n		// 2. \'이전\',\'다음\' 버튼 페이지 계산\r\n		int boxStartNumBeforePage = boxStartNum - 1;\r\n		if (boxStartNumBeforePage < 1) {\r\n			boxStartNumBeforePage = 1;\r\n		}\r\n		int boxEndNumAfterPage = boxEndNum + 1;\r\n		if (boxEndNumAfterPage > totalPages) {\r\n			boxEndNumAfterPage = totalPages;\r\n		}\r\n\r\n		// 3. \'이전\',\'다음\' 버튼 필요 유무 판별\r\n		boolean boxStartNumBeforePageBtnNeedToShow = boxStartNumBeforePage != boxStartNum;\r\n		boolean boxEndNumAfterPageBtnNeedToShow = boxEndNumAfterPage != boxEndNum;\r\n\r\n		StringBuilder pageMenuBody = new StringBuilder();\r\n\r\n		link(board, page);\r\n\r\n		if (boxStartNumBeforePageBtnNeedToShow) {\r\n			pageMenuBody.append(\"<li><a href=\\\"\" + link(board, boxStartNumBeforePage)\r\n					+ \"\\\" class=\\\"flex flex-ai-c\\\"> &lt; 이전</a></li>\");\r\n		}\r\n\r\n		for (int i = boxStartNum; i <= boxEndNum; i++) {\r\n			String selectedPageNum = \"\";\r\n			if (i == page) {\r\n				selectedPageNum = \"article-page-menu__link--selected\";\r\n			}\r\n			pageMenuBody.append(\"<li><a href=\\\"\" + link(board, i) + \"\\\" class=\\\"flex flex-ai-c \" + selectedPageNum\r\n					+ \"\\\">\" + i + \"</a></li>\");\r\n		}\r\n		if (boxEndNumAfterPageBtnNeedToShow) {\r\n			pageMenuBody.append(\"<li><a href=\\\"\" + link(board, boxEndNumAfterPage)\r\n					+ \"\\\" class=\\\"flex flex-ai-c\\\">다음 &gt;</a></li>\");\r\n		}\r\n\r\n		String bodyTemplate = template.replace(\"[게시물 리스트 블록]\", mainBody); // list 템플릿에 mainBody 끼워넣고\r\n		html.append(bodyTemplate.replace(\"[게시물 리스트 페이지메뉴 블록]\", pageMenuBody)); // bodyTemplate에 다시 pageMenuBody 끼워넣기\r\n		html.append(foot);\r\n\r\n		String fileName = board.code + \"-list-\" + page + \".html\";\r\n\r\n		Util.writeFile(\"site/\" + fileName, html.toString());\r\n\r\n		System.out.println(\"= \" + board.name + \" 리스트 \" + page + \"페이지 생성 완료 =\");\r\n\r\n	}\r\n\r\n	private String link(Board board, int page) {\r\n		return board.code + \"-list-\" + page + \".html\";\r\n\r\n	}\r\n\r\n	// 인덱스 페이지 생성\r\n	private void buildIndexPage() {\r\n		StringBuilder html = new StringBuilder();\r\n\r\n		String head = getHeadHtml(\"index\");\r\n		String foot = Util.getFileContents(\"site_template/foot.html\");\r\n\r\n		String mainHtml = Util.getFileContents(\"site_template/index.html\");\r\n\r\n		html.append(head);\r\n		html.append(mainHtml);\r\n		html.append(foot);\r\n\r\n		String fileName = \"index.html\";\r\n		String path = \"site/\" + fileName;\r\n\r\n		Util.writeFile(path, html.toString());\r\n	}\r\n\r\n	// 게시판 별 게시물 상세페이지 생성\r\n	private void buildArticleDetailPages() {\r\n		List<Board> boards = articleService.getBoards();\r\n\r\n		for (Board board : boards) {\r\n			List<Article> articles = articleService.getBoardArticlesByCodeForPrint(board.code);\r\n			int articlesSize = articles.size();\r\n			if (articlesSize <= 0) {\r\n				break;\r\n			}\r\n			int beforeArticleIndex = 0;\r\n			int x = beforeArticleIndex;\r\n			int beforeArticleId = articles.get(x).id;\r\n\r\n			String head = getHeadHtml(\"article_detail\");\r\n			String foot = Util.getFileContents(\"site_template/foot.html\");\r\n\r\n			String template = Util.getFileContents(\"site_template/detail.html\");\r\n\r\n			System.out.println(\"= article 상세페이지 생성 =\");\r\n\r\n			for (Article article : articles) {\r\n\r\n				StringBuilder html = new StringBuilder();\r\n\r\n				html.append(head);\r\n\r\n				StringBuilder body = new StringBuilder();\r\n\r\n				body.append(\"<div class=\\\"article-detail-cell__id\\\">\");\r\n				body.append(\"<div>\");\r\n				body.append(\"<span>번호 : </span><span>\" + article.id + \"</span>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"<div class=\\\"article-detail-cell__title\\\">\");\r\n				body.append(\"<div>\");\r\n				body.append(\"<span>제목 : </span><span>\" + article.title + \"</span>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"<div class=\\\"article-detail-cell__title\\\">\");\r\n				body.append(\"<div>\");\r\n				body.append(\"<span>작성자 : </span><span>\" + article.extra_memberName + \"</span>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"<div class=\\\"article-detail-cell__title\\\">\");\r\n				body.append(\"<div>\");\r\n				body.append(\"<span>작성일 : </span><span>\" + article.regDate + \"</span>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"</div><br>\");\r\n				body.append(\"<div class=\\\"article-detail-cell__body height-70p \\\">\");\r\n				body.append(\"<div>\");\r\n				body.append(\"<span>\" + article.body + \"</span>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"</div><br><br>\");\r\n\r\n				body.append(\r\n						\"</div></section><section class=\\\"section-3 con-min-width\\\"><div class=\\\"con\\\"><div class=\\\"article-list-bottom-cell flex flex-jc-c\\\">\");\r\n\r\n				if (article.id > beforeArticleId) {\r\n					body.append(\"<div class=\\\"./\\\"><a href=\\\"\" + articles.get(x - 1).id + \".html\"\r\n							+ \"\\\" class=\\\"hover-underline\\\">&lt 이전글</a></div>\");\r\n				}\r\n\r\n				body.append(\"<div class=\\\"./\\\"><i class=\\\"fas fa-th-list\\\"></i><a href=\\\"\" + board.code + \"-list-1.html\"\r\n						+ \"\\\" class=\\\"hover-underline\\\"> 목록 </a></div>\");\r\n				if (x < articlesSize - 1) {\r\n					body.append(\"<div class=\\\"./\\\"><a href=\\\"\" + articles.get(x + 1).id + \".html\"\r\n							+ \"\\\"class=\\\"hover-underline\\\">다음글 &gt</a></div>\");\r\n				}\r\n\r\n				html.append(template.replace(\"[상세페이지 블록]\", body));\r\n				html.append(foot);\r\n\r\n				String fileName = article.id + \".html\";\r\n				String path = \"site/\" + fileName;\r\n\r\n				Util.writeFile(path, html.toString());\r\n\r\n				System.out.println(path + \" 생성\");\r\n				x++;\r\n				beforeArticleId = articles.get(x - 1).id;\r\n\r\n			}\r\n			System.out.println(\"= article 상세페이지 생성 종료 =\");\r\n\r\n		}\r\n	}\r\n\r\n	// head.html 가져오기\r\n	private String getHeadHtml(String pageName) {\r\n		List<Board> boards = articleService.getBoards();\r\n\r\n		String head = Util.getFileContents(\"site_template/head.html\"); // head.html 가져오기\r\n		StringBuilder boardMenuContentHtml = new StringBuilder();\r\n\r\n		for (Board board : boards) {\r\n			boardMenuContentHtml.append(\"<li>\");\r\n\r\n			String link = board.code + \"-list-1.html\";\r\n\r\n			boardMenuContentHtml.append(\"<a href=\\\"\" + link + \"\\\" class=\\\"block\\\">\");\r\n\r\n			boardMenuContentHtml.append(getTitleBarContentByPageName(\"article_list_\" + board.code));\r\n\r\n			boardMenuContentHtml.append(\"</a>\");\r\n\r\n			boardMenuContentHtml.append(\"</li>\");\r\n\r\n		}\r\n\r\n		head = head.replace(\"[게시판 이름 블록]\", boardMenuContentHtml.toString());\r\n\r\n		String titleBarContentHtml = getTitleBarContentByPageName(pageName);\r\n		// 입력받은 pageName에 맞는 타이틀바 컨텐츠를 리턴\r\n\r\n		head = head.replace(\"[타이틀바 컨텐츠]\", titleBarContentHtml);\r\n\r\n		return head;\r\n	}\r\n\r\n	// 페이지이름에 따라 메인부분 타이틀바 아이콘 가져오기\r\n	private String getTitleBarContentByPageName(String pageName) {\r\n		if (pageName.equals(\"index\")) {\r\n			return \"<i class=\\\"fas fa-home\\\"></i> <span>HOME</span>\";\r\n		} else if (pageName.equals(\"article_detail\")) {\r\n			return \"<i class=\\\"fas fa-file-invoice\\\"></i> <span>ARTICLE DETAIL</span>\";\r\n		} else if (pageName.startsWith(\"article_list_notice\")) {\r\n			return \"<i class=\\\"fas fa-exclamation\\\"></i> <span>NOTICE LIST</span>\";\r\n		} else if (pageName.startsWith(\"article_list_free\")) {\r\n			return \"<i class=\\\"fas fa-users\\\"></i> <span>FREE LIST</span>\";\r\n		} else if (pageName.startsWith(\"article_list_\")) {\r\n			return \"<i class=\\\"fas fa-clipboard-list\\\"></i> <span>ARTICLE LIST</span>\";\r\n		}\r\n		return \"\";\r\n	}\r\n\r\n}\r\n\r\n```',5,1,0,0,0),(34,'2021-02-17 21:37:42','2021-04-24 15:28:25','P.BLOG - 개발일지(Github 페이지 도메인 연결, toastui-viewer 적용)','# Github 페이지 도메인 연결, toastui-viewer 적용\r\n\r\n### <사이트 게시글 상세보기에 toastui-viewer 적용된 화면>\r\n![image](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdwlTB9%2FbtqQnZyc4Sd%2FJ6YH0XTEouTx2qH7OcO2fk%2Fimg.png)\r\n\r\n# 소스코드\r\n\r\n### <app.js>\r\n\r\n```java\r\n\r\nfunction ArticleDetail__Body__init() {\r\n		if(toastui === undefined){\r\n			return;\r\n		}\r\n		\r\n		var body = document.querySelector(\'.article-detail-cell__body > div > span\');\r\n		var initValue = body.innerHTML.trim();\r\n		\r\n		var viewer = new toastui.Editor.factory({\r\n			el : body,\r\n			initialValue : initValue,\r\n			viewer : true,\r\n			plugins: [toastui.Editor.plugin.codeSyntaxHighlight]\r\n		});\r\n	};\r\n\r\n	ArticleDetail__Body__init();\r\n\r\n```\r\n\r\n### <detail.html>\r\n```html\r\n\r\n<!-- 하이라이트 라이브러리 추가, 토스트 UI 에디터에서 사용됨 -->\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.4.1/highlight.min.js\"></script>\r\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.4.1/styles/default.min.css\">\r\n\r\n<!-- 토스트 UI 에디터, 자바스크립트 코어 -->\r\n<script\r\n	src=\"https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js\"></script>\r\n\r\n<!-- 코드 미러 라이브러리 추가, 토스트 UI 에디터에서 사용됨 -->\r\n<link rel=\"stylesheet\"\r\n	href=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.58.3/codemirror.min.css\" />\r\n<!-- 토스트 UI 에디터, CSS 코어 -->\r\n<link rel=\"stylesheet\"\r\n	href=\"https://uicdn.toast.com/editor/latest/toastui-editor.min.css\" />\r\n\r\n<!-- 토스트 UI 에디터, 신택스 하이라이트 플러그인 추가 -->\r\n<script src=\"https://uicdn.toast.com/editor-plugin-code-syntax-highlight/latest/toastui-editor-plugin-code-syntax-highlight.min.js\"></script>\r\n\r\n\r\n   <!-- 메인-상세페이지 시작 -->\r\n    <section class=\"section-2 con-min-width min-height-70vh\">\r\n      <div class=\"con height-100p\">\r\n        <div class=\"article-detail-cell height-100p\">\r\n	  	[상세페이지 블록]\r\n        </div>\r\n      </div>\r\n    </section>\r\n    \r\n  <!-- 메인-상세페이지 끝 -->\r\n  \r\n```\r\n\r\n### <foot.html>\r\n```html\r\n\r\n</main>\r\n\r\n<footer class=\"bottom-bar con-min-width\">\r\n	<div class=\"con flex flex-ai-c\">\r\n		<a href=\"index.html\" class=\"logo logo--mini flex flex-ai-c\"> <i\r\n			class=\"fab fa-jenkins\"></i> <span> Develo<span>p</span>ers\r\n		</span>\r\n		</a>\r\n\r\n		<div class=\"bottom-bar__site-info\">Lorem ipsum dolor sit amet\r\n			consectetur adipisicing elit. Dolorum eos ipsum necessitatibus\r\n			doloremque quos voluptate debitis earum aut a consequuntur explicabo\r\n			deleniti qui eius facere, harum error eveniet vel laudantium.</div>\r\n	</div>\r\n</footer>\r\n</div>\r\n<!-- app.js 불러오기 -->\r\n<script src=\"app.js\"></script>\r\n</body>\r\n</html>\r\n\r\n```\r\n\r\n\r\n',5,1,0,0,0),(35,'2021-02-17 21:39:53','2021-04-24 15:28:25','P.BLOG - 개발일지(댓글 유틸(disqus) 추가,검색엔진 등록, 구글 애널리틱스 적용, 구글 ad 추가 등)','# 소스코드: 댓글 유틸(disqus) 추가,검색엔진 등록, 구글 애널리틱스 적용, 구글 ad 추가 등\r\n\r\n### <BuildService.java>\r\n```java\r\n\r\n// 게시판 별 게시물 상세페이지 생성\r\n	private void buildArticleDetailPages() {\r\n		List<Board> boards = articleService.getBoards();\r\n\r\n		for (Board board : boards) {\r\n			List<Article> articles = articleService.getBoardArticlesByCodeForPrint(board.code);\r\n			int articlesSize = articles.size();\r\n			\r\n			if (articlesSize <= 0) {\r\n				continue;\r\n			}\r\n			int beforeArticleIndex = 0;\r\n			int x = beforeArticleIndex;\r\n			int beforeArticleId = articles.get(x).id;\r\n\r\n			String head = getHeadHtml(\"article_detail\");\r\n			String foot = Util.getFileContents(\"site_template/foot.html\");\r\n\r\n			String template = Util.getFileContents(\"site_template/detail.html\");\r\n\r\n			System.out.println(\"= article 상세페이지 생성 =\");\r\n\r\n			for (Article article : articles) {\r\n\r\n				StringBuilder html = new StringBuilder();\r\n\r\n				html.append(head);\r\n\r\n				StringBuilder body = new StringBuilder();\r\n\r\n				body.append(\"<div class=\\\"article-detail-cell__id\\\">\");\r\n				body.append(\"<div>\");\r\n				body.append(\"<span>번호 : </span><span>\" + article.id + \"</span>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"<div class=\\\"article-detail-cell__title\\\">\");\r\n				body.append(\"<div>\");\r\n				body.append(\"<span>제목 : </span><span>\" + article.title + \"</span>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"<div class=\\\"article-detail-cell__title\\\">\");\r\n				body.append(\"<div>\");\r\n				body.append(\"<span>작성자 : </span><span>\" + article.extra_memberName + \"</span>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"<div class=\\\"article-detail-cell__title\\\">\");\r\n				body.append(\"<div>\");\r\n				body.append(\"<span>작성일 : </span><span>\" + article.regDate + \"</span>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"</div><br>\");\r\n				body.append(\"<div class=\\\"article-detail-cell__body height-70p \\\">\");\r\n				body.append(\"<div>\");\r\n				body.append(\"<span>\" + article.body + \"</span>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"</div><br><br>\");\r\n				//댓글 유틸 disqus 적용\r\n				body.append(\"<nav><div id=\\\"disqus_thread\\\"></div>\\r\\n\"\r\n						+ \"<script>\\r\\n\"\r\n						+ \"    (function() { // DON\'T EDIT BELOW THIS LINE\\r\\n\"\r\n						+ \"    var d = document, s = d.createElement(\'script\');\\r\\n\"\r\n						+ \"    s.src = \'https://devj-blog.disqus.com/embed.js\';\\r\\n\"\r\n						+ \"    s.setAttribute(\'data-timestamp\', +new Date());\\r\\n\"\r\n						+ \"    (d.head || d.body).appendChild(s);\\r\\n\"\r\n						+ \"    })();\\r\\n\"\r\n						+ \"</script>\\r\\n\"\r\n						+ \"<noscript>Please enable JavaScript to view the <a href=\\\"https://disqus.com/?ref_noscript\\\">comments powered by Disqus.</a></noscript></nav>\");\r\n\r\n				body.append(\r\n						\"</div></section><section class=\\\"section-3 con-min-width\\\"><div class=\\\"con\\\"><div class=\\\"article-list-bottom-cell flex flex-jc-c\\\">\");\r\n\r\n				if (article.id > beforeArticleId) {\r\n					body.append(\"<div class=\\\"./\\\"><a href=\\\"\" + articles.get(x - 1).id + \".html\"\r\n							+ \"\\\" class=\\\"hover-underline\\\">&lt 이전글</a></div>\");\r\n				}\r\n\r\n				body.append(\"<div class=\\\"./\\\"><i class=\\\"fas fa-th-list\\\"></i><a href=\\\"\" + board.code + \"-list-1.html\"\r\n						+ \"\\\" class=\\\"hover-underline\\\"> 목록 </a></div>\");\r\n				if (x < articlesSize - 1) {\r\n					body.append(\"<div class=\\\"./\\\"><a href=\\\"\" + articles.get(x + 1).id + \".html\"\r\n							+ \"\\\"class=\\\"hover-underline\\\">다음글 &gt</a></div>\");\r\n				}\r\n\r\n				html.append(template.replace(\"[상세페이지 블록]\", body));\r\n				html.append(foot);\r\n\r\n				String fileName = article.id + \".html\";\r\n				String path = \"site/\" + fileName;\r\n\r\n				Util.writeFile(path, html.toString());\r\n\r\n				System.out.println(path + \" 생성\");\r\n				x++;\r\n				beforeArticleId = articles.get(x - 1).id;\r\n\r\n			}\r\n			System.out.println(\"= article 상세페이지 생성 종료 =\");\r\n\r\n		}\r\n	}\r\n\r\n```\r\n\r\n### <head.html>\r\n```html\r\n\r\n<!doctype html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n<script data-ad-client=\"ca-pub-7996879977557531\" async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\r\n<!-- Global site tag (gtag.js) - Google Analytics -->\r\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-X5RMP83794\"></script>\r\n<script>\r\n  window.dataLayer = window.dataLayer || [];\r\n  function gtag(){dataLayer.push(arguments);}\r\n  gtag(\'js\', new Date());\r\n\r\n  gtag(\'config\', \'G-X5RMP83794\');\r\n</script>\r\n<meta charset=\"UTF-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n<!-- 구글 검색엔진 등록-소유권 확인 -->\r\n<meta name=\"google-site-verification\" content=\"37R4KcEaJU5LfiKL7GI1hu1_spJgWOazN6xy48OHhD4\" />\r\n<title>Developers</title>\r\n\r\n<!-- 폰트어썸 불러오기 -->\r\n<link rel=\"stylesheet\"\r\n	href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css\">\r\n<!-- app.css 불러오기 -->\r\n<link rel=\"stylesheet\" href=\"app.css\">\r\n\r\n<!--모바일에서도 PC와 같은 비율 유지-->\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n\r\n<!--제이쿼리-->\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n\r\n<!-- 토스트 UI 에디터, 자바스크립트 코어 -->\r\n<script src=\"https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js\"></script>\r\n\r\n<!-- 코드 미러 라이브러리 추가, 토스트 UI 에디터에서 사용됨 -->\r\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.58.3/codemirror.min.css\" />\r\n<!-- 토스트 UI 에디터, CSS 코어 -->\r\n<link rel=\"stylesheet\" href=\"https://uicdn.toast.com/editor/latest/toastui-editor.min.css\" />\r\n\r\n\r\n\r\n\r\n\r\n</head>\r\n\r\n<body>\r\n	<div class=\"body-content min-height-100vh flex flex-column\">\r\n		<!-- 로고바 시작 -->\r\n		<header class=\"logo-bar con-min-width\">\r\n			<div class=\"con height-100p flex flex-jc-c\">\r\n				<a href=\"index.html\" class=\"logo flex flex-ai-c\"> <i\r\n					class=\"fab fa-jenkins\"></i> <span> Develo<span>p</span>ers\r\n				</span>\r\n				</a>\r\n			</div>\r\n		</header>\r\n		<!-- 로고바 끝 -->\r\n\r\n		<!-- 메뉴바 시작 -->\r\n		<header class=\"menu-bar con-min-width\">\r\n			<div class=\"con height-100p\">\r\n				<nav class=\"menu-bar__menu-1\">\r\n					<ul class=\"flex\">\r\n						<li><a href=\"index.html\" class=\"block\"> <i class=\"fas fa-home\"></i>\r\n								<span>HOME</span>\r\n						</a></li>\r\n						<li><a class=\"block\"> <i class=\"fas fa-list\"></i> <span>ARTICLES</span>\r\n						</a>\r\n							<ul>\r\n								[게시판 이름 블록]\r\n							</ul></li>\r\n						<li><a class=\"block\"> <i class=\"fas fa-link\"></i> <span>LINK</span>\r\n						</a>\r\n							<ul>\r\n								<li><a href=\"https://jhs512.github.io/blog/\"\r\n									target=\"_blank\" class=\"block\"> <i class=\"fab fa-blogger-b\"></i>\r\n										<span>BLOG</span>\r\n								</a></li>\r\n								<li><a href=\"https://github.com/\" target=\"_blank\"\r\n									class=\"block\"> <i class=\"fab fa-github\"></i> <span>GITHUB</span>\r\n								</a></li>\r\n							</ul></li>\r\n						<li><a href=\"stat.html\" class=\"block\"> <i\r\n								class=\"fas fa-chart-pie\"></i> <span>STATISTICS</span>\r\n						</a></li>\r\n					</ul>\r\n				</nav>\r\n			</div>\r\n		</header>\r\n		<!-- 메뉴바 끝 -->\r\n\r\n		<!-- 메인-타이틀바 시작 -->\r\n		<main class=\"flex-grow-1\">\r\n			<div class=\"title-bar con-min-width\">\r\n				<h1 class=\"con\">\r\n					[타이틀바 컨텐츠]\r\n				</h1>\r\n			</div>\r\n			<!-- 메인-타이틀바 종료 -->\r\n\r\n```',5,1,0,0,0),(36,'2021-02-17 21:44:04','2021-04-24 15:28:25','P.BLOG - 개발일지(사이드바,top버튼 적용, 홈화면 애니메이션 적용, 로고, open graph, favicon 적용 등)','# 소스코드: 사이드바,top버튼 적용, 홈화면 애니메이션 적용, 로고, open graph, favicon 적용 등\r\n\r\n### <head.html>\r\n```html\r\n\r\n<!-- Open Graph Tag -->\r\n<meta property=\"og:url\" content=\"https://blog.devj.me/\"/>\r\n<meta property=\"og:type\" content=\"blog\"/>\r\n<meta property=\"og:title\" content=\"DEV_J BLOG\"/>\r\n<meta property=\"og:description\" content=\"DEV_J의 BLOG\"/>\r\n<meta property=\"og:image\" content=\"images/Dev_J_logo/logo.png\"/>\r\n\r\n<!-- 사이트 타이틀 -->\r\n<title>DEV_J BLOG</title>\r\n\r\n<!-- 파비콘 -->\r\n<link rel=\"shortcut icon\" href=\"images/favicon/favicon.ico\" type=\"image/x-icon\">\r\n<link rel=\"icon\" href=\"images/favicon/favicon.ico\" type=\"image/x-icon\">\r\n\r\n```\r\n\r\n### <side-bar.html>\r\n```html\r\n\r\n<!-- 사이드바 시작 -->\r\n  <header class=\"side-bar flex flex-column\">\r\n   <div class=\"side-bar__status-icon\">\r\n    <div>Menu<i class=\"fas fa-stream\"></i></div>\r\n    <div>▶</div>\r\n    <div>▼</div>\r\n   </div>\r\n   <nav class=\"side-bar__menu\">\r\n    <ul>\r\n      <li>\r\n        <a href=\"index.html\" class=\"block\">\r\n          <i class=\"fas fa-home\"></i>\r\n          <span>HOME</span>\r\n        </a>\r\n      </li>\r\n      <li>\r\n        <a class=\"block\">\r\n          <i class=\"fas fa-list\"></i>\r\n          <span>ARTICLES</span>\r\n        </a>\r\n        <ul>\r\n          [게시판 메뉴 링크 블록]\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <a class=\"block\">\r\n          <i class=\"fas fa-link\"></i>\r\n          <span>LINK</span>\r\n        </a>\r\n        <ul>\r\n          <li>\r\n            <a href=\"https://cjy324.tistory.com/\" target=\"_blank\" class=\"block\">\r\n            <i class=\"fas fa-rss-square\"></i>\r\n            <span>T-STORY</span>\r\n            </a>\r\n          </li>\r\n          <li>\r\n           <a href=\"https://github.com/cjy324/TIL_Jooyoung\" target=\"_blank\" class=\"block\">\r\n           <i class=\"fab fa-github\"></i>\r\n           <span>GITHUB</span>\r\n           </a>\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <a href=\"stat.html\" class=\"block\">\r\n          <i class=\"fas fa-chart-pie\"></i>\r\n          <span>STATISTICS</span>\r\n        </a>\r\n      </li>\r\n    </ul>\r\n   </nav>\r\n  </header>\r\n  <!-- 사이드바 끝 -->  \r\n\r\n```\r\n\r\n### <top-button.html>\r\n```html\r\n\r\n<!-- 맨 위 버튼 시작 -->\r\n  <nav class=\"top-button flex flex-jc-c flex-ai-c\">\r\n    <div class=\"\">\r\n      <a href=\"#header\">▲ TOP</a> \r\n    </div>     \r\n  </nav>\r\n  <!-- 맨 위 버튼 끝 -->\r\n\r\n```\r\n\r\n## < CSS >\r\n```css\r\n\r\n/* 사이드바 메뉴 시작 */\r\n\r\n.side-bar{\r\n  background-color:black;\r\n  position:fixed;\r\n  width:170px;\r\n  height:100%;\r\n  left:-133px;\r\n  /*사이드바 고정 left:0;*/\r\n\r\n  transition:left 1s;\r\n  color:white;\r\n}\r\n.side-bar:hover{\r\n  left:0;\r\n}\r\n\r\n.side-bar > .side-bar__status-icon > div{\r\n  text-align:right;\r\n  padding:10px;\r\n  font-size:1.5rem;\r\n  \r\n}\r\n.side-bar > .side-bar__status-icon > div:first-child{\r\n  padding-top:30px;\r\n}\r\n.side-bar > .side-bar__status-icon > div:first-child >i{\r\n  padding-left:40px;\r\n}\r\n\r\n.side-bar > .side-bar__status-icon > div:nth-child(2){\r\n  display:none;\r\n}\r\n.side-bar:hover > .side-bar__status-icon > div:last-child{\r\n  display:none;\r\n}\r\n.side-bar:hover > .side-bar__status-icon > div:nth-child(2){\r\n  display:block;\r\n}\r\n.side-bar__menu ul{\r\n  \r\n}\r\n\r\n.side-bar__menu ul ul{\r\n  background-color:black;\r\n  display:none;\r\n  position:absolute;\r\n}\r\n.side-bar__menu ul > li{\r\n  position:relative;\r\n}\r\n\r\n\r\n.side-bar__menu > ul > li::after{\r\n  content:\"\";\r\n  text-align:center;\r\n  height:2px;\r\n  width:75%;\r\n  bottom:0%;\r\n  background-color:white;\r\n  position:absolute;\r\n\r\n}\r\n.side-bar__menu ul > li > a{\r\n  display:block;\r\n  padding:15px 20px;\r\n  white-space:nowrap;\r\n}\r\n.side-bar__menu ul> li> ul > li:first-child > a{\r\n  border-radius:0 10px 0 0;\r\n}\r\n.side-bar__menu ul> li> ul > li:last-child > a{\r\n  border-radius:0 0 10px 0;\r\n}\r\n\r\n.side-bar__menu ul > li > a:not(:only-child):after{\r\n  content:\"[+]\";\r\n  margin-left:5px;\r\n}\r\n.side-bar__menu ul > li:hover > a:not(:only-child):after{\r\n  content:\"[-]\";\r\n}\r\n.side-bar__menu ul > li:hover > a{\r\n  background-color:white;\r\n  color:black;\r\n}\r\n\r\n.side-bar__menu ul > li:hover > ul{\r\n  display:block;\r\n}\r\n.side-bar__menu ul > li > ul{\r\n  left:100%;\r\n  top:-5px;\r\n  border:5px solid black;\r\n  border-left:0px;\r\n  border-radius:0 15px 15px 0;\r\n}\r\n\r\n\r\n@media ( min-width:1300px ) {\r\n    .side-bar {\r\n        width:170px;\r\n    }\r\n}\r\n\r\n/* 미디어의 크기가 1300px이상일때만 side-bar 보이기 */\r\n@media ( max-width:1299px )  {\r\n    .side-bar {\r\n        width:0px;\r\n    }\r\n}\r\n\r\n/* 사이드바 메뉴 끝 */\r\n\r\n\r\n/* 맨 위 버튼 시작 */\r\n.top-button{\r\n  position:fixed;\r\n  bottom:80px;\r\n  right:20px;\r\n  width:70px;\r\n  height:30px;\r\n  text-align:center;\r\n  \r\n}\r\n.top-button > div{\r\n  width:100%;\r\n  height:100%; \r\n  font-size:1.1rem;\r\n  border-radius:10px;\r\n}\r\n\r\n.top-button > div > a{\r\n  display:inline-block;\r\n  width:100%;\r\n  height:85%;\r\n  background-color:black;\r\n  color:white;\r\n  border-radius:10px;\r\n  border:3px solid;\r\n  padding-top:7px;\r\n}\r\n\r\n.top-button > div:hover > a{\r\n  background-color:white;\r\n  color:black;\r\n\r\n}\r\n\r\n/* 맨 위 버튼 끝 */\r\n\r\n```',5,1,0,0,0),(37,'2021-02-17 21:53:43','2021-04-24 15:28:25','P.BLOG - 개발일지(사이트 메타태그 적용(상세페이지 내용 나오게 하기 등))','# 소스코드: 사이트 메타태그 적용(상세페이지 내용 나오게 하기 등)\r\n\r\n### <head.html>\r\n```html\r\n\r\n<!doctype html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n<script data-ad-client=\"ca-pub-7996879977557531\" async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\r\n<!-- Global site tag (gtag.js) - Google Analytics -->\r\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-X5RMP83794\"></script>\r\n<script>\r\n  window.dataLayer = window.dataLayer || [];\r\n  function gtag(){dataLayer.push(arguments);}\r\n  gtag(\'js\', new Date());\r\n\r\n  gtag(\'config\', \'G-X5RMP83794\');\r\n</script>\r\n<meta charset=\"UTF-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n<!-- 구글 검색엔진 등록-소유권 확인 -->\r\n<meta name=\"google-site-verification\" content=\"37R4KcEaJU5LfiKL7GI1hu1_spJgWOazN6xy48OHhD4\" />\r\n\r\n<!-- Meta Tag & Open Graph -->\r\n<meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n<meta name=\"viewport\" content=\"width=1200\">\r\n<meta name=\"apple-mobile-web-app-title\" content=\"[사이트 타이틀]\" />\r\n<!-- 메타태그정보 //-->\r\n<!-- META -->\r\n<link rel=\"canonical\" href=\"[사이트 URL]\" />\r\n<meta name=\"subject\" content=\"[사이트 주제]\"/>\r\n<meta name=\"title\" content=\"[사이트 타이틀]\" />\r\n<meta name=\"keywords\" content=\"[사이트 키워드]\" />\r\n<meta name=\"copyright\" content=\"[사이트 타이틀]\" />\r\n<meta name=\"pubdate\" content=\"[날짜]\" />\r\n<meta name=\"lastmod\" content=\"[날짜]\" />\r\n<!-- OPENGRAPH -->\r\n<meta property=\"og:site_name\" content=\"[사이트 타이틀]\" />\r\n<meta property=\"og:type\" content=\"blog\" />\r\n<meta property=\"og:title\" content=\"[사이트 주제]\" />\r\n<meta property=\"og:description\" content=\"[사이트 설명]\" />\r\n<meta property=\"og:locale\" content=\"ko_KR\" />\r\n<meta property=\"og:image\" content=\"images/Dev_J_logo/logo.png\" />\r\n<meta property=\"og:image:alt\" content=\"[사이트 도메인]\" />\r\n<meta property=\"og:image:width\" content=\"486\" />\r\n<meta property=\"og:image:height\" content=\"254\" />\r\n<meta property=\"og:updated_time\" content=\"[날짜]\"/>\r\n<meta property=\"og:pubdate\" content=\"[날짜]\" />\r\n<meta property=\"og:url\" content=\"[사이트 URL]\" />\r\n<!-- TWITTER -->\r\n<meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n<meta name=\"twitter:title\" content=\"[사이트 주제]\" />\r\n<meta name=\"twitter:site\" content=\"@[사이트 타이틀]\" />\r\n<meta name=\"twitter:creator\" content=\"@[사이트 타이틀]\" />\r\n<meta name=\"twitter:image\" content=\"images/Dev_J_logo/logo.png\">\r\n<meta name=\"twitter:description\" content=\"[사이트 설명]\" />\r\n<!-- GOOGLE+ -->\r\n<meta itemprop=\"headline\" content=\"[사이트 타이틀]\" />\r\n<meta itemprop=\"name\" content=\"[사이트 타이틀]\" />\r\n<meta itemprop=\"description\" content=\"[사이트 설명]\" />\r\n<meta itemprop=\"image\" content=\"images/Dev_J_logo/logo.png\" />\r\n\r\n<!-- 사이트 타이틀 -->\r\n<title>[페이지 타이틀]</title>\r\n\r\n\r\n<!-- 파비콘 -->\r\n<link rel=\"shortcut icon\" href=\"images/favicon/favicon.ico\" type=\"image/x-icon\">\r\n<link rel=\"icon\" href=\"images/favicon/favicon.ico\" type=\"image/x-icon\">\r\n\r\n```\r\n\r\n### <BulidService.java>\r\n```java\r\n\r\nhead = head.replace(\"[게시판 이름 블록]\", boardMenuContentHtml.toString());\r\n\r\n		String titleBarContentHtml = getTitleBarContentByPageName(pageName);\r\n		// 입력받은 pageName에 맞는 타이틀바 컨텐츠를 리턴\r\n\r\n		head = head.replace(\"[타이틀바 컨텐츠]\", titleBarContentHtml);\r\n		\r\n		String pageTitle = getPageTitle(pageName, object);\r\n		// 입력받은 pageName에 맞는 페이지의 타이틀을 리턴\r\n		\r\n		head = head.replace(\"[페이지 타이틀]\", pageTitle);\r\n	\r\n		//Meta Tag & Open Graph 작업\r\n		String siteTitle = \"Dev_J BLOG\";\r\n		String siteSubject = \"Dev_J의 BLOG\";\r\n		String siteKeywords = \"JAVA, HTML, CSS, JavaScript, MySQL\";\r\n		String siteDescription = \"Dev_J의 BLOG입니다.\";\r\n		String siteDomain = \"blog.devj.me\"; \r\n		String siteMainUrl = \"https://\" + siteDomain;\r\n		String currentDate = Util.getNowDateStr().replace(\" \", \"T\");\r\n		\r\n		\r\n		//게시물 상세페이지마다 내용 나오게 하기\r\n		if ( object instanceof Article ) {\r\n			Article article = (Article) object;\r\n			siteSubject = article.title;\r\n			siteDescription = article.body;\r\n			siteDescription = siteDescription.replaceAll(\"[^\\uAC00-\\uD7A3xfe0-9a-zA-Z\\\\s]\", \"\");\r\n			//[^\\uAC00-\\uD7A3xfe0-9a-zA-Z\\\\s] => 모든 특수문자 제거\r\n		}\r\n		\r\n		\r\n		head = head.replace(\"[사이트 타이틀]\", siteTitle);\r\n		head = head.replace(\"[사이트 주제]\", siteSubject);\r\n		head = head.replace(\"[사이트 키워드]\", siteKeywords);\r\n		head = head.replace(\"[사이트 설명]\", siteDescription);\r\n		head = head.replace(\"[사이트 도메인]\", siteDomain);\r\n		head = head.replace(\"[사이트 URL]\", siteMainUrl);\r\n		head = head.replace(\"[날짜]\", currentDate);\r\n		\r\n		\r\n		return head;\r\n\r\n```\r\n',5,1,0,0,0),(38,'2021-02-17 21:56:42','2021-04-24 15:28:26','P.BLOG - 개발일지(Disqus api 적용 - 댓글수, 추천수 동기화 기능 추가( + 이모지 적용)(feat.jackson))','# 소스코드: Disqus api 적용 - 댓글수, 추천수 동기화 기능 추가( + 이모지 적용)(feat.jackson)\r\n\r\n### <BuildService.java>\r\n```java\r\n\r\npublic void builSite() {\r\n		System.out.println(\"= site 폴더 생성 =\");\r\n\r\n		// Util.rmdir(\"site\"); // 기존 site 폴더 삭제\r\n		Util.mkdir(\"site\"); // 신규 site 폴더 생성\r\n\r\n		// site_template에 있는 app.css(원본)를 복사해 site폴더 생성시 그 안에 복사본 붙여넣기\r\n		Util.copy(\"site_template/app.css\", \"site/app.css\");\r\n		Util.copy(\"site_template/app.js\", \"site/app.js\");\r\n\r\n		// site_template에 있는 images(원본)폴더를 복사해 site폴더 생성시 그 안에 복사본 붙여넣기\r\n		Util.copyDir(\"site_template/images\", \"site/images\");\r\n\r\n		// 사이트 생성 전 Discus Data 가져오기\r\n		loadDiscusData();\r\n\r\n		buildIndexPage(); // 인덱스 페이지 생성\r\n		buildArticleListPages(); // 각 게시판 별 게시물리스트 페이지 생성\r\n		buildArticleDetailPages(); // 게시판 별 게시물 상세페이지 생성\r\n\r\n	}\r\n\r\n	// Discus Data 가져오기\r\n	private void loadDiscusData() {\r\n		List<Article> articles = articleService.getArticlesForPrint();\r\n\r\n		for (Article article : articles) {\r\n			Map<String, Object> discusArticleData = discusApiService.getArticleData(article);\r\n			\r\n			if (discusArticleData != null) {\r\n				int likesCount = (int) discusArticleData.get(\"likesCount\");\r\n				int commentsCount = (int) discusArticleData.get(\"commentsCount\");\r\n				\r\n				Map<String, Object> modifyArgs = new HashMap<>();\r\n				modifyArgs.put(\"id\", article.id);\r\n				modifyArgs.put(\"likesCount\", likesCount);\r\n				modifyArgs.put(\"commentsCount\", commentsCount);\r\n\r\n				articleService.articleModify(modifyArgs);\r\n				\r\n			}\r\n\r\n		}\r\n\r\n	}\r\n\r\n```\r\n\r\n### <DiscusApiService.java>\r\n```java\r\n\r\npackage com.sbs.example.mysqlTextBoard.service;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport com.sbs.example.mysqlTextBoard.apiDto.DisqusApiDataListThread;\r\nimport com.sbs.example.mysqlTextBoard.container.Container;\r\nimport com.sbs.example.mysqlTextBoard.dto.Article;\r\nimport com.sbs.example.mysqlTextBoard.util.Util;\r\n\r\npublic class DiscusApiService {\r\n\r\n	public Map<String, Object> getArticleData(Article article) {\r\n		String fileName = Container.buildService.getArticleFileName(article);\r\n		String url = \"https://disqus.com/api/3.0/forums/listThreads.json\";\r\n\r\n		DisqusApiDataListThread disqusApiDataListThread = (DisqusApiDataListThread) Util.callApiResponseTo(DisqusApiDataListThread.class,\r\n				url, \"api_key=\" + Container.appConfig.getDisqusApiKey(), \"forum=\" + Container.appConfig.getDisqusForumName(),\r\n				\"thread:ident=\" + fileName);\r\n		\r\n		if(disqusApiDataListThread == null) {\r\n			return null;\r\n		}\r\n		\r\n		Map<String, Object> rs = new HashMap<>();\r\n		rs.put(\"likesCount\", disqusApiDataListThread.response.get(0).likes);\r\n		rs.put(\"commentsCount\", disqusApiDataListThread.response.get(0).posts);\r\n		System.out.println(rs);\r\n		\r\n		return rs;\r\n	}\r\n\r\n}\r\n\r\n```\r\n\r\n### <DisqusApiDataListThread.java>\r\n```java\r\n\r\npackage com.sbs.example.mysqlTextBoard.apiDto;\r\n\r\nimport java.util.List;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\r\n\r\n@JsonIgnoreProperties(ignoreUnknown = true)\r\npublic class DisqusApiDataListThread {\r\n	\r\n	public int code;\r\n	public List<Response> response;\r\n	\r\n	@JsonIgnoreProperties(ignoreUnknown = true)\r\n	public static class Response{\r\n		public int likes;\r\n		public int posts;\r\n	}\r\n}\r\n\r\n```\r\n\r\n### <AppConfig.java>\r\n\r\n```java\r\n\r\npackage com.sbs.example.mysqlTextBoard;\r\n\r\npublic class AppConfig {\r\n\r\n	public String getSiteDomain() {\r\n		return \"blog.devj.me\";\r\n	}\r\n	\r\n	\r\n	public String getDisqusApiKey() {\r\n		return \"mr5Mv3I4DJ893SADMVmxOu7iUzXrkL3GvNnWxJ4dBy5ZBHvd32lKlEw0qYI5x76F\";\r\n		\r\n	}\r\n	\r\n	public String getDisqusForumName() {\r\n		return \"devj-blog\";\r\n		\r\n	}\r\n\r\n}\r\n\r\n```\r\n',5,1,0,0,0),(39,'2021-02-17 21:59:05','2021-04-24 15:28:26','P.BLOG - 개발일지(GoogleAnalytics API 도입 테스트(feat.Maven))','# GoogleAnalytics API 도입 테스트(feat.Maven)\r\n\r\n### <testApp.java>\r\n```java\r\n\r\npublic class testApp {\r\n\r\n	@JsonIgnoreProperties(ignoreUnknown = true)\r\n	public static class TestDataType1 {\r\n		public int age;\r\n		public String name;\r\n		public int height;\r\n	}\r\n\r\n	public void run() {\r\n		 //testApp();\r\n\r\n		//testJackson5();\r\n		\r\n		testGoogleCredentials();\r\n		testUpdateGoogleAnalyticsApi();\r\n	}\r\n\r\n	private void testUpdateGoogleAnalyticsApi() {\r\n		//GoogleAnalytics 버전4의 PropertyId 가져오기\r\n		String ga4PropertyId = Container.appConfig.getGa4PropertyId();\r\n\r\n	    try (AlphaAnalyticsDataClient analyticsData = AlphaAnalyticsDataClient.create()) {\r\n	      RunReportRequest request = RunReportRequest.newBuilder()\r\n	          .setEntity(Entity.newBuilder().setPropertyId(ga4PropertyId)) //검색(데이터 가져올) 대상\r\n	          //해설 참고: http://www.goldenplanet.co.kr/blog/2017/01/24/google-analytics-dimension-metric/\r\n	          //공식 정보: https://developers.google.com/analytics/devguides/reporting/data/v1/api-schema\r\n	          //Dimension(측정 기준): 웹사이트 방문자들의 특성(속성)\r\n	          .addDimensions(\r\n	              Dimension.newBuilder().setName(\"pagePath\")) //pagePath: The web pages visited, listed by URI.\r\n	          //Metric(측정 항목): Dimension을 측정하는 “숫자”\r\n	          .addMetrics(Metric.newBuilder().setName(\"activeUsers\")) //activeUsers: The number of distinct users who visited your site or app.\r\n	          .addDateRanges(\r\n	              DateRange.newBuilder().setStartDate(\"2020-10-01\").setEndDate(\"today\")).build();\r\n\r\n	      // Make the request\r\n	      RunReportResponse response = analyticsData.runReport(request);\r\n\r\n	      System.out.println(\"Report result:\");\r\n	      for (Row row : response.getRowsList()) {\r\n	        System.out.printf(\"%s, %s%n\", row.getDimensionValues(0).getValue(),\r\n	            row.getMetricValues(0).getValue());\r\n	      }\r\n	    } catch (IOException e) {\r\n			e.printStackTrace();\r\n		}\r\n		\r\n	}\r\n\r\n	private void testGoogleCredentials() {\r\n		//환경변수 경로를 가져오기\r\n		String variablesPath = System.getenv(\"GOOGLE_APPLICATION_CREDENTIALS\");\r\n		System.out.println(variablesPath);\r\n		\r\n		\r\n	}\r\n\r\n```\r\n\r\n',5,1,0,0,0),(40,'2021-02-17 22:00:58','2021-04-24 15:28:26','P.BLOG - 개발일지(템플릿에 ajax검색 구현 연습)','# 템플릿에 ajax검색 구현 연습\r\n\r\n### < JavaScript >\r\n```javascript\r\n\r\nconst articleList = [\r\n  {\r\n    id:9,\r\n    regDate:\"2020-12-12 12:12:12\",\r\n    writer:\"홍길동\",\r\n    title:\"테스트 제목1\",\r\n    body:\"테스트 내용 1111111111\"\r\n  },\r\n  {\r\n    id:5,\r\n    regDate:\"2020-12-12 10:12:12\",\r\n    writer:\"홍길순이\",\r\n    title:\"테스트 제목2\",\r\n    body:\"테스트 내용 222222222\"\r\n  },\r\n  {\r\n    id:7,\r\n    regDate:\"2020-12-12 11:12:12\",\r\n    writer:\"아무개\",\r\n    title:\"테스트 제목3\",\r\n    body:\"테스트 내용 3333333333\"\r\n  },\r\n  {\r\n    id:2,\r\n    regDate:\"2020-11-12 11:12:12\",\r\n    writer:\"장영실\",\r\n    title:\"테스트 제목4\",\r\n    body:\"테스트 내용 4444444444\"\r\n  },\r\n  {\r\n    id:10,\r\n    regDate:\"2020-12-10 12:10:12\",\r\n    writer:\"임꺽정\",\r\n    title:\"테스트 제목5\",\r\n    body:\"테스트 내용 55555555\"\r\n  },\r\n  {\r\n    id:1,\r\n    regDate:\"2020-11-12 11:12:12\",\r\n    writer:\"Mike\",\r\n    title:\"test title 6\",\r\n    body:\"test body 66666666\"\r\n  },\r\n  {\r\n    id:15,\r\n    regDate:\"2020-12-10 12:10:12\",\r\n    writer:\"Jackson\",\r\n    title:\"test title 7\",\r\n    body:\"test body 7777777777\"\r\n  }\r\n];\r\n\r\n\r\nconst articleListBox = new Vue({\r\n  el:\"#search-section\",\r\n  data:{\r\n    articleList:articleList,\r\n    searchKeyword:\"\"\r\n},\r\n  computed: {\r\n    filterKey:function(){\r\n      return this.searchKeyword.toLowerCase();\r\n      //가장 먼저 searchKeyword를 소문자화\r\n      //즉, filterKey = 소문자화된 searchKeyword\r\n    },\r\n    filtered:function(){\r\n      if ( this.filterKey.length == 0 ) {\r\n        return this.articleList;\r\n        //만약 filterKey가 없으면 전체 articleList 리턴\r\n      }\r\n      \r\n      return this.articleList.filter((row) => {\r\n        if(row.title.toLowerCase().indexOf(this.filterKey) > -1){\r\n          //articleList의 low 중 title에 filterKey가 일치하는 것이 있으면 true 리턴\r\n          return true;\r\n        }   \r\n      });  \r\n    }\r\n  }\r\n});\r\n\r\n```\r\n\r\n',5,1,0,0,0),(41,'2021-02-17 22:03:52','2021-04-24 15:28:26','P.BLOG - 개발일지(ajax 통신 연계 통한 블로그 게시물 검색 페이지 생성(+인덱스 게시판 디자인 개편))','# ajax 통신 연계 통한 블로그 게시물 검색 페이지 생성(+인덱스 게시판 디자인 개편)\r\n\r\n## <search 페이지>\r\n![image](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fo9LTS%2FbtqSSdyUT9q%2FK52ckkobeyIJNUTCprmjbK%2Fimg.png)\r\n\r\n\r\n## 소스코드\r\n\r\n### <search.js>\r\n```javascript\r\n\r\nconsole.clear();\r\nconst articleList = [];\r\n\r\nconst apiURL = \'article_list.json\';\r\n\r\n$.get(\r\n    apiURL,\r\n    {},\r\n    function(data) {\r\n        data.forEach((row, index) => {\r\n\r\n        const article = {\r\n        id:row.id,\r\n        regDate:row.regDate,\r\n        writer:row.extra_memberName,\r\n        title:row.title,\r\n        body:row.body\r\n            \r\n          };\r\n          articleList.push(article);\r\n        });\r\n    },\r\n    \'json\'\r\n);\r\n\r\nconst articleListBox = new Vue({\r\n  el:\"#article-search-section\",\r\n  data:{\r\n    articleList:articleList,\r\n    keyword:\'\'\r\n  },\r\n    methods:{\r\n    source:_.debounce(function(event){\r\n      this.keyword = event.target.value;\r\n    }, 500)\r\n  },\r\n  computed:{\r\n    filteredKeyword:function(){\r\n      return this.keyword.toLowerCase();\r\n    },\r\n    filtered:function(){\r\n      if(this.filteredKeyword.length == 0){\r\n        return this.articleList;\r\n      }\r\n      \r\n      return this.articleList.filter((row)=>{\r\n        const keys = [\'title\', \'writer\', \'body\', \'regDate\'];\r\n        \r\n        const match = keys.some((key)=>{\r\n          if(row[key].toLowerCase().indexOf(this.filteredKeyword) > -1){\r\n          return true;\r\n        }\r\n          \r\n        });\r\n        return match;\r\n      });   \r\n    }\r\n  }\r\n});\r\n\r\n```\r\n',5,1,0,0,0),(42,'2021-02-17 22:07:05','2021-04-24 15:28:27','P.BLOG - 개발일지(상세페이지 markup 입력시 오류 수정 및 private, setter, getter 도입)','# 소스코드: 상세페이지 markup 입력시 오류 수정 및 private, setter, getter 도입\r\n\r\n### <Article.java>\r\n```java\r\n\r\npackage com.sbs.example.mysqlTextBoard.dto;\r\n\r\nimport java.util.Map;\r\n\r\nimport lombok.Data;\r\n\r\n@Data\r\npublic class Article {\r\n\r\n	public Article(Map<String, Object> articlesMap) {\r\n		this.id = (int) articlesMap.get(\"id\");\r\n		this.regDate = (String) articlesMap.get(\"regDate\");\r\n		this.updateDate = (String) articlesMap.get(\"updateDate\");\r\n		this.title = (String) articlesMap.get(\"title\");\r\n		this.body = (String) articlesMap.get(\"body\");\r\n		this.boardId = (int) articlesMap.get(\"boardId\");\r\n		this.memberId = (int) articlesMap.get(\"memberId\");\r\n		this.likesCount = (int) articlesMap.get(\"likesCount\");\r\n		this.commentsCount = (int) articlesMap.get(\"commentsCount\");\r\n		this.hitCount = (int) articlesMap.get(\"hitCount\");\r\n\r\n\r\n		if (articlesMap.containsKey(\"extra_memberName\")) {\r\n			this.extra_memberName = (String) articlesMap.get(\"extra_memberName\");\r\n		}\r\n\r\n	}\r\n\r\n	public Article() {\r\n\r\n	}\r\n\r\n	private int id;\r\n	private String regDate;\r\n	private String updateDate;\r\n	private String title;\r\n	private String body;\r\n	private int boardId;\r\n	private int memberId;\r\n	private String extra_memberName;\r\n	private int likesCount;\r\n	private int commentsCount;\r\n	private int hitCount;\r\n	public int getId() {\r\n		return id;\r\n	}\r\n\r\n}\r\n\r\n```\r\n\r\n### <BuildService.java>\r\n```java\r\n\r\n// 게시판 별 게시물 상세페이지 생성\r\n	private void buildArticleDetailPages() {\r\n		List<Board> boards = articleService.getBoards();\r\n\r\n		for (Board board : boards) {\r\n			List<Article> articles = articleService.getBoardArticlesByCodeForPrint(board.getCode());\r\n			int articlesSize = articles.size();\r\n\r\n			if (articlesSize <= 0) {\r\n				continue;\r\n			}\r\n			int beforeArticleIndex = 0;\r\n			int x = beforeArticleIndex;\r\n			int beforeArticleId = articles.get(x).getId();\r\n\r\n			// String head = getHeadHtml(\"article_detail\");\r\n			String sideBar = getSideBarHtml();\r\n			String topButton = Util.getFileContents(\"site_template/top-button.html\");\r\n			String foot = Util.getFileContents(\"site_template/foot.html\");\r\n\r\n			String template = Util.getFileContents(\"site_template/detail.html\");\r\n\r\n			System.out.println(\"= article 상세페이지 생성 =\");\r\n\r\n			for (Article article : articles) {\r\n\r\n				String head = getHeadHtml(\"article_detail\", article);\r\n\r\n				StringBuilder html = new StringBuilder();\r\n\r\n				html.append(head);\r\n				\r\n				String articleBody = article.getBody();\r\n				articleBody = articleBody.replaceAll(\"script\", \"t-script\");\r\n				\r\n				StringBuilder body = new StringBuilder();\r\n\r\n				body.append(\"<div class=\\\"article-detail-cell__board-name\\\">\");\r\n				body.append(\"<div>\");\r\n				body.append(\"<span>게시판 : </span><span>\" + board.getName() + \" 게시판</span>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"<div class=\\\"article-detail-cell__id\\\">\");\r\n				body.append(\"<div>\");\r\n				body.append(\"<span>번호 : </span><span>\" + article.getId() + \"</span>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"<div class=\\\"article-detail-cell__member-id\\\">\");\r\n				body.append(\"<div>\");\r\n				body.append(\"<span>작성자 : </span><span>\" + article.getExtra_memberName() + \"</span>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"<div class=\\\"article-detail-cell__reg-date\\\">\");\r\n				body.append(\"<div>\");\r\n				body.append(\"<span>작성일 : </span><span>\" + article.getRegDate() + \"</span>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"<div class=\\\"article-detail-cell__update-date\\\">\");\r\n				body.append(\"<div>\");\r\n				body.append(\"<span>수정일 : </span><span>\" + article.getUpdateDate() + \"</span>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"<div class=\\\"article-detail-cell__hitsCount\\\">\");\r\n				body.append(\"<div>\");\r\n				body.append(\"<span>조회수 : </span><span>\" + article.getHitCount() + \"</span>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"<div class=\\\"article-detail-cell__likesCount\\\">\");\r\n				body.append(\"<div>\");\r\n				body.append(\"<span>추천수 : </span><span>\" + article.getLikesCount() + \"</span>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"<div class=\\\"article-detail-cell__commentsCount\\\">\");\r\n				body.append(\"<div>\");\r\n				body.append(\"<span>댓글수 : </span><span>\" + article.getCommentsCount() + \"</span>\");\r\n				body.append(\"</div><br>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"<div class=\\\"article-detail-cell__title\\\">\");\r\n				body.append(\"<div>\");\r\n				body.append(\"<span>제목 : </span><span>\" + article.getTitle() + \"</span>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"<script type\\\"text/x-template\\\">\");\r\n				body.append(articleBody);\r\n				body.append(\"</script>\");\r\n				body.append(\"<div class=\\\"article-detail-cell__body height-70p toast-ui-viewer\\\">\");\r\n				body.append(\"<div>\");\r\n				//body.append(\"<span>\" + article.getBody() + \"</span>\");\r\n				body.append(\"</div>\");\r\n				body.append(\"</div><br>\");\r\n				body.append(\"<div class=\\\"article-detail-cell__tag\\\">\");\r\n				body.append(\"<nav># <a href=\\\"#\\\" target=\\\"_blank\\\">\" + \"tag.title\" + \"</a></nav>\");\r\n				body.append(\"</div><br><br>\");\r\n\r\n				// discus에게 정확한 페이지 경로 알려주기\r\n				String domainUrl = Container.appConfig.getSiteDomain();\r\n				String pageUrl = getArticleFileName(article);\r\n\r\n				// 상세페이지 하단 메뉴\r\n\r\n				StringBuilder pageMenuBody = new StringBuilder();\r\n\r\n				if (article.getId() > beforeArticleId) {\r\n					pageMenuBody.append(\"<div class=\\\"./\\\"><a href=\\\"article_detail_\" + articles.get(x - 1).getId() + \".html\"\r\n							+ \"\\\" class=\\\"hover-underline\\\">&lt 이전글</a></div>\");\r\n				}\r\n\r\n				pageMenuBody.append(\"<div class=\\\"./\\\"><i class=\\\"fas fa-th-list\\\"></i><a href=\\\"\" + board.getCode()\r\n						+ \"-list-1.html\" + \"\\\" class=\\\"hover-underline\\\"> 목록 </a></div>\");\r\n				if (x < articlesSize - 1) {\r\n					pageMenuBody.append(\"<div class=\\\"./\\\"><a href=\\\"article_detail_\" + articles.get(x + 1).getId() + \".html\"\r\n							+ \"\\\"class=\\\"hover-underline\\\">다음글 &gt</a></div>\");\r\n				}\r\n\r\n				String bodyTemplate = template.replace(\"[상세페이지 블록]\", body); // list 템플릿에 mainBody 끼워넣고\r\n				bodyTemplate = bodyTemplate.replace(\"[사이트 도메인]\", domainUrl);\r\n				bodyTemplate = bodyTemplate.replace(\"[사이트 이름.html]\", pageUrl);\r\n				html.append(bodyTemplate.replace(\"[상세페이지 하단 메뉴 블록]\", pageMenuBody)); // bodyTemplate에 다시 pageMenuBody\r\n																						// 끼워넣기\r\n				html.append(sideBar);\r\n				html.append(topButton);\r\n				html.append(foot);\r\n\r\n				String fileName = getArticleFileName(article);\r\n				String path = \"site/\" + fileName;\r\n\r\n				Util.writeFile(path, html.toString());\r\n\r\n				System.out.println(path + \" 생성\");\r\n				x++;\r\n				beforeArticleId = articles.get(x - 1).getId();\r\n\r\n			}\r\n			System.out.println(\"= article 상세페이지 생성 종료 =\");\r\n\r\n		}\r\n	}\r\n\r\n```\r\n\r\n',5,1,0,0,0),(43,'2021-02-17 22:09:20','2021-04-24 15:28:27','P.BLOG - 개발일지(toast ui 플러그인 추가(youtube, codepen))','# toast ui 플러그인 추가(youtube, codepen)\r\n\r\n### <app.js>\r\n```javascript\r\n\r\nfunction ArticleDetail__Body__init() {\r\n	if (toastui === undefined) {\r\n		return;\r\n	}\r\n\r\n\r\n/* 유튜브 함수 시작 */\r\n\r\n	//유튜브 영상임을 감지하고 공간을 형성하는 함수\r\n	function youtubePlugin() {\r\n		toastui.Editor.codeBlockManager.setReplacer(\'youtube\', youtubeId => {\r\n			// Indentify multiple code blocks\r\n			const wrapperId = `yt${Math.random()\r\n				.toString(36)\r\n				.substr(2, 10)}`;\r\n\r\n			// Avoid sanitizing iframe tag\r\n			setTimeout(renderYoutube.bind(null, wrapperId, youtubeId), 0);\r\n\r\n			return `<div id=\"${wrapperId}\"></div>`;\r\n		});\r\n	}\r\n	//유튜브 영상 렌더링 함수\r\n	function renderYoutube(wrapperId, youtubeId) {\r\n		const el = document.querySelector(`#${wrapperId}`);\r\n\r\n		el.innerHTML = `<div class=\"toast-ui-youtube-plugin-wrap\"><iframe src=\"https://www.youtube.com/embed/${youtubeId}\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>`;\r\n	}\r\n	/* 유튜브 함수 끝 */\r\n	\r\n	\r\n	\r\n	/* codepen 함수 시작 */\r\nfunction codepenPlugin() {\r\n  toastui.Editor.codeBlockManager.setReplacer(\'codepen\', url => {\r\n    const wrapperId = `yt${Math.random().toString(36).substr(2, 10)}`;\r\n\r\n    // Avoid sanitizing iframe tag\r\n    setTimeout(renderCodepen.bind(null, wrapperId, url), 0);\r\n\r\n    return `<div id=\"${wrapperId}\"></div>`;\r\n  });\r\n}\r\n\r\nfunction renderCodepen(wrapperId, url) {\r\n  const el = document.querySelector(`#${wrapperId}`);\r\n  \r\n  var urlParams = new URLSearchParams(url.split(\'?\')[1]);\r\n  var height = urlParams.get(\'height\');\r\n\r\n  el.innerHTML = `<div class=\"toast-ui-codepen-plugin-wrap\"><iframe height=\"${height}\" scrolling=\"no\" src=\"${url}\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\"></iframe></div>`;\r\n}\r\n/* codepen 함수 끝 */\r\n	\r\n	\r\n\r\n\r\n/* toastui-viewr 함수 시작 */\r\nfunction EditorViewer__init() {\r\n	  $(\'.toast-ui-viewer\').each(function(index, node) {\r\n	    var initialValue = $(node).prev().html().trim().replace(/t-script/gi, \'script\');\r\n\r\n//	var body = document.querySelector(\'.article-detail-cell__body > div > span\');\r\n//	var initValue = body.innerHTML.trim();\r\n\r\n	\r\n	var viewer = new toastui.Editor.factory({\r\n		el: node,\r\n		initialValue: initialValue,\r\n		viewer: true,\r\n		plugins: [toastui.Editor.plugin.codeSyntaxHighlight, youtubePlugin, codepenPlugin]\r\n	});\r\n});\r\n}\r\n	EditorViewer__init();\r\n}\r\n\r\nArticleDetail__Body__init();\r\n\r\n/* toastui-viewr 함수 끝 */\r\n\r\n\r\n```\r\n\r\n',5,1,0,0,0),(44,'2021-02-17 22:52:06','2021-04-24 15:28:27','3강. display','# 1. display 개념\r\n\r\n## display란?\r\n\r\n - **display** 속성은 **요소를 어떻게 보여줄지를 결정**한다.\r\n - 주로 **4가지 속성값**이 쓰이는데, 태그마다 기본값이 다르다.\r\n\r\n```\r\nnone : 보이지 않음\r\nblock : 블록 박스\r\ninline : 인라인 박스\r\ninline-block : block과 inline의 중간 형태\r\n```\r\n<br>\r\n\r\n# 2. display 속성\r\n## none\r\n- 요소를 렌더링하지 않도록 설정한다. 즉, 해당 요소를 **보이지 않게**한다.\r\n- visibility 속성을 hidden으로 설정한 것과 달리, **영역도 차지하지 않는다.**\r\n- 즉, **visibility: hidden;** 은 **눈에 보이진 않지만 자리를 차지**하고 있어 주변 엘리먼트들에게 **영향을 미치는** 반면 **display:none;** 는 아예 **자리도 차지하지 않는다**는 차이점이 있다.\r\n(visibility: hidden; 과 display:none;은 자주 사용하는 속성이니 차이를 잘 알아두도록 하자)\r\n<br>\r\n## block\r\n - 기본적으로 **가로 영역을 모두 꽉 채우며**, block 요소 다음에 등장하는 엘리먼트는 **줄바꿈**이 된 것처럼 보인다. \r\n - 즉, 말그대로 블록하나가 가로를 모두 채우면서 자리를 차지하는 것이다.\r\n -  **width, height 속성을 지정 할 수 있으며**, block 요소 뒤에 등장하는 엘리먼가 그 이전 block 요소에 오른쪽에 배치될 수 있어도 항상 다음 줄에 렌더링된다.\r\n<br>\r\n## inline\r\n - block 과 달리 **줄 바꿈이 되지 않고**, **width와 height를 지정 할 수 없다.** \r\n - inline 요소 뒤에 나오는 엘리먼트는 줄바꿈 되지 않고 **바로 오른쪽에 붙는다.**\r\n - **a, img, span** 엘리먼트는 기본적으로 display가 inline 이다.\r\n - inline요소에는 **margin, padding** 속성이 제대로 적용되지 않는다.\r\n <br>\r\n## inline-block\r\n - block과 inline의 중간 형태라고 볼 수 있는데, **줄 바꿈이 되지 않지만 크기를 지정 할 수 있다.**\r\n - Internet Explorer 7 이하에서는 사용할 수 없다.\r\n<br>\r\n\r\n# 3. block vs inline-block 비교(쉬운 ver.)\r\n## block vs inline-block\r\n```\r\nblock\r\n-너비 : 지정되지 않은 경우 자동으로 최대한 유연하게 늘어난다\r\n-높이: 지정되어 있지 않은 경우 최소한으로 유연하게 줄어든다.\r\n-줄사용 혼자: 무조건 한 줄을 혼자 사용한다.\r\n\r\n\r\ninline-block\r\n-너비 : 지정되어 있지 않은 경우 최소한으로 유연하게 줄어든다.\r\n-높이: 지정되어 있지 않은 경우 최소한으로 유연하게 줄어든다.\r\n-줄사용 혼자: 가능하다면 한 줄을 여럿이 쓴다. 불가능하면 줄바꿈\r\n\r\n\r\n```\r\n\r\n## block, inline-block 예제\r\n\r\n![image](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FLTPdj%2FbtqN8eWN5st%2FtpCDaHDV7sf2X89u0CkHx1%2Fimg.png)\r\n\r\n### < HTML >\r\n```html\r\n\r\n<div>1</div>\r\n<div2>2</div2>\r\n<section>3</section>\r\n<nav>4</nav>\r\n\r\n```\r\n\r\n### < CSS >\r\n\r\n```css\r\n\r\ndiv, section, article, nav {\r\n    height:100px;\r\n    width:100px;\r\n}\r\n\r\ndiv {\r\n    background-color:red;\r\n}\r\n\r\ndiv2 {\r\n    background-color:green;\r\n    display:inline-block; \r\n}\r\n\r\nsection {\r\n    background-color:blue;\r\n    display:inline-block;\r\n}\r\n\r\nnav {\r\n  background-color:yellow;\r\n\r\n}\r\n\r\n```\r\n\r\n# 4. display 속성 정리표\r\n\r\n| 종류 | inline-block(=inline) | block | none |\r\n| --- | --- | --- | --- |\r\n| 너비 | 최소한으로 줄어든다. | 최대한으로 넓어진다. | 없어진다. |\r\n| 본질 | 글자화 | 블록화 | - |\r\n| 줄 차지 | 한 줄에 최대한 여러개가 나온다. | 한 줄을 무조건 혼자 쓴다. | - |\r\n| 정렬 | 부모의 text-align에 의해서 정렬 | 스스로 margin-left, margin-right를 사용해서 정렬 | - |\r\n\r\n\r\n(참고: https://ofcourse.kr/css-course/display-속성)',3,1,0,0,0),(45,'2021-02-22 18:48:06','2021-04-24 15:28:27','P.JSP - 개발일지(회원 비밀번호 관련 알림)','\r\n# 회원 비밀번호 관련 알림 기능 구현\r\n\r\n- [x] 회원이 임시비밀번호 사용중인 경우 상단에 알림바 상시 노출\r\n  - [x] + 알림창 노출 후 회원정보 페이지로 자동 이동\r\n  - [x] 임시비밀번호 사용 회원이 비밀번호 변경하면 알림바 노출 중지\r\n\r\n- [x] 회원이 비밀번호 변경 후 90일 지났을 경우 로그인 시 알림창 노출\r\n  - [x] 회원이 비밀번호 변경하면 알림창 노출 중지\r\n<br>\r\n\r\n## 영상\r\n\r\n```youtube\r\nU40oxdto1dE\r\n```\r\n<br>\r\n## 주요소스코드\r\n\r\n### DispatcherServlet.java\r\n```java\r\n\r\n/* 세션에 로그인 정보 담기 시작 */\r\n		int loginedMemberId = 0;\r\n		boolean isLogined = false;\r\n		Member loginedMember = null;\r\n		boolean isUsingTempPassword = false;\r\n\r\n		HttpSession session = request.getSession();\r\n\r\n\r\n		if (session.getAttribute(\"loginedMemberId\") != null && (int) session.getAttribute(\"loginedMemberId\") > 0) {\r\n			loginedMemberId = (int) session.getAttribute(\"loginedMemberId\");\r\n			isLogined = true;\r\n			loginedMember = Container.memberService.getMemberById(loginedMemberId);\r\n			\r\n			\r\n			/// 임시패스워드 사용 여부 확인\r\n			isUsingTempPassword = Container.memberService.getIsUsingTempPassword(loginedMemberId);\r\n			/// 세션에 임시패스워드 사용중인 회원 정보 담기\r\n			if(isUsingTempPassword) {\r\n				isUsingTempPassword = true;\r\n			}\r\n\r\n		}\r\n\r\n		request.setAttribute(\"loginedMemberId\", loginedMemberId);\r\n		request.setAttribute(\"isLogined\", isLogined);\r\n		request.setAttribute(\"loginedMember\", loginedMember);\r\n		request.setAttribute(\"isUsingTempPassword\", isUsingTempPassword);\r\n		\r\n		/* 세션에 로그인 정보 담기 끝 */\r\n\r\n\r\n```\r\n\r\n\r\n<br>\r\n### MemberService.java\r\n```java\r\n\r\n// 로그인\r\n	public String doLogin(HttpServletRequest request, HttpServletResponse response) {\r\n		String loginId = request.getParameter(\"loginId\");\r\n		if (Util.isEmpty(loginId)) {\r\n			return msgAndBack(request, \"아이디를 입력하세요.\");\r\n		}\r\n		// String loginPw = request.getParameter(\"loginPw\");\r\n		// 암호화된 비밀번호 값을 받기\r\n		String loginPw = request.getParameter(\"loginPwReal\");\r\n		if (Util.isEmpty(loginPw)) {\r\n			return msgAndBack(request, \"비밀번호를 입력하세요.\");\r\n		}\r\n\r\n		Member member = memberService.getMemberByLoginId(loginId);\r\n\r\n		// 해당 loginId가 등록된 id인지 확인\r\n		if (member == null) {\r\n			return msgAndBack(request, \"해당 아이디는 없는 아이디입니다. 아이디를 확인하세요.\");\r\n		}\r\n\r\n		// 해당 loginPw가 일치하는지 확인\r\n		if (member.getLoginPw().equals(loginPw) == false) {\r\n			return msgAndBack(request, \"비밀번호가 틀렸습니다.\");\r\n		}\r\n\r\n		// 로그인 여부를 세션에 저장\r\n		HttpSession session = request.getSession();\r\n		session.setAttribute(\"loginedMemberId\", member.getId());\r\n\r\n		/* 임시패스워드 사용 여부 확인(개선) 시작 */\r\n		boolean isUsingTempPassword = memberService.getIsUsingTempPassword(member.getId());\r\n\r\n		// 임시패스워드 사용중이면 알림창 보여주고 회원정보로 이동\r\n		if (isUsingTempPassword) {\r\n			return msgAndReplaceUrl(request, \"현재 임시비밀번호를 사용 중입니다. 비밀번호를 변경해 주세요.\", \"../member/showMyPage\");\r\n		}\r\n		/* 임시패스워드 사용 여부 확인(개선) 끝 */\r\n\r\n		/* 비밀번호 변경날짜 90일 이상 지났는지 여부 확인 시작 */\r\n		String limitDate = Container.attrService.getValue(\"member__\" + member.getId() + \"__extra__isPwChangeDateLimit\");\r\n\r\n		// 날짜 포멧 셋팅\r\n		SimpleDateFormat sdf = new SimpleDateFormat(\"yyMMdd\");\r\n		// Calendar생성\r\n		Calendar cal = Calendar.getInstance();\r\n		// 오늘 날짜 가져오기\r\n		Date date = new Date();\r\n		// 오늘 날짜 셋팅\r\n		cal.setTime(date);\r\n		String todayDate = sdf.format(cal.getTime());\r\n\r\n		// 오늘 날짜와 제한기간 날짜 비교\r\n		int compare = todayDate.compareTo(limitDate);\r\n\r\n		/* 비밀번호 변경날짜 90일 이상 지났는지 여부 확인 끝 */\r\n\r\n		\r\n		// 로그인 알림창 보여주고 화면으로 이동\r\n		String replaceUrl = \"../home/main\";\r\n\r\n		if (Util.isEmpty(request.getParameter(\"nextUrlAfterLogin\")) == false) {\r\n			replaceUrl = request.getParameter(\"nextUrlAfterLogin\");\r\n		}\r\n		\r\n		if (Util.isEmpty(request.getParameter(\"beforeUrl\")) == false) {\r\n			replaceUrl = request.getParameter(\"beforeUrl\");\r\n		}\r\n		\r\n		// 만약 오늘날짜가 지정날짜보다 크거나 같으면 기간만료 알림창 보여주고 메인으로 이동\r\n		if (compare >= 0) {\r\n			return msgAndReplaceUrl(request, \"비밀번호 변경 후 90일이 지났습니다. 비밀번호를 변경해 주세요.\", replaceUrl);\r\n		}\r\n\r\n		return msgAndReplaceUrl(request, member.getNickname() + \", 님 반갑습니다.\", replaceUrl);\r\n\r\n	}\r\n\r\n```   \r\n<br>    \r\n### head.jsp\r\n```html\r\n\r\n<!-- 탑 헤더 시작 -->\r\n		<section class=\"head-bar-section visible-md-up head-nav nav-down\">\r\n			<div class=\"head-bar con flex flex-jc-fe\">\r\n				<c:if test=\"${isLogined}\">\r\n				<c:if test=\"${isUsingTempPassword}\">\r\n					<div style=\"color:red; font-weight:bold; width:50%;\">\r\n						임시 비밀번호를 사용중입니다. 비밀번호를 변경해 주세요.\r\n					</div>\r\n				</c:if>\r\n					<div class=\"head-bar-button\">\r\n						<a href=\"../home/main\" title=\"Home\">홈</a>\r\n					</div>\r\n					<div class=\"head-bar-button\">\r\n						<a href=\"../member/showMyPage\" title=\"MyPage\">회원정보</a>\r\n					</div>\r\n					<div class=\"head-bar-button\" title=\"Logout\">\r\n						<a href=\"../member/doLogout?beforeUrl=${encodedCurrentUrl}\">로그아웃</a>\r\n					</div>\r\n				</c:if>\r\n				<c:if test=\"${isLogined == false}\">\r\n					<div class=\"head-bar-button\" title=\"Home\">\r\n						<a href=\"../home/main\">홈</a>\r\n					</div>\r\n					<div class=\"head-bar-button\" title=\"Login\">\r\n						<a href=\"../member/doLoginForm?beforeUrl=${encodedCurrentUrl}\">로그인</a>\r\n					</div>\r\n					<div class=\"head-bar-button\" title=\"Sign-up\">\r\n						<a href=\"../member/doJoinForm\">회원가입</a>\r\n					</div>\r\n				</c:if>\r\n			</div>\r\n		</section>\r\n<!-- 탑 헤더 끝 -->\r\n\r\n```',6,1,0,0,0),(46,'2021-02-22 18:55:41','2021-04-24 15:28:28','P.JSP - 개발일지(로그인, 로그아웃 후 방문중이던 페이지로 다시 돌아가기)','\r\n# 로그인, 로그아웃 후 방문중이던 페이지로 다시 돌아가기\r\n\r\n- [x] 로그인, 로그아웃 성공 후 이전 페이지로 돌아가기\r\n\r\n<br>\r\n\r\n## 영상\r\n\r\n```youtube\r\ndUr4th0MFKw\r\n```\r\n<br>\r\n## 주요소스코드\r\n\r\n### DispatcherServlet.java\r\n```java\r\n\r\n/// 현재 이동하려 시도했던 경로 저장(로그인 안되어있어서 취소된 경로)\r\n		String currentUrl = request.getRequestURI();\r\n\r\n		if (request.getQueryString() != null) {\r\n			currentUrl += \"?\" + request.getQueryString();\r\n		}\r\n		\r\n		String encodedCurrentUrl = Util.getUrlEncoded(currentUrl);\r\n\r\n		request.setAttribute(\"currentUrl\", currentUrl);\r\n		request.setAttribute(\"encodedCurrentUrl\", encodedCurrentUrl);\r\n\r\n\r\n```\r\n\r\n\r\n<br>\r\n### MemberService.java\r\n```java\r\n\r\n// 로그인\r\n	public String doLogin(HttpServletRequest request, HttpServletResponse response) {\r\n		String loginId = request.getParameter(\"loginId\");\r\n		if (Util.isEmpty(loginId)) {\r\n			return msgAndBack(request, \"아이디를 입력하세요.\");\r\n		}\r\n		// String loginPw = request.getParameter(\"loginPw\");\r\n		// 암호화된 비밀번호 값을 받기\r\n		String loginPw = request.getParameter(\"loginPwReal\");\r\n		if (Util.isEmpty(loginPw)) {\r\n			return msgAndBack(request, \"비밀번호를 입력하세요.\");\r\n		}\r\n\r\n		Member member = memberService.getMemberByLoginId(loginId);\r\n\r\n		// 해당 loginId가 등록된 id인지 확인\r\n		if (member == null) {\r\n			return msgAndBack(request, \"해당 아이디는 없는 아이디입니다. 아이디를 확인하세요.\");\r\n		}\r\n\r\n		// 해당 loginPw가 일치하는지 확인\r\n		if (member.getLoginPw().equals(loginPw) == false) {\r\n			return msgAndBack(request, \"비밀번호가 틀렸습니다.\");\r\n		}\r\n\r\n		// 로그인 여부를 세션에 저장\r\n		HttpSession session = request.getSession();\r\n		session.setAttribute(\"loginedMemberId\", member.getId());\r\n\r\n		/* 임시패스워드 사용 여부 확인(개선) 시작 */\r\n		boolean isUsingTempPassword = memberService.getIsUsingTempPassword(member.getId());\r\n\r\n		// 임시패스워드 사용중이면 알림창 보여주고 회원정보로 이동\r\n		if (isUsingTempPassword) {\r\n			return msgAndReplaceUrl(request, \"현재 임시비밀번호를 사용 중입니다. 비밀번호를 변경해 주세요.\", \"../member/showMyPage\");\r\n		}\r\n		/* 임시패스워드 사용 여부 확인(개선) 끝 */\r\n\r\n		/* 비밀번호 변경날짜 90일 이상 지났는지 여부 확인 시작 */\r\n		String limitDate = Container.attrService.getValue(\"member__\" + member.getId() + \"__extra__isPwChangeDateLimit\");\r\n\r\n		// 날짜 포멧 셋팅\r\n		SimpleDateFormat sdf = new SimpleDateFormat(\"yyMMdd\");\r\n		// Calendar생성\r\n		Calendar cal = Calendar.getInstance();\r\n		// 오늘 날짜 가져오기\r\n		Date date = new Date();\r\n		// 오늘 날짜 셋팅\r\n		cal.setTime(date);\r\n		String todayDate = sdf.format(cal.getTime());\r\n\r\n		// 오늘 날짜와 제한기간 날짜 비교\r\n		int compare = todayDate.compareTo(limitDate);\r\n\r\n		/* 비밀번호 변경날짜 90일 이상 지났는지 여부 확인 끝 */\r\n\r\n		\r\n		// 로그인 알림창 보여주고 화면으로 이동\r\n		String replaceUrl = \"../home/main\";\r\n\r\n		if (Util.isEmpty(request.getParameter(\"nextUrlAfterLogin\")) == false) {\r\n			replaceUrl = request.getParameter(\"nextUrlAfterLogin\");\r\n		}\r\n		\r\n		if (Util.isEmpty(request.getParameter(\"beforeUrl\")) == false) {\r\n			replaceUrl = request.getParameter(\"beforeUrl\");\r\n		}\r\n		\r\n		// 만약 오늘날짜가 지정날짜보다 크거나 같으면 기간만료 알림창 보여주고 메인으로 이동\r\n		if (compare >= 0) {\r\n			return msgAndReplaceUrl(request, \"비밀번호 변경 후 90일이 지났습니다. 비밀번호를 변경해 주세요.\", replaceUrl);\r\n		}\r\n\r\n		return msgAndReplaceUrl(request, member.getNickname() + \", 님 반갑습니다.\", replaceUrl);\r\n\r\n	}\r\n\r\n```   \r\n\r\n<br>    \r\n### doLoginForm.jsp\r\n```html\r\n\r\n<!-- 메인-로그인 페이지 시작 -->\r\n      <div class=\"section-login min-height-50vh flex flex-jc-c flex-ai-c\">\r\n\r\n        <form name=\"form\" onsubmit=\"check(this); return false;\" action=\"doLogin\" method=\"POST\">\r\n          <input type=\"hidden\" name=\"nextUrlAfterLogin\" value=\"${param.nextUrlAfterLogin}\">\r\n          <input type=\"hidden\" name=\"loginPwReal\">\r\n          <input type=\"hidden\" name=\"beforeUrl\" value=\"${param.beforeUrl}\">\r\n          <div class=\"login-title\">\r\n           LOGIN\r\n          </div>\r\n          <div class=\"login_cell__title\">\r\n            <span>아이디</span>\r\n          </div>\r\n          <div class=\"login_cell__body\">\r\n            <input type=\"text\" name=\"loginId\" maxlength=\"50\" placeholder=\"ID\">\r\n          </div>\r\n          <div class=\"login_cell__title\">\r\n            <span>비밀번호</span>\r\n          </div>\r\n          <div class=\"login_cell__body\">\r\n            <input type=\"password\" name=\"loginPw\" maxlength=\"50\" placeholder=\"Password\">\r\n          </div>\r\n          <div class=\"loginInput_cell\">\r\n            <div>\r\n            <button class=\"btn btn-go\" type=\"submit\"><i class=\"fas fa-sign-in-alt\"></i> Login</button>\r\n            <button class=\"btn btn-back\" type=\"button\" onclick=\"history.back();\"><i class=\"fas fa-undo\"></i> Back</button>\r\n            </div>\r\n            <div>\r\n            <a href=\"../member/doFindLoginIdForm\">ID 찾기</a>\r\n           / <a href=\"../member/doFindLoginPwForm\">PW 찾기</a>\r\n              </div>\r\n            </div>\r\n        </form>\r\n      </div>\r\n      <!-- 메인-로그인 페이지 끝 -->\r\n\r\n```',6,1,0,0,0),(47,'2021-03-10 11:15:40','2021-04-24 15:28:28','[GitHub] Github 간단 개념, 사용법','# 1. Github 간단 개념\r\n\r\n## Github란?\r\n - 깃허브는 협업,개발을 지원하는 소프트웨어 버전관리지원 서비스이다.\r\n - 깃허브를 사용하면 다른사람들과 프로젝트를 공유하여 작업할 수 있다.\r\n - 소스를 공유하고 협업, 개발할 수 있는 버전 관리 시스템인 \'깃(Git)\'에 프로젝트 관리 지원 기능을 확장하여 제공하는 웹 호스팅 서비스이다.(출처: 네이버사전)\r\n- Git? 협업도구 및 프로그램 버전관리 도구\r\n- commit 기록이 쌓임(장바구니 개념?)\r\n- push하면 한번에 저장소에 업로드(최종적으로 업로드하는 것)\r\n<br>\r\n\r\n# 2. Github 사용법\r\n## Git 명령어 및 간단 사용법\r\n - git 프로그램 그 자체를 최신버전으로 업데이트: **git update-git-for-windows**\r\n - 프로젝트 폴더에 git log폴더를 만드는 것? : **git init**\r\n - 초기 git 사용자 설정: **git config --global user.name \"이름\"**\r\n - 초기 git 사용자 설정:  **git config --global user.email \"메일주소\"**\r\n - git 저장소 연결: **git remote add origin 주소**\r\n - git 저장소 연결 현황보기: **git remote -v**\r\n - git 저장소 연결 초기화: **git remote remove origin**\r\n - 선택한 파일만 커밋(장바구니 담기): **git add 파일주소**\r\n - 모든 변경 항목 커밋(장바구니 담기): **git add .**\r\n - 장바구니 초기화: **git reset head**\r\n - git commt하기: **git commt -m \"파일명\"**\r\n - 저장소에 git push하기: **git push origin master**\r\n - vim(편집기): **vim-**\r\n   - 동작을 하려면: **a**\r\n   - 나가기: **esc** \r\n   - 저장하지 않고 나가기: **:q!**\r\n   - 저장하고 나가기: **wq!**\r\n - 과거 데이터로 이동하기: **git checkout -f 커밋번호**  (이때는 아무렇게나 수정해도 괜찮음, 복기용)\r\n - 다시 현재로 돌아오기: **git checkout -f master**\r\n<br>\r\n## Github에서 간단하게 저장소 & 변경데이터 가져오기(실무 응용 ver.)\r\n - git 최신화부터 해야 한다: 최신화 전에 작업을 해버리면 삭제했다가 다시 불러와 연결해야 함\r\n - 명령어: git pull origin master \r\n - \"already up to data\"라는 것은 기존과 바뀐 것이 없다는 의미\r\n - pull이라는 개념은 가져오기와 동시에 합병이 이루어지는 방식\r\n - 협업 시에 자주자주 최신화 해주는 것이 좋음(변화를 최소화하기 위해) \r\n<br>\r\n## Github에서 저장소(repository) 가져오기(FM ver.)\r\n\r\n1. STS 실행\r\n2. window -> perspective -> open perspective -> other -> \'Git\'\r\n3. Git Repositories에서 빈공간에 우클릭 clone a git repositories\r\n4. URL에 가져올 git repositories 주소 붙여넣기\r\n5. workspace로 저장 위치 설정\r\n6. Git Repositories에서 가져온 저장소 우클릭 -> import Projects 클릭\r\n<br>\r\n## Github에서 변경 데이터 가져오기(최근 작업한 내용 기존 저장소에 패치)(FM ver.)\r\n\r\n1. STS 실행\r\n2. Git Repositories 원하는 저장소 우클릭 Fetch From Origin\r\n3. configue -> save and fetch\r\n4. 생성된 브런치 확인\r\n5. 브런치 우클릭 Merge',7,1,0,0,0),(48,'2021-03-10 11:37:56','2021-04-24 15:28:28','[Compiler] 컴파일러(feat. 인터프리터)','# 컴파일러(feat. 인터프리터)\r\n\r\n# 1. 컴파일러란?\r\n - 프로그램을 짠다는 것은 사용하는 **프로그래밍 언어의 문법에 맞게 명령들을 작성하는 것**이다.\r\n - 이렇게 언어의 문법에 맞게 명령들을 기술한 파일을 **원시 파일(소스파일; source file)** 이라고 한다.\r\n - 이런 소스코드들은 **고급언어**로 작성되어 있기 때문에 “0”과 “1”이라는 이진수로 구성된 **저급언어**, 즉, **기계어**로 통신하는 컴퓨터는 소스코드를 바로 이해할 수 없다.\r\n - 그래서 **소스코드를 컴퓨터가 이해할 수 있게 기계어로 번역하는 작업을 컴파일(Compile)** 이라 하며, 이러한 **작업을 수행하는 프로그램을 컴파일러(Compiler)** 라고 한다. \r\n```\r\n<개발과정>\r\n\r\n소스코드작성 -> 오브젝트파일(목적파일) -> 실행파일 -> 실행\r\n```\r\n<br>\r\n# 2. 컴파일러 구조\r\n - 컴파일러는 크게 **1)어휘 분석, 2)구문 분석, 3)의미 분석, 4)코드 생성** 단계로 나뉜다.(그림 참고 - 일반적인 컴파일러의 구조)\r\n\r\n![image](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FK5vMn%2FbtqLuBa6AY3%2F864sKLjBjVqRTcbQDEOkcK%2Fimg.png)\r\n\r\n## 1단계) 어휘 분석(Lexical analysis)\r\n - 컴파일러의 **첫 번째 단계**는 소스 코드를 **정규 문법(regular grammar)에 따라 토큰(token)의 집합으로 변환하는 것**이다. 이를 **어휘 분석** 또는 **스캐닝(scanning)** 이라 한다.\r\n - 예를 들어, \"Lexical analysis is the first step of compiler\"라는 문장에서 \'f\', \'i\', \'r\', \'s\', \'t\'를 따로 놓으면 어떠한 의미도 없지만, \"first\"라는 하나의 문자열로 보면 \"첫번째\"라는 의미를 갖게 된다.\r\n - 쉽게 말해, 어휘 분석은 소스 코드에서 \"first\", ”step”과 같이 의미 있는 조각을 검출하는 단계이다.\r\n```\r\n어휘 분석 단계에서 검출된 의미 있는 조각을 어휘항목(lexeme)이라고 하며, 어휘 분석기는 검출된 어휘항목을 참조하여 토큰을 생성한다.\r\n```\r\n\r\n\r\n## 2단계) 구문 분석(Syntax analysis)\r\n\r\n- 어휘 분석 다음 단계는 **소스 코드의 문법을 검사**하는 **구문 분석** 또는 **파싱(parsing)** 이라 한다.\r\n- 구문 분석기는 어휘 분석기에서 출력한 토큰들을 이용하여 소스 코드의 문법 구조를 서술하는 구문 트리(syntax tree)를 생성한다. 구문 트리는 어휘 분석기에서 생성한 토큰들을 노드로 갖는 트리로써, 토큰 간의 우선순위 및 토큰간의 결합 관계 등과 같은 속성을 나타낸다.\r\n- 구문 분석의 목적은 토큰 간의 관계가 올바르게 생성되었는지를 검사하는 것이다. 예를 들어, \"I is a student\"라는 문장이 입력되었을 때, 어휘 분석기는 <1인칭 주어, 1>과 <3인칭 동사, 2>라는 토큰을 생성하고, 구문 분석기에 전달한다. 구문 분석기에서는 1인칭 주어와 3인칭 동사가 사용된 것이 잘못되었음을 인식하여 구문 에러를 출력한다.\r\n\r\n```\r\n즉, 토큰 간의 관계를 서술하고, 소스 코드에 잘못된 토큰 간의 관계가 있는지를 검사하는 것이 구문 분석의 목적이다.\r\n```\r\n\r\n## 3단계) 의미 분석(Semantic analysis)\r\n\r\n- 의미 분석 단계에서는 구문 트리와 심볼 테이블에 있는 정보를 이용하여 **소스 코드가 언어 정의에 의미적으로 부합하는지를 검사**한다. \r\n- 의미 분석의 중요한 기능은 **타입 검사(type checking)** 이다. 컴파일러는 타입 검사를 수행하면서 피연산자가 연산자에 부합하는지를 검사한다.\r\n- 의미 분석기는 정수와 문자열의 덧셈, 값을 0으로 나누는 행동 등과 같이 의미적으로 올바르지 않은 코드의 존재 유무를 검사한다. \r\n- 예를 들어, \"The earth revolves around the moon\"라는 문장은 영어라는 인간언어에 존재하는 어휘항목만을 사용하였고, 주어와 동사가 일치하며 \"revolve\" 다음에 올 수 있는 \"around\"라는 부사까지 올바르게 사용하였지만, 의미적으로는 \"지구가 달을 공전한다\"는 틀린 문장이다.\r\n\r\n```\r\n의미 분석 단계에서는 구문 트리와 심볼 테이블에 있는 정보를 이용하여 소스 코드가 언어 정의에 의미적으로 부합하는지를 검사한다. \r\n```\r\n \r\n## 4단계) 코드 생성 (Code generation)\r\n\r\n- 1,2,3 단계를 통해 분석된 소스 코드를 **목표 기계에 맞는 어셈블리어나 기계어로 변환하는 단계**이다. \r\n- 컴파일 타임 바인딩을 이용하는 시스템의 경우에는 코드 생성 단계에서 프로그램의 기억 장소 할당이 이루어진다.\r\n\r\n```\r\n1,2,3 단계를 통해 분석된 소스 코드를 목표 기계에 맞는 어셈블리어나 기계어로 변환하는 단계이다. \r\n```\r\n\r\n\r\n# 3. 컴파일러 언어 vs 인터프리터 언어\r\n\r\n##### 모든 프로그래밍 언어는 ‘컴파일러 언어’ 또는 ‘인터프리터 언어’를 사용한다. 쉽게 말해 언어를 처리하는 방식이 크게 2가지로 나뉘는 것이다.\r\n\r\n\r\n## 1) 컴파일러 언어\r\n - 소개 : **명령들을 한꺼번에 실행하는 방식**, 프로그램 코드를 다 적은 후 한꺼번에 검사하는 방식\r\n - Good : 한번 컴파일한 이후에는 **실행이 빠르고** 더 이상의 변환이 필요없기 때문에 **효율적임**\r\n - Bad : 한번에 모두 처리하는 방식이기 때문에 **최초 컴파일시에는 오래 걸릴 수 있고**, **메모리도 많이 차지**할 수 있음\r\n - 종류 : **C, C++, Java**와 같은 언어가 대표적인 컴파일 언어\r\n\r\n## 2) 인프리리터 언어\r\n - 소개 : **코드를 한줄씩 읽어가면서 명령을 처리하는 방식**, 한줄이 바뀔 때마다 즉시 검사를 수행하는 방식\r\n - Good : 명령을 잘못 입력하면 **바로 수정이 가능**하다는 장점이 있음\r\n - Bad : 한문장씩 명령을 내리는 방식이므로 **속도는 컴파일러에 비해 느린편**\r\n - 종류 : **python, R, Ruby**와 같은 언어가 대표적인 인터프리터 언어\r\n\r\n\r\n\r\n[참고1 : https://to2.kr/bHr]\r\n[참고2 : https://to2.kr/bHs]\r\n[참고3 : https://untitledtblog.tistory.com/9]\r\n[참고4 : https://blog.naver.com/zosl1004/221242373322]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',7,1,0,0,0),(49,'2021-03-10 11:58:45','2021-04-24 15:28:28','[HTTP, HTTPS, SSL] HTTP, HTTPS 그리고 SSL','# HTTP, HTTPS\r\n\r\n## HTTP\r\n - Hypertext Transfer Protocol\r\n - Hypertext: 문서와 문서간 링크로 연결된 체계,양식 -> html\r\n - **즉, html을 전송하기 위한 통신규약이다. => HTTP**\r\n\r\n## HTTPS\r\n - HTTP와 유사, S는 Over Secure Socket Layer의 Secure\r\n - **즉, 보안(Secure)이 강화된 HTTP라고 생각하면 된다.**\r\n - 제 3자가 정보를 변조하거나 감청하기 어려움\r\n\r\n```\r\n<HTTPS vs HTTP>\r\nHTTPS는 HTTP와 유사하지만 보안이 더 강화된 것이다.\r\n```\r\n\r\n# SSL\r\n\r\n## SSL\r\n - HTTP와 SSL은 크게 보면 같지만 세부적으론 다르다.\r\n - HTTP와 SSL의 계층은 서로 다르다.\r\n - SSL이 더 포괄적인 개념이고 그 위에서 동작하는 서비스가 HTTP이다.\r\n - **HTTP가 SSL을 이용하게 되면 HTTPS가 되는 개념이다.**\r\n\r\n```\r\n<SSL vs TLS>\r\nSSL이 TLS로 이름이 바뀌었지만 SSL이 더 잘 사용되는 명칭\r\n결론적으로, SSL과 TLS는 같은 말이다.\r\n```\r\n\r\n## SSL 디지털 인증서\r\n- 클라이언트와 서버간의 통신을 제3자가 보증해주는 전자화된 문서\r\n- 이점(암호화)\r\n  - 통신내용이 공격자에게 노출되는 것을 방지\r\n  - 클라이언트의 접속하려는 서버가 신뢰할 수 있는 서버인지 판단 가능\r\n  - 통신 내용의 악의적인 변경 방지\r\n- 기능\r\n  - 클라이언트가 접속한 서버가 신뢰할 수 있는 서버임을 보장한다.\r\n  - SSL통신에 사용할 공개키를 클라이언트에게 제공한다.\r\n- 암호화\r\n```\r\n-대칭키 \r\n\r\n  암호화를 하는 쪽과 복호화를 하는 쪽이 동일한 키를 이용하는 암호화 기법 \r\n\r\n-공개키(=비대칭키) \r\n\r\n  암호화를 하는 쪽과 복호화를 하는 쪽이 서로 다른 키를 이용하는 암호화 기법, 이러한 특징으로 공개키 방식은 2개의 키(비공개키-공개키)를 갖음 \r\n```\r\n\r\n# 인증서\r\n\r\n## 인증서 내용\r\n```\r\n - 서비스의 정보(인증서 발급 CA, 도메인 등)\r\n - 서버 측 공개키(공개키 내용, 암호화 방법 등)\r\n```\r\n\r\n- CA에 의해 암호화 될 때 공개키 방식을 사용한다.\r\n- CA는 자신의 비공개키를 이용해 서버가 제출한 인증서를 암호화한다.\r\n- 따라서 비공개키는 절대로 유출되어서는 안된다.\r\n\r\n```\r\nCA(Certificate authority)\r\n\r\n-클라이언트가 의도한 서버가 맞는지를 보장하는 역할을 하는 공인된 민간기업들\r\nex) Symantec, Comodo 등\r\n\r\nSSL을 통해 암호화된 통신을 제공하려는 서비스는 CA를 통해 인증서를 구입해야 한다.\r\n\r\n자신이 직접 인증서를 이용할 수도 있지만 공인된 인증서는 아니기 때문에 브라우저에서 경고를 출력한다.\r\n```\r\n\r\n## SSL인증서가 서비스를 보증하는 방법\r\n1. 브라우저는 내부적으로 CA의 리스트를 미리 파악하고 있다.\r\n2. 웹브라우저가 서버에 접속할 때 서버는 인증서를 제공한다.\r\n3. 브라우저는 이 인증서를 발급한 CA가 자신이 갖고 있는 CA 리스트에 있는지 확인한다.\r\n5. 확인 후 브라우저는 해당 CA의 공개키를 이용해 인증서를 복호화한다. \r\n6. 이 과정을 통해 복호화가 된다면 해당 서비스는 신뢰 할 수 있다는 것을 의미하게 된다. \r\n\r\n\r\n[참고 : 생활코딩,얄코]',7,1,0,0,0),(50,'2020-12-17 18:07:18','2021-04-24 15:28:29','JAVA 게시판을 추가했습니다.','**JAVA BOARD**에는\r\n\r\n**JAVA**와 관련된 게시물들을 모아 업로드할 예정입니다.\r\n\r\n감사합니다.( _ _ )',1,1,0,0,0),(51,'2021-01-06 21:48:37','2021-04-24 15:28:29','HTML & CSS & JS 게시판을 추가했습니다.','**HTML & CSS & JS BOARD**에는\r\n\r\n**HTML & CSS & JS**와 관련된 게시물들을 모아 업로드할 예정입니다.\r\n\r\n감사합니다.( _ _ )',1,1,0,0,0),(52,'2021-01-17 23:22:09','2021-04-24 15:28:29','MySQL 게시판을 추가했습니다.','**MySQL BOARD**에는\r\n\r\n**MySQL**과 관련된 게시물들을 모아 업로드할 예정입니다.\r\n\r\n감사합니다.( _ _ )',1,1,0,0,0),(53,'2021-01-20 23:45:44','2021-04-24 15:28:29','PROJECT 메뉴를 추가했습니다.','**PROJECT**에는 \r\n\r\n제가 현재 진행하고 있는 **프로젝트**들에 대한 **개발일지**들을 업로드할 예정입니다.\r\n\r\n감사합니다.( _ _ )',1,1,0,0,0),(54,'2021-03-10 12:44:29','2021-04-24 15:28:30','ETC 게시판을 추가했습니다.','기존 게시판으로 분류가 애매한 게시물들을 모아놓을\r\n\r\n**ETC BOARD**을 추가했습니다.\r\n\r\n**ETC BOARD**에는\r\n**유용한 소스코드, 알고있으면 도움이 되는 정보**들을 주로 업로드할 예정입니다.\r\n\r\n감사합니다.( _ _ )',1,1,0,0,0),(55,'2021-03-10 12:44:31','2021-04-24 15:28:30','LINK 메뉴에 \"GetIT\" 링크를 추가했습니다.','**P.JSP 프로젝트**의 결과물로 **GetIT 사이트**를 서비스하게 되었습니다!\r\n<br>\r\nGetIT 사이트에 대해 간략히 소개드리자면,\r\n아이폰, 갤럭시, 아이패드, 갤럭시탭 그리고 스마트워치 등 다양한 스마트기기들과 관련된\r\n\'최신 소식\'들, \'유용한 Tip\'들을 공유하고자 개설한 커뮤니티 사이트입니다.\r\n\r\n<br>\r\n**JSP**를 기반으로 개발하였으며,\r\n**CentOS7 기반 Linux서버**에 연결해 서비스중입니다.\r\n\r\n<br>\r\n많은 관심 부탁드립니다~!\r\n\r\n감사합니다.( _ _ )',1,1,0,0,0),(56,'2021-03-23 19:36:20','2021-04-24 15:28:30','3강. JOIN(feat. INNER, LEFT, RIGHT, OUTER)','# JOIN(feat. INNER, LEFT, RIGHT, OUTER)\r\n - DB를 다루다보면 서로 다른 Table의 데이터를 조합해야할 경우가 있다. \r\n - 이때 유용하게 사용할 수 있는 쿼리가 바로 \'JOIN\'이다. \r\n - JOIN에는 크게 INNER JOIN, LEFT JOIN, RIGHT JOIN 그리고 OUTER JOIN이 있다.\r\n - JOIN은 DB를 다루는데 있어 매우 중요한 쿼리이므로 잘 익혀둘 필요가 있다.\r\n<br>\r\n지금부터 아래 테스트 데이터를 베이스로 각 JOIN들의 활용법을 살펴보도록 하자.\r\n## Test Data\r\n```SQL\r\n\r\n# a5 데이터베이스 삭제/생성/선택\r\n\r\nDROP DATABASE IF EXISTS `a5`;\r\nCREATE DATABASE `a5`;\r\nUSE `a5`;\r\nSHOW DATABASES;\r\n\r\n\r\n#people테이블 생성\r\n\r\nCREATE TABLE `people`(\r\n    `name` CHAR(100) NOT NULL,\r\n    `phone` CHAR(100) NOT NULL,\r\n    `pid` INT(10) NOT NULL \r\n);\r\nDESC `people`;\r\n\r\n\r\nINSERT INTO `people`\r\nSET `name` = \'Mr b\',\r\n`phone` = \'01225-708225\',\r\n`pid` = 1;\r\n\r\nINSERT INTO `people`\r\nSET `name` = \'Miss a\',\r\n`phone` = \'01333-444444\',\r\n`pid` = 2;\r\n\r\nINSERT INTO `people`\r\nSET `name` = \'Mr c\',\r\n`phone` = \'55555-546525\',\r\n`pid` = 3;\r\n\r\nSELECT * FROM `people`;\r\n\r\n\r\n#property테이블 생성\r\n\r\nCREATE TABLE `property`(\r\n    `pid` INT(10) NOT NULL,\r\n    `spid` INT(10) NOT NULL,\r\n    `selling` CHAR(100) NOT NULL\r\n);\r\nDESC `property`;\r\n\r\nINSERT INTO `property`\r\nSET `spid` = 1,\r\n`selling` = \'old\',\r\n`pid` = 1;\r\n\r\nINSERT INTO `property`\r\nSET `spid` = 2,\r\n`selling` = \'will\',\r\n`pid` = 3;\r\n\r\nINSERT INTO `property`\r\nSET `spid` = 3,\r\n`selling` = \'tail\',\r\n`pid` = 3;\r\n\r\nINSERT INTO `property`\r\nSET `spid` = 4,\r\n`selling` = \'flo\',\r\n`pid` = 3;\r\n \r\nINSERT INTO `property`\r\nSET `spid` = 5,\r\n`selling` = \'dum\',\r\n`pid` = 4;\r\n \r\nSELECT * FROM `property`;\r\n\r\n```\r\n<br>\r\n## INNER JOIN\r\n - INNER 조인은 MySQL에서는 간략히 JOIN으로 나타낸다. 일반적으로 사용하는 JOIN 이다.\r\n\r\n - 핵심은 JOIN뒤에 ON인데, 두 테이블이 결합하는 조건을 나타낸다. \r\n\r\n - (* ON 대신 WHERE를 쓸 수도 있다.)\r\n\r\n```SQL\r\nSELECT people.name,\r\npeople.phone,\r\nproperty.selling\r\nFROM people\r\nINNER JOIN property\r\nON people.pid = property.pid;\r\n```\r\n#### 결과\r\n![image](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdHBGj1%2FbtqNMOdaLwL%2FOXv1Gn0kRoxzoXQI5RmLdK%2Fimg.png)\r\n\r\n<br>\r\n## LEFT JOIN\r\n - 왼쪽 테이블을 중심으로 오른쪽의 테이블을 매치시킨다.\r\n\r\n - 왼쪽 테이블의 한개의 레코드에 여러개의 오른쪽 테이블 레코드가 일치할 경우,\r\n\r\n - 해당 왼쪽 레코드를 여러번 표시하게 된다.\r\n\r\n - 왼쪽은 무조건 표시하고, 매치되는 레코드가 오른쪽에 없으면 NULL을 표시한다.\r\n\r\n```SQL\r\nSELECT people.name,\r\npeople.phone,\r\nproperty.selling\r\nFROM people\r\nLEFT JOIN property\r\nON people.pid = property.pid;\r\n```\r\n\r\n#### 결과\r\n![image](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fm6jJh%2FbtqNLoTNRu9%2FWpov71s0FDGIenpmDBkKrK%2Fimg.png)\r\n\r\n<br>\r\n## RIGHT JOIN\r\n - 오른쪽 테이블을 중심으로 왼쪽 테이블을 매치시킨다.\r\n\r\n - LEFT JOIN에서 방향을 오른쪽으로만 바꾼것이므로, 역시 해당 레코드가 여러번 표시되거나, NULL이 표시된다.\r\n\r\n```SQL\r\nSELECT people.name,\r\npeople.phone,\r\nproperty.selling\r\nFROM people\r\nRIGHT JOIN property\r\nON people.pid = property.pid;\r\n```\r\n\r\n#### 결과\r\n![image](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FSESNh%2FbtqNMMNbsvz%2FRcB9qOj59nJUjk1X0PrfKk%2Fimg.png)\r\n\r\n<br>\r\n## OUTER JOIN\r\n - 조건에 부합하지 않는 행까지도 포함시켜 결합하는 JOIN이다.\r\n\r\n - 기본적으로 LEFT, RIGHT 또는 FULL이 OUTER JOIN 이다.\r\n\r\n - FULL JOIN은 사용할 일이 없으며, ODBC에 따라 지원하지 않는 경우도 있다.',4,1,0,0,0),(57,'2021-03-26 14:22:03','2021-04-24 15:28:30','[카카오API] 카카오 로그인','아래 링크로 이동하시면 자세한 내용을 확인하실 수 있습니다.\r\n\r\n[카카오 로그인 API 강의페이지](https://to2.kr/ca8)',7,1,0,0,0),(58,'2021-03-26 14:23:29','2021-04-24 15:28:31','[카카오API] 카카오 나에게 메시지 보내기','아래 링크로 이동하시면 자세한 내용을 확인하실 수 있습니다.\r\n\r\n[카카오 메시지 API 강의페이지](https://to2.kr/cdP)',7,1,0,0,0),(59,'2021-03-26 14:30:27','2021-04-24 15:28:31','P.WhatIsMyName - 개발일지(개발환경 초기셋팅, 테스트 리스트 입출력)','\r\n# 개발환경 초기셋팅, 테스트 리스트 입출력\r\n\r\n## 영상\r\n\r\n```youtube\r\nxBBCiublaWE\r\n```\r\n<br>\r\n## 주요소스코드\r\n\r\n### WordControlelr\r\n```java\r\n@Controller\r\npublic class WordControlelr {\r\n\r\n	@Autowired\r\n	WordService wordService;\r\n\r\n	@RequestMapping(\"/usr/word/list\")\r\n	public String showList(HttpServletRequest req) {\r\n\r\n		List<Word> words = wordService.getWords();\r\n\r\n		System.out.println(words);\r\n\r\n		req.setAttribute(\"words\", words);\r\n\r\n		return \"/usr/word/list\";\r\n	}\r\n\r\n\r\n```\r\n<br>\r\n### DB\r\n```SQL\r\n# 데이터베이스 생성\r\nDROP DATABASE IF EXISTS whatIsMyName;\r\nCREATE DATABASE whatIsMyName;\r\nUSE whatIsMyName;\r\n\r\n# word 테이블 생성\r\nCREATE TABLE word (\r\n    id INT(10) UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,\r\n    regDate DATETIME NOT NULL,\r\n    updateDate DATETIME NOT NULL,\r\n    `body` CHAR(100) NOT NULL\r\n);\r\n\r\n# word, 테스트 데이터 생성\r\nINSERT INTO word\r\nSET regDate = NOW(),\r\nupdateDate = NOW(),\r\n`body` = \"테스트1\";\r\n\r\nINSERT INTO word\r\nSET regDate = NOW(),\r\nupdateDate = NOW(),\r\n`body` = \"테스트2\";\r\n\r\nINSERT INTO word\r\nSET regDate = NOW(),\r\nupdateDate = NOW(),\r\n`body` = \"테스트3\";\r\n\r\nSELECT * FROM word;\r\n\r\n```',9,1,0,0,0),(60,'2021-03-26 14:33:34','2021-04-24 15:28:31','P.WhatIsMyName - 개발일지(Question페이지 생성, .txt파일로부터 문자 값 가져오기 테스트)','\r\n# Question페이지 생성, .txt파일로부터 문자 값 가져오기 테스트\r\n\r\n## 영상\r\n\r\n```youtube\r\nhHEl9bYDvNc\r\n```\r\n<br>\r\n## 주요소스코드\r\n\r\n### QuestionControlelr\r\n```java\r\npackage com.cjy.whatIsMyName.controller;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\n\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\n\r\n@Controller\r\npublic class QuestionControlelr {\r\n	\r\n	@RequestMapping(\"/usr/question/firstQuestion\")\r\n	public String firstQuestion() {\r\n		return \"/usr/question/firstQuestion\";\r\n	}\r\n	\r\n	@RequestMapping(\"/usr/question/secondQuestion\")\r\n	public String secondQuestion(HttpServletRequest req) {\r\n		String firstAnswer = req.getParameter(\"firstAnswer\");\r\n		\r\n		req.setAttribute(\"firstAnswer\", firstAnswer);	\r\n		\r\n		return \"/usr/question/secondQuestion\";\r\n	}\r\n	\r\n	@RequestMapping(\"/usr/question/thirdQuestion\")\r\n	public String thirdQuestion(HttpServletRequest req) {\r\n		String firstAnswer = req.getParameter(\"firstAnswer\");\r\n		String secondAnswer = req.getParameter(\"secondAnswer\");\r\n		\r\n		req.setAttribute(\"firstAnswer\", firstAnswer);\r\n		req.setAttribute(\"secondAnswer\", secondAnswer);	\r\n		\r\n		return \"/usr/question/thirdQuestion\";\r\n	}\r\n	\r\n	@RequestMapping(\"/usr/question/fourthQuestion\")\r\n	public String fourthQuestion(HttpServletRequest req) {\r\n		String firstAnswer = req.getParameter(\"firstAnswer\");\r\n		String secondAnswer = req.getParameter(\"secondAnswer\");\r\n		String thirdAnswer = req.getParameter(\"thirdAnswer\");\r\n		\r\n		req.setAttribute(\"firstAnswer\", firstAnswer);\r\n		req.setAttribute(\"secondAnswer\", secondAnswer);\r\n		req.setAttribute(\"thirdAnswer\", thirdAnswer);\r\n		\r\n		return \"/usr/question/fourthQuestion\";\r\n	}\r\n	\r\n	@RequestMapping(\"/usr/question/fifthQuestion\")\r\n	public String fifthQuestion(HttpServletRequest req) {\r\n		String firstAnswer = req.getParameter(\"firstAnswer\");\r\n		String secondAnswer = req.getParameter(\"secondAnswer\");\r\n		String thirdAnswer = req.getParameter(\"thirdAnswer\");\r\n		String fourthAnswer = req.getParameter(\"fourthAnswer\");\r\n		\r\n		System.out.println(fourthAnswer);\r\n		\r\n		req.setAttribute(\"firstAnswer\", firstAnswer);\r\n		req.setAttribute(\"secondAnswer\", secondAnswer);\r\n		req.setAttribute(\"thirdAnswer\", thirdAnswer);\r\n		req.setAttribute(\"fourthAnswer\", fourthAnswer);\r\n		\r\n		return \"/usr/question/fifthQuestion\";\r\n	}\r\n	\r\n	@RequestMapping(\"/usr/question/doConfirm\")\r\n	public String doConfirm(HttpServletRequest req) {\r\n		String firstAnswer = req.getParameter(\"firstAnswer\");\r\n		String secondAnswer = req.getParameter(\"secondAnswer\");\r\n		String thirdAnswer = req.getParameter(\"thirdAnswer\");\r\n		String fourthAnswer = req.getParameter(\"fourthAnswer\");\r\n		String fifthAnswer = req.getParameter(\"fifthAnswer\");\r\n		\r\n		req.setAttribute(\"firstAnswer\", firstAnswer);\r\n		req.setAttribute(\"secondAnswer\", secondAnswer);\r\n		req.setAttribute(\"thirdAnswer\", thirdAnswer);\r\n		req.setAttribute(\"fourthAnswer\", fourthAnswer);\r\n		req.setAttribute(\"fifthAnswer\", fifthAnswer);\r\n		\r\n		return \"/usr/question/doConfirm\";\r\n	}\r\n	\r\n	@RequestMapping(\"/usr/question/confirm\")\r\n	public String confirm(HttpServletRequest req) {\r\n		String firstAnswer = req.getParameter(\"firstAnswer\");\r\n		String secondAnswer = req.getParameter(\"secondAnswer\");\r\n		String thirdAnswer = req.getParameter(\"thirdAnswer\");\r\n		String fourthAnswer = req.getParameter(\"fourthAnswer\");\r\n		String fifthAnswer = req.getParameter(\"fifthAnswer\");\r\n		\r\n		req.setAttribute(\"firstAnswer\", firstAnswer);\r\n		req.setAttribute(\"secondAnswer\", secondAnswer);\r\n		req.setAttribute(\"thirdAnswer\", thirdAnswer);\r\n		req.setAttribute(\"fourthAnswer\", fourthAnswer);\r\n		req.setAttribute(\"fifthAnswer\", fifthAnswer);\r\n		\r\n		return \"/usr/question/confirm\";\r\n	}\r\n	\r\n}\r\n\r\n\r\n\r\n```\r\n<br>\r\n### WordControlelr\r\n```java\r\npackage com.cjy.whatIsMyName.controller;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\n\r\nimport com.cjy.whatIsMyName.dto.Word;\r\nimport com.cjy.whatIsMyName.service.WordService;\r\n\r\n@Controller\r\npublic class WordControlelr {\r\n	\r\n	@Autowired\r\n	WordService wordService;\r\n\r\n	@RequestMapping(\"/usr/word/list\")\r\n	public String showList(HttpServletRequest req) {\r\n		\r\n		String[] tss = null;\r\n		\r\n		//단어.txt에서 값 가져오기\r\n		try{\r\n            //파일 객체 생성\r\n            File file = new File(\"C:\\\\work\\\\sts-4.8.0.RELEASE-workspace\\\\whatIsMyName\\\\src\\\\main\\\\resources\\\\input.txt\");\r\n            //스캐너로 파일 읽기\r\n            Scanner scan = new Scanner(file);\r\n            while(scan.hasNextLine()){\r\n            	String ts = scan.nextLine();\r\n            	tss = ts.split(\" - \");\r\n            	System.out.println(ts);\r\n            }\r\n            //System.out.println(scan.useDelimiter(\"\\\\z\").next());\r\n        }catch (FileNotFoundException e) {\r\n            // TODO: handle exception\r\n        }\r\n		\r\n		\r\n		\r\n		List<Word> words = wordService.getWords();\r\n		\r\n		System.out.println(words);\r\n		System.out.println(tss[0]);\r\n		\r\n		req.setAttribute(\"tss\", tss);\r\n		\r\n		req.setAttribute(\"words\", words);\r\n		\r\n		return \"/usr/word/list\";\r\n	}\r\n	\r\n}\r\n\r\n\r\n```',9,1,0,0,0),(61,'2021-03-26 14:34:01','2021-04-24 15:28:31','P.Lamplight, P.WhatIsMyName 게시판 추가했습니다.','**P.Lamplight PROJECT**에는\r\n\r\n팀프로젝트로 진행중인 **Lamplight 프로젝트**의 개발일지를 업로드할 예정입니다.\r\n\r\n<br>\r\n\r\n**P.WhatIsMyName PROJECT**에는\r\n\r\n사이드 프로젝트로 진행중인 **WhatIsMyName 프로젝트**의 개발일지를 업로드할 예정입니다.\r\n\r\n감사합니다.( _ _ )',1,1,0,0,0),(62,'2021-03-26 15:02:29','2021-04-24 15:28:32','P.Lamplight - 개발일지(FormRow 전역 컴포넌트 적용, 상황별 버튼 셋팅, 폰트 적용 등)','\r\n# FormRow 전역 컴포넌트 적용, 상황별 버튼 셋팅, 폰트 적용 등\r\n\r\n## NOTE\r\n\r\n```\r\n@apply?\r\n- tailwind 방식을 style에 적용할 수 있도록 해주는 것? \r\n- 즉, class에 css를 입력하는 tailwind를 style에 바로 입력하는 것 \r\nhttps://tailwindcss.com/docs/functions-and-directives\r\n```\r\n<br>\r\n## 주요소스코드\r\n\r\n### FormRow.vue\r\n```html\r\n<template>\r\n  <div class=\"form-row flex\">\r\n    <div class=\"w-32 flex justify-center \">\r\n      <span class=\"flex items-center\">{{title}}</span>\r\n    </div>\r\n    <div class=\"flex-grow justify-center\">\r\n      <slot></slot>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from \'vue\'\r\nexport default defineComponent({  // 컴포넌트의 속성을 정의해주어야 함\r\n\r\n  // title props의 속성을 정해준다\r\n  props: {\r\n    title: {\r\n      type: String,\r\n      required: true\r\n    }\r\n  },\r\n  //컴포넌트의 이름을 정의한다\r\n  name: \'FormRow\'\r\n})\r\n</script>\r\n\r\n\r\n<!--FormRow의 css를 post 방식으로 전송-->\r\n<style lang=\"postcss\">\r\n.form-row-input{\r\n  /* @apply? tailwind 방식을 style에 적용할 수 있도록 해주는 것? \r\n    즉, class에 css를 입력하는 tailwind를 style에 바로 입력하는 것  */\r\n  /* rounded-sm =>	border-radius:0.125rem; */\r\n  @apply w-full rounded-xl;\r\n\r\n}\r\n\r\n/* textarea에 달린 form-row-input 클래스 라는 의미*/\r\ntextarea.form-row-input{\r\n  min-height: theme(\'spacing.96\');\r\n}\r\n\r\n.form-row{\r\n  /* mt => margin-top */\r\n  @apply mt-2;\r\n}\r\n\r\n/*form-row 다음에 나오는 form-row라는 의미*/\r\n.form-row + .form-row {\r\n\r\n}\r\n\r\n</style>\r\n\r\n\r\n<style scoped>\r\n  \r\n</style> \r\n\r\n```\r\n<br>\r\n### App.vue\r\n```html\r\n<!-- vue를 하나의 jsp라고 생각하면 됨 -->\r\n\r\n<template>\r\n\r\n\r\n  <header class=\"header-bar h-40 bg-gray-100\">\r\n    <div class=\"container mx-auto flex h-full\">\r\n      <!-- router-link는 a와 같다고 보면 됨 -->\r\n      <!-- to는 href -->\r\n      <router-link to=\"/\" class=\"h-full flex items-center\">\r\n        <img class=\"block w-20\" src=\"./assets/logo.png\" alt=\"\">\r\n      </router-link>\r\n\r\n      <div class=\"flex-grow\"></div>\r\n\r\n      <nav class=\"header-bar__menu-box-1\">\r\n        <ul class=\"flex h-full\">\r\n          <li>\r\n            <router-link to=\"/\" class=\"h-full flex items-center font-bold px-10 hover:bg-black hover:text-white\">\r\n              HOME\r\n            </router-link>\r\n          </li>\r\n          <li>\r\n            <router-link to=\"/article/list\" class=\"h-full flex items-center font-bold px-10 hover:bg-black hover:text-white\">\r\n              ARTICLE LIST\r\n            </router-link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  </header>\r\n\r\n    \r\n   <main>\r\n    <!-- 이것을 해주어야 다른 페이지를 불러올 수 있음 -->\r\n    <router-view></router-view>\r\n  </main>\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from \'vue\'\r\n\r\n\r\nexport default defineComponent({\r\n  name: \'App\'\r\n\r\n})\r\n</script>\r\n\r\n<style lang=\"postcss\">\r\n.btn-primary {\r\n  @apply py-2 px-4 bg-blue-600 hover:bg-blue-700 focus:ring-blue-500 focus:ring-offset-blue-200 text-white transition ease-in duration-200 text-center text-base font-semibold shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2 rounded-lg;\r\n}\r\n.btn-secondary {\r\n  @apply py-2 px-4 bg-gray-600 hover:bg-gray-700 focus:ring-gray-500 focus:ring-offset-gray-200 text-white transition ease-in duration-200 text-center text-base font-semibold shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2 rounded-lg;\r\n}\r\n.btn-success {\r\n  @apply py-2 px-4 bg-purple-600 hover:bg-purple-700 focus:ring-purple-500 focus:ring-offset-purple-200 text-white transition ease-in duration-200 text-center text-base font-semibold shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2 rounded-lg;\r\n}\r\n.btn-danger {\r\n  @apply py-2 px-4 bg-red-600 hover:bg-red-700 focus:ring-red-500 focus:ring-offset-red-200 text-white transition ease-in duration-200 text-center text-base font-semibold shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2 rounded-lg;\r\n}\r\n.btn-warning {\r\n  @apply py-2 px-4 bg-yellow-600 hover:bg-yellow-700 focus:ring-yellow-500 focus:ring-offset-yellow-200 text-white transition ease-in duration-200 text-center text-base font-semibold shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2 rounded-lg;\r\n}\r\n.btn-info {\r\n  @apply py-2 px-4 bg-green-600 hover:bg-green-700 focus:ring-green-500 focus:ring-offset-green-200 text-white transition ease-in duration-200 text-center text-base font-semibold shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2 rounded-lg;\r\n}\r\n\r\n/* css 선택자 */\r\n/* .btns 자식들 중에 class로 \'btn-\'를 갖고 있는 엘리먼트의 다음 엘리먼트 */\r\n.btns > [class*=\"btn-\"] + [class*=\"btn-\"] {\r\n  margin-left: theme(\'spacing.2\');\r\n}\r\n</style>\r\n```\r\n\r\n<br>\r\n### index.css\r\n```html\r\n@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n\r\n\r\n\r\n\r\n/* 여기에 css를 저장할 수 있음 */\r\n\r\n@font-face {\r\n  font-family: \'LotteMartDream\';\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  src: url(\'https://cdn.jsdelivr.net/korean-webfonts/1/corps/lottemart/LotteMartDream/LotteMartDreamMedium.woff2\') format(\'woff2\'), url(\'https://cdn.jsdelivr.net/korean-webfonts/1/corps/lottemart/LotteMartDream/LotteMartDreamMedium.woff\') format(\'woff\');\r\n}\r\n\r\n@font-face {\r\n  font-family: \'LotteMartDream\';\r\n  font-style: normal;\r\n  font-weight: 700;\r\n  src: url(\'https://cdn.jsdelivr.net/korean-webfonts/1/corps/lottemart/LotteMartDream/LotteMartDreamBold.woff2\') format(\'woff2\'), url(\'//cdn.jsdelivr.net/korean-webfonts/1/corps/lottemart/LotteMartDream/LotteMartDreamBold.woff\') format(\'woff\');\r\n}\r\n\r\n@font-face {\r\n  font-family: \'LotteMartDream\';\r\n  font-style: normal;\r\n  font-weight: 300;\r\n  src: url(\'https://cdn.jsdelivr.net/korean-webfonts/1/corps/lottemart/LotteMartDream/LotteMartDreamLight.woff2\') format(\'woff2\'), url(\'https://cdn.jsdelivr.net/korean-webfonts/1/corps/lottemart/LotteMartDream/LotteMartDreamLight.woff\') format(\'woff\');\r\n}\r\n\r\nhtml, body {\r\n  margin:0;\r\n}\r\n\r\nhtml {\r\n  font-family: \'LotteMartDream\', sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n```\r\n\r\n<br>\r\n### ArticleListPage.vue\r\n```html\r\n<template>\r\n\r\n  <TitleBar class=\"bg-purple-500\">Article List</TitleBar>\r\n\r\n  <section class=\"article-write-form-box\">\r\n    <div class=\"container mx-auto\">\r\n      <form action=\"\">\r\n        <FormRow title=\"제목\">\r\n          <input type=\"text\" class=\"form-row-input\" placeholder=\"제목을 입력하세요.\"> \r\n        </FormRow>\r\n        <FormRow title=\"내용\">\r\n          <textarea class=\"form-row-input\" placeholder=\"내용을 입력하세요.\"></textarea>\r\n        </FormRow>\r\n        <FormRow>\r\n          <!-- App.vue로 부터 .btn-primary의 style 가져오기 -->\r\n          <div class=\"btns\">\r\n            <input class=\"btn-primary\" type=\"button\" value=\"등록\">\r\n            <input class=\"btn-success\" type=\"button\" value=\"등록\">\r\n            <input class=\"btn-info\" type=\"button\" value=\"등록\">\r\n            <input class=\"btn-warning\" type=\"button\" value=\"등록\">\r\n            <input class=\"btn-secondary\" type=\"button\" value=\"등록\">\r\n            <input class=\"btn-danger\" type=\"button\" value=\"등록\">\r\n          </div>\r\n          \r\n        </FormRow>\r\n      </form>\r\n    </div>\r\n  </section>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from \'vue\'\r\n /* 전역 컴포넌트 적용으로 안해도 됨 \r\nimport TitleBar from \'../components/TitleBar.vue\';\r\n*/\r\n\r\nexport default defineComponent({\r\n  name: \'ArticleListPage\',\r\n  \r\n /* 전역 컴포넌트 적용으로 안해도 됨 \r\n  components: {\r\n    TitleBar\r\n  }\r\n*/\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n```',8,1,0,0,0),(63,'2021-04-24 14:10:15','2021-04-24 15:28:32','P.Lamplight - 개발일지(게시물 추가 테스트, 백엔드 연결, 게시물 번호별 리스팅 등)','# 게시물 추가 테스트, 백엔드 연결, 게시물 번호별 리스팅 등\r\n\r\n## NOTE\r\n\r\n```\r\ntypescript에서는 title:string, body:string 이런식으로 type을 적어주어야 한다\r\n```\r\n```\r\nsetup()\r\n- setup() 함수는 프로그램 실행시 단 한번 호출된다.\r\n- setup() 함수는 프로그램당 한 개씩만 존재할 수 있으며, 최초 한 번 실행된 이후에는 재호출되지 않아야 한다.\r\n- 참고: setup() 함수 안에 선언된 변수는, draw() 함수를 비롯한 여타 함수들이 접근할 수 없다. \r\n```\r\n```\r\nsubmint.prevent\r\n- 말그대로 submit을 막는 것\r\n```\r\n```\r\nreactive\r\n- reactive는 기존 뷰 문법의 data 속성 느낌이고, \r\n- ref는 좀 더 리액티브 속성을 개별적으로 선언하는 느낌....???\r\n```\r\n```\r\nstate??\r\n\r\n기존 코드에서는 props, data, methods가 같은 계층에 존재했습니다. \r\n하지만 Vue3에서는 props와 setup이 같은 계층에 존재하고, \r\ndata는 state로, method 들은 각각의 기명함수로 작성되어 한번에 반환되도록 변화하였습니다.\r\n    \r\nstate의 경우에도 그냥 선언하는 것이 아니라, vue reactive를 사용하게 되었습니다. \r\nReactive(반응형)는 Vue가 반응형 시스템을 유지하기 위해서 사용하는 간단한 JavaScript 객체입니다. \r\n    \r\nReactive는 아래와 같이 동작합니다.\r\n(그림: https://media.vlpt.us/images/bluestragglr/post/50e4c7c7-c697-4c5a-8329-820828389777/Untitled.png) \r\n    \r\nVue2 에서는 data나 method, computed 등을 선언하게 되면 알아서 각각에 대해 위와 같이 동작하는 reactive 객체를 생성하였습니다. \r\n하지만 그 과정이 묵시적이었고, 유저들은 위 과정을 알 필요가 없었습니다. \r\n하지만 Vue3에서의 타입스크립트의 지원이나 state로의 명칭 변경, 명시적 reactive 사용 등을 보았을 때, \r\n전반적으로 명료한 선언을 지향하는 방향으로 변화한 것으로 보입니다.\r\n```\r\n```\r\n보일러플레이트 코드?\r\n-뭔가를 하기 위해 필요하지만 몰라도 되는 것\r\n-하긴 해야되는 것\r\n```\r\n```\r\naxios \r\n- ajax 통신을 하게 해주는 것\r\n```\r\n```\r\ndependencies\r\n- 개발할 때와 서비스 할 때 모두 필요한 것\r\n\r\ndevDependencies\r\n- 개발 할 때만 필요한 것\r\n```\r\n```\r\nany \r\n- 어떤 타입이든 들어갈 수 있는 타입\r\n- object와 비슷한 개념??\r\n```\r\n<br>\r\n## 주요소스코드\r\n\r\n### MainApi.ts\r\n```\r\nimport axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse } from \'axios\';\r\nimport {IArticle} from \'../types\'\r\n\r\n// API 원형\r\nabstract class HttpClient {\r\n  protected readonly instance: AxiosInstance;\r\n\r\n  public constructor(instance: AxiosInstance) {\r\n    this.instance = instance;\r\n\r\n    this._initializeRequestInterceptor();\r\n    this._initializeResponseInterceptor();\r\n  }\r\n\r\n  private _initializeRequestInterceptor() {\r\n    this.instance.interceptors.request.use(\r\n      this._handleRequest,\r\n      this._handleError,\r\n    );\r\n  };\r\n\r\n  private _initializeResponseInterceptor() {\r\n    this.instance.interceptors.response.use(\r\n      this._handleResponse,\r\n      this._handleError,\r\n    );\r\n  };\r\n\r\n  protected _handleRequest(config:AxiosRequestConfig) : AxiosRequestConfig {\r\n    return config;\r\n  }\r\n\r\n  protected _handleResponse(axiosResponse:AxiosResponse) : AxiosResponse {\r\n    return axiosResponse;\r\n  }\r\n\r\n  protected _handleError(error: AxiosError) {\r\n    if (error.response) {\r\n      // 요청이 이루어졌으며 서버가 2xx의 범위를 벗어나는 상태 코드로 응답했습니다.\r\n      alert(\'요청을 처리하는 중에 오류가 발생하였습니다.\');\r\n    }\r\n    else if (error.request) {\r\n      // 요청이 이루어 졌으나 응답을 받지 못했습니다.\r\n      // `error.request`는 브라우저의 XMLHttpRequest 인스턴스 또는\r\n      // Node.js의 http.ClientRequest 인스턴스입니다.\r\n      alert(\'서버 또는 네트워크의 상태가 좋지 않습니다.\');\r\n    }\r\n    else {\r\n      // 오류를 발생시킨 요청을 설정하는 중에 문제가 발생했습니다.\r\n      console.log(\'Error\', error.message);\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  };\r\n}\r\n\r\n// 응답타입1\r\ninterface Base__IResponseBodyType1 {\r\n  resultCode:string;\r\n  msg:string;\r\n}\r\n\r\n// /usr/article/list 의 응답 타입\r\nexport interface MainApi__article_list__IResponseBody extends Base__IResponseBodyType1 {\r\n  body:{\r\n    articles: IArticle[]\r\n  };\r\n}\r\n\r\n// /usr/article/detail 의 응답 타입\r\nexport interface MainApi__article_detail__IResponseBody extends Base__IResponseBodyType1 {\r\n  body:{\r\n    article: IArticle\r\n  };\r\n}\r\n\r\n// http://localhost:8021/usr/ 와의 통신장치\r\nexport class MainApi extends HttpClient {\r\n  public constructor() {\r\n    super(\r\n      axios.create({\r\n        baseURL:\'http://localhost:8021/usr/\',\r\n      })\r\n    );\r\n  }\r\n\r\n  protected _handleRequest(config:AxiosRequestConfig) {\r\n    config.params = {};\r\n    config.params.authKey = localStorage.getItem(\"authKey\");\r\n    return config;\r\n  };\r\n\r\n  protected _handleResponse(axiosResponse:AxiosResponse) : AxiosResponse {\r\n    if ( axiosResponse?.data?.requestCode == \"F-B\" ) {\r\n      alert(\'로그인 후 이용해주세요.\');\r\n      location.replace(\'/member/login\');\r\n    }\r\n\r\n    return axiosResponse;\r\n  }\r\n\r\n  // http://localhost:8021/usr/article/list?boardId=? 를 요청하고 응답을 받아오는 함수\r\n  public article_list(boardId: number) {\r\n    return this.instance.get<MainApi__article_list__IResponseBody>(`/article/list?boardId=${boardId}`);\r\n  }\r\n\r\n  // http://localhost:8021/usr/detail/id?id=? 를 요청하고 응답을 받아오는 함수\r\n  public article_detail(id: number) {\r\n    return this.instance.get<MainApi__article_detail__IResponseBody>(`/article/detail?id=${id}`);\r\n  }\r\n} \r\n```\r\n<br>\r\n### IArticle.ts\r\n```\r\nexport interface IArticle {\r\n  id:number;\r\n  regDate:string;\r\n  updateDate:string;\r\n  boardId:number;\r\n  memberId:number;\r\n  title:string;\r\n  body:string;\r\n  extra__writer:string;\r\n}\r\n```\r\n<br>\r\n### ArticleListPage.vue\r\n```\r\n<template>\r\n\r\n  <TitleBar class=\"bg-purple-500\">Article List</TitleBar>\r\n\r\n  <section class=\"section section-article-write-form-box px-2\">\r\n    <div class=\"container mx-auto\">\r\n      <!--submint.prevent: 말그대로 submit을 막는 것-->\r\n      <form v-on:submit.prevent=\"checkAndWriteArticle\">\r\n        <FormRow title=\"제목\">\r\n          <input ref=\"newArticleTitleElRef\" type=\"text\" class=\"form-row-input\" placeholder=\"제목을 입력하세요.\"> \r\n        </FormRow>\r\n        <FormRow title=\"내용\">\r\n          <textarea ref=\"newArticleBodyElRef\" class=\"form-row-input\" placeholder=\"내용을 입력하세요.\"></textarea>\r\n        </FormRow>\r\n        <FormRow>\r\n          <!-- App.vue로 부터 .btn-primary의 style 가져오기 -->\r\n          <div class=\"btns\">\r\n            <input class=\"btn-primary\" type=\"submit\" value=\"등록\">\r\n          </div>\r\n          \r\n        </FormRow>\r\n      </form>\r\n    </div>\r\n  </section>\r\n\r\n  <section class=\"section section-article-list px-2\">\r\n    <div class=\"container mx-auto\">\r\n      \r\n      <div class=\"mt-6\" v-bind:key=\"article.id\" v-for=\"article in state.articles\">\r\n        <div class=\"px-10 py-6 bg-white rounded-lg shadow-md\">\r\n          <div class=\"flex justify-between items-center\">\r\n            <span class=\"font-light text-gray-600\">\r\n              2021-02-24 10:20:30\r\n            </span>\r\n            <a href=\"#\" class=\"px-2 py-1 bg-gray-600 text-gray-100 font-bold rounded hover:bg-gray-500\">\r\n              자유\r\n            </a>\r\n          </div>\r\n          <div class=\"mt-2\">\r\n            <a href=\"#\" class=\"text-2xl text-gray-700 font-bold hover:underline\">\r\n              {{ article.title }}\r\n            </a>\r\n            <p class=\"mt-2 text-gray-600\">\r\n              {{ article.body }}\r\n            </p>\r\n          </div>\r\n          <div class=\"flex justify-between items-center mt-4\">\r\n            <a href=\"#\" class=\"text-blue-500 hover:underline\">자세히 보기</a>\r\n            <div>\r\n              <a href=\"#\" class=\"flex items-center\">\r\n                <img src=\"https://images.unsplash.com/photo-1492562080023-ab3db95bfbce?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=731&amp;q=80\" alt=\"avatar\" class=\"mx-4 w-10 h-10 object-cover rounded-full hidden sm:block\">\r\n                <h1 class=\"text-gray-700 font-bold hover:underline\">홍길동</h1>\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  </section>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, reactive, ref, getCurrentInstance, onMounted } from \'vue\'\r\nimport { useRoute } from \'vue-router\'\r\n/* 전역 컴포넌트 적용으로 안해도 됨 \r\nimport TitleBar from \'../components/TitleBar.vue\';\r\n*/\r\n//import { Article } from \'../dtos/\' /* \'../dtos/index\'이지만 생략가능 */\r\nimport { IArticle } from \'../types/\'\r\nimport { MainApi } from \'../apis/\'\r\n\r\n\r\nexport default defineComponent({\r\n  name: \'ArticleListPage\',\r\n  /* setup() 함수는 프로그램 실행시 단 한번 호출된다.\r\n  setup() 함수는 프로그램당 한 개씩만 존재할 수 있으며, \r\n  최초 한 번 실행된 이후에는 재호출되지 않아야 한다.\r\n  참고: setup() 함수 안에 선언된 변수는, draw() 함수를 비롯한 여타 함수들이 접근할 수 없다. */\r\n  setup(){\r\n    const route = useRoute();  //useRoute 객체 생성\r\n    const mainApi:MainApi = getCurrentInstance()?.appContext.config.globalProperties.$mainApi;\r\n\r\n    /* ref: HTMLInputElement의 위치를 가져오는 것 */\r\n    const newArticleTitleElRef = ref<HTMLInputElement>();\r\n    const newArticleBodyElRef = ref<HTMLInputElement>();\r\n\r\n    /* reactive: reactive는 기존 뷰 문법의 data 속성 느낌이고, \r\n    ref는 좀 더 리액티브 속성을 개별적으로 선언하는 느낌....??? */\r\n    /* articles 배열을 state로 선언 */\r\n    /* state는 무슨 의미????*/\r\n    /* 기존 코드에서는 props, data, methods가 같은 계층에 존재했습니다. \r\n    하지만 Vue3에서는 props와 setup이 같은 계층에 존재하고, \r\n    data는 state로, method 들은 각각의 기명함수로 작성되어 한번에 반환되도록 변화하였습니다.\r\n    state의 경우에도 그냥 선언하는 것이 아니라, vue reactive를 사용하게 되었습니다. \r\n    Reactive(반응형)는 Vue가 반응형 시스템을 유지하기 위해서 사용하는 간단한 JavaScript 객체입니다. \r\n    Reactive는 아래와 같이 동작합니다.(그림: https://media.vlpt.us/images/bluestragglr/post/50e4c7c7-c697-4c5a-8329-820828389777/Untitled.png) \r\n    Vue2 에서는 data나 method, computed 등을 선언하게 되면 알아서 각각에 대해 위와 같이 동작하는 reactive 객체를 생성하였습니다. \r\n    하지만 그 과정이 묵시적이었고, 유저들은 위 과정을 알 필요가 없었습니다. \r\n    하지만 Vue3에서의 타입스크립트의 지원이나 state로의 명칭 변경, 명시적 reactive 사용 등을 보았을 때, \r\n    전반적으로 명료한 선언을 지향하는 방향으로 변화한 것으로 보입니다.\r\n    */\r\n    const state = reactive({\r\n      articles: [] as IArticle[]\r\n    });\r\n\r\n    function loadArticles(boardId:number){\r\n      mainApi.article_list(boardId)\r\n      .then(axiosResponse => {\r\n          state.articles = axiosResponse.data.body.articles;\r\n      });\r\n    }\r\n\r\n    // 바로 실행하는 것이 아닌 모든 것이 준비되었을때 실행됨\r\n    onMounted(() => {\r\n      // route.query.boardId as any ?? \"1\" \r\n      // route.query.boardId가 null이거나 undifind이면 1을 적용하라는 의미\r\n      const boardId = parseInt(route.query.boardId as string ?? \"1\");\r\n      \r\n      loadArticles(boardId);\r\n    });\r\n\r\n    /* 공백 체크 */\r\n    function checkAndWriteArticle(){\r\n      //일반적으로 안해도 되지만 typescript에서는 해야됨\r\n      if(newArticleTitleElRef.value == null){\r\n        return;\r\n      }\r\n\r\n      const newArticleTitleEl = newArticleTitleElRef.value;\r\n      newArticleTitleEl.value = newArticleTitleEl.value.trim();\r\n\r\n      if(newArticleTitleEl.value.length == 0){\r\n        alert(\'제목을 입력해 주세요.\')\r\n        newArticleTitleEl.focus();\r\n        return;\r\n      }\r\n\r\n      if(newArticleBodyElRef.value == null){\r\n        return;\r\n      }\r\n\r\n      const newArticleBodyEl = newArticleBodyElRef.value;\r\n      newArticleBodyEl.value = newArticleBodyEl.value.trim();\r\n\r\n      if(newArticleBodyEl.value.length == 0){\r\n        alert(\'내용을 입력해 주세요.\')\r\n        newArticleBodyEl.focus();\r\n        return;\r\n      }\r\n\r\n      // 글작성 함수로 보내기\r\n      writeArticle(newArticleTitleEl.value, newArticleBodyEl.value);\r\n\r\n      // 글작성 후 내용 초기화\r\n      newArticleTitleEl.value = \'\';\r\n      newArticleBodyEl.value = \'\';\r\n\r\n    }\r\n\r\n    //typescript에서는 title:string, body:string 이런식으로 type을 적어주어야 한다\r\n      function writeArticle(title:string, body:string){\r\n        //const newArticle = new Article(title, body);\r\n        \r\n        //state.articles.push(newArticle);\r\n      }\r\n\r\n    return{\r\n      state,\r\n      newArticleTitleElRef,\r\n      newArticleBodyElRef,\r\n      checkAndWriteArticle\r\n      \r\n    }\r\n\r\n  }\r\n  \r\n /* 전역 컴포넌트 적용으로 안해도 됨 \r\n  components: {\r\n    TitleBar\r\n  }\r\n*/\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n```',8,1,0,0,0),(64,'2021-04-24 14:57:43','2021-04-24 15:28:32','P.Lamplight - 개발일지(글쓰기,상세페이지,로그인 ~ 회원가입까지)','# 글쓰기,상세페이지,로그인 ~ 회원가입까지\r\n\r\n## NOTE\r\n\r\n```\r\n<post 전송방식>\r\n1.form 방식\r\n 일반 form 형식\r\n2.axios json 방식\r\n json 형식\r\n```\r\n```\r\n:to와 to의 차이??\r\n:이 있으면 자바스크립트 사용 가능\r\n\r\nex)\r\nto=\"article/list\"\r\n:to=\"\'article/list?boardId\' + article.boardId\"\r\n```\r\n```\r\nprotected _handleResponse(axiosResponse:AxiosResponse) : AxiosResponse {\r\n\r\n    // 로그인 정보 체크\r\n    // axiosResponse?.data?.resultCode == \"F-A\" || axiosResponse?.data?.resultCode == \"F-B\" (초보 버전)\r\n    // axiosResponse?.data?.resultCode == \"F-A\" => 로그인 정보가 아예 없는 경우\r\n    // axiosResponse?.data?.resultCode == \"F-B\" => 로그인 정보가 틀린 경우\r\n\r\n    // axiosResponse?.data?.resultCode == \"F-A\" || axiosResponse?.data?.resultCode == \"F-B\" (초보 버전)\r\n    //[\"F-A\", \"F-B\"].includes(axiosResponse?.data?.resultCode) (고급 버전)\r\n    \r\n    /* 로그인 정보 체크 후 로그인 화면으로 이동 */\r\n    if ([\"F-A\", \"F-B\"].includes(axiosResponse?.data?.resultCode)) {\r\n      alert(\'로그인 후 이용해주세요.\');\r\n      location.replace(\'/member/login\');\r\n    }\r\n\r\n    return axiosResponse;\r\n  }\r\n```\r\n```\r\n<컴포넌트>\r\n\r\n현재 앱 컴포넌트와 페이지별 컴포넌트로 구성\r\n페이지 컴포넌트는 현재 라우터(주소)에 의해 자동적으로 선택되고 있음\r\n```\r\n```\r\n<state: 상태>\r\n\r\n페이지 글과 같은 상태는 전역적으로 필요하지 않음\r\n하지만 로그인 정보의 경우 전역적으로 필요함 \r\n이를 위해 전역상태를 구축해야함\r\n```\r\n\r\n<br>\r\n## 주요소스코드\r\n\r\n### ArticleWritePage.vue\r\n```html\r\n<template>\r\n\r\n  <TitleBar>글쓰기</TitleBar>\r\n\r\n  <section class=\"section section-article-write-form-box px-2\">\r\n    <div class=\"container mx-auto\">\r\n      <div class=\"px-6 py-6 bg-white rounded-lg shadow-md\">\r\n        <form v-if=\"globalShare.isLogined\" v-on:submit.prevent=\"checkAndWriteArticle\">\r\n          <FormRow title=\"게시판\">\r\n            <select class=\"form-row-select\" ref=\"newArticleBoardIdElRef\">\r\n              <option value=\"1\">NOTICE</option>\r\n              <option value=\"2\">FREE</option>\r\n            </select>\r\n          </FormRow>\r\n          <FormRow title=\"제목\">\r\n            <input ref=\"newArticleTitleElRef\" class=\"form-row-input\" type=\"text\" placeholder=\"제목을 입력해주세요.\">\r\n          </FormRow>\r\n          <FormRow title=\"내용\">\r\n            <textarea ref=\"newArticleBodyElRef\" class=\"form-row-input\" placeholder=\"내용을 입력해주세요.\"></textarea>\r\n          </FormRow>\r\n          <FormRow title=\"작성\">\r\n            <div class=\"btns\">\r\n              <input type=\"submit\" value=\"작성\" class=\"btn-primary\" />\r\n            </div>\r\n          </FormRow>\r\n        </form>\r\n        <div v-else>\r\n          <router-link class=\"btn-link\" to=\"/member/login\">로그인</router-link> 후 이용해주세요.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, reactive, ref, getCurrentInstance, onMounted } from \'vue\'\r\nimport { MainApi } from \'../apis/\'\r\nimport { Router } from \'vue-router\'\r\n\r\n\r\nexport default defineComponent({\r\n  name: \'ArticleWritePage\',\r\n\r\n  props: {\r\n    globalShare: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    boardId: {\r\n      type: Number,\r\n      required: true,\r\n      default:1\r\n    }\r\n  },\r\n\r\n  setup(props){\r\n    const router:Router = getCurrentInstance()?.appContext.config.globalProperties.$router;\r\n    const mainApi:MainApi = getCurrentInstance()?.appContext.config.globalProperties.$mainApi;\r\n\r\n    const newArticleBoardIdElRef = ref<HTMLInputElement>();\r\n    const newArticleTitleElRef = ref<HTMLInputElement>();\r\n    const newArticleBodyElRef = ref<HTMLInputElement>();\r\n\r\n    //boardId 파라미터 값에 따라 게시판 선택 옵션 값(newArticleBoardIdElRef.value.value)이 바뀜\r\n    onMounted(() => {\r\n        if(newArticleBoardIdElRef.value == null){\r\n        return;\r\n      }\r\n        newArticleBoardIdElRef.value.value = props.boardId + \"\";\r\n      });\r\n\r\n    /* 공백 체크 */\r\n    function checkAndWriteArticle(){\r\n\r\n      if(newArticleBoardIdElRef.value == null){\r\n        return;\r\n      }\r\n\r\n      const newArticleBoardIdEl = newArticleBoardIdElRef.value;\r\n\r\n\r\n      //일반적으로 안해도 되지만 typescript에서는 해야됨\r\n      if(newArticleTitleElRef.value == null){\r\n        return;\r\n      }\r\n\r\n      const newArticleTitleEl = newArticleTitleElRef.value;\r\n      newArticleTitleEl.value = newArticleTitleEl.value.trim();\r\n\r\n      if(newArticleTitleEl.value.length == 0){\r\n        alert(\'제목을 입력해 주세요.\')\r\n        newArticleTitleEl.focus();\r\n        return;\r\n      }\r\n\r\n      if(newArticleBodyElRef.value == null){\r\n        return;\r\n      }\r\n\r\n      const newArticleBodyEl = newArticleBodyElRef.value;\r\n      newArticleBodyEl.value = newArticleBodyEl.value.trim();\r\n\r\n      if(newArticleBodyEl.value.length == 0){\r\n        alert(\'내용을 입력해 주세요.\')\r\n        newArticleBodyEl.focus();\r\n        return;\r\n      }\r\n\r\n      // 글작성 함수로 보내기\r\n      writeArticle(parseInt(newArticleBoardIdEl.value), newArticleTitleEl.value, newArticleBodyEl.value);\r\n\r\n    }\r\n\r\n    //typescript에서는 title:string, body:string 이런식으로 type을 적어주어야 한다\r\n      function writeArticle(boardId:number, title:string, body:string){\r\n       \r\n        mainApi.article_doWrite(boardId, title, body)\r\n        .then(axiosResponse => {\r\n          alert(axiosResponse.data.msg);\r\n          \r\n          // 로그인이 fail 상태이면 리턴\r\n          if ( axiosResponse.data.fail ) {\r\n            return;\r\n          }\r\n\r\n          //authKey가 있는 상태에서 가능\r\n          const newArticleId = axiosResponse.data.body.id;\r\n          //alert(newArticleId + \"번 게시물 등록 완료!!\");\r\n\r\n          router.replace(\"detail?id=\" + newArticleId);\r\n        });\r\n      }\r\n\r\n    return{\r\n      newArticleBoardIdElRef,\r\n      newArticleTitleElRef,\r\n      newArticleBodyElRef,\r\n      checkAndWriteArticle\r\n      \r\n    }\r\n\r\n  }\r\n  \r\n})\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n```\r\n\r\n### MemberLoginPage.vue\r\n```html\r\n<template>\r\n  <TitleBar>로그인</TitleBar>\r\n\r\n  <section class=\"section section-member-login-form px-2\">\r\n    <div class=\"container mx-auto\">\r\n      <div class=\"px-6 py-6 bg-white rounded-lg shadow-md\">\r\n        <form v-if=\"globalShare.isLogined == false\" v-on:submit.prevent=\"checkAndLogin\">\r\n          <FormRow title=\"로그인아이디\">\r\n            <input ref=\"loginIdElRef\" class=\"form-row-input\" type=\"text\" placeholder=\"아이디를 입력해주세요.\">\r\n          </FormRow>\r\n          <FormRow title=\"로그인비밀번호\">\r\n            <input ref=\"loginPwElRef\" class=\"form-row-input\" type=\"password\" placeholder=\"로그인비밀번호를 입력해주세요.\">\r\n          </FormRow>\r\n          <FormRow title=\"로그인\">\r\n            <div class=\"btns\">\r\n              <input type=\"submit\" value=\"로그인\" class=\"btn-primary\" />\r\n            </div>\r\n          </FormRow>\r\n        </form>\r\n        <div v-else>\r\n          이미 로그인 되었습니다. <route-link class=\"btn-link\" to=\"/\">홈</route-link> 으로 이동\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, ref, getCurrentInstance, onMounted } from \'vue\'\r\nimport { IArticle } from \'../types/\'\r\nimport { MainApi } from \'../apis/\'\r\nimport { useRoute } from \'vue-router\'\r\nimport { Router } from \'vue-router\'\r\n\r\nexport default defineComponent({\r\n  name: \'MemberLoginPage\',\r\n  props: {\r\n    globalShare: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n  },\r\n  setup(props) {\r\n    const route = useRoute();\r\n    const router:Router = getCurrentInstance()?.appContext.config.globalProperties.$router;\r\n    const mainApi:MainApi = getCurrentInstance()?.appContext.config.globalProperties.$mainApi;\r\n    const loginIdElRef = ref<HTMLInputElement>();\r\n    const loginPwElRef = ref<HTMLInputElement>();\r\n\r\n\r\n    \r\n    onMounted(() => {\r\n      // 만약, route로 들어온 쿼리의 loginId가 null이 아니면\r\n      if ( route.query.loginId != null ) {\r\n        if ( loginIdElRef.value == null ) {\r\n          return;\r\n        }\r\n        if ( loginPwElRef.value == null ) {\r\n          return;\r\n        }\r\n\r\n        // loginIdElRef 값에 route.query.loginId 정보 담기\r\n        loginIdElRef.value.value = route.query.loginId as any;\r\n        // loginPwElRef에 포커스\r\n        loginPwElRef.value.focus();\r\n      }\r\n    })\r\n\r\n\r\n    function checkAndLogin() {\r\n      if ( loginIdElRef.value == null ) {\r\n        return;\r\n      }\r\n\r\n      const loginIdEl = loginIdElRef.value;\r\n      loginIdEl.value = loginIdEl.value.trim();\r\n\r\n      if ( loginIdEl.value.length == 0 ) {\r\n        alert(\'아이디를 입력해주세요.\');\r\n        loginIdEl.focus();\r\n        return;\r\n      }\r\n      if ( loginPwElRef.value == null ) {\r\n        return;\r\n      }\r\n\r\n      const loginPwEl = loginPwElRef.value;\r\n      loginPwEl.value = loginPwEl.value.trim();\r\n\r\n      if ( loginPwEl.value.length == 0 ) {\r\n        alert(\'비밀번호를 입력해주세요.\');\r\n        loginPwEl.focus();\r\n        return;\r\n      }\r\n\r\n      //로그인\r\n      login(loginIdEl.value, loginPwEl.value);\r\n    \r\n    }\r\n    function login(loginId:string, loginPw:string) {\r\n      mainApi.member_authKey(loginId, loginPw)\r\n        .then(axiosResponse => {\r\n          alert(axiosResponse.data.msg);\r\n          \r\n          // 로그인이 fail 상태이면 리턴\r\n          if ( axiosResponse.data.fail ) {\r\n            return;\r\n          }\r\n\r\n          const authKey = axiosResponse.data.body.authKey;\r\n          const loginedMemberId = axiosResponse.data.body.id;\r\n          const loginedMemberName = axiosResponse.data.body.name;\r\n          const loginedMemberNickname = axiosResponse.data.body.nickname;\r\n\r\n          localStorage.setItem(\"authKey\", authKey);\r\n          localStorage.setItem(\"loginedMemberId\", loginedMemberId + \"\");\r\n          localStorage.setItem(\"loginedMemberName\", loginedMemberName);\r\n          localStorage.setItem(\"loginedMemberNickname\", loginedMemberNickname);\r\n          \r\n          props.globalShare.loginedMember = {\r\n            authKey,\r\n            id:loginedMemberId,\r\n            name:loginedMemberName,\r\n            nickname:loginedMemberNickname,\r\n          };\r\n\r\n          //alert(axiosResponse.data.msg);\r\n\r\n          router.replace(\'/\')\r\n        });\r\n    }\r\n    return {\r\n      checkAndLogin,\r\n      loginIdElRef,\r\n      loginPwElRef\r\n    }\r\n  }\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n</style> \r\n```\r\n\r\n### MemberJoinPage.vue\r\n``` html\r\n<template>\r\n  <TitleBar>회원가입</TitleBar>\r\n\r\n  <section class=\"section section-member-join-form px-2\">\r\n    <div class=\"container mx-auto\">\r\n      <div class=\"px-6 py-6 bg-white rounded-lg shadow-md\">\r\n        <form v-if=\"globalShare.isLogined == false\" v-on:submit.prevent=\"checkAndJoin\">\r\n          <FormRow title=\"아이디\">\r\n            <input ref=\"loginIdElRef\" class=\"form-row-input\" type=\"text\" placeholder=\"아이디를 입력해주세요.\">\r\n          </FormRow>\r\n          <FormRow title=\"비밀번호\">\r\n            <input ref=\"loginPwElRef\" class=\"form-row-input\" type=\"password\" placeholder=\"비밀번호를 입력해주세요.\">\r\n          </FormRow>\r\n          <FormRow title=\"비밀번호 확인\">\r\n            <input ref=\"loginPwConfirmElRef\" class=\"form-row-input\" type=\"password\" placeholder=\"비밀번호 확인을 해주세요.\">\r\n          </FormRow>\r\n          <FormRow title=\"이름\">\r\n            <input ref=\"nameElRef\" class=\"form-row-input\" type=\"text\" placeholder=\"이름을 입력해주세요.\">\r\n          </FormRow>\r\n          <FormRow title=\"닉네임\">\r\n            <input ref=\"nicknameElRef\" class=\"form-row-input\" type=\"text\" placeholder=\"닉네임을 입력해주세요.\">\r\n          </FormRow>\r\n          <FormRow title=\"전화번호\">\r\n            <input ref=\"cellphoneNoElRef\" class=\"form-row-input\" type=\"tel\" placeholder=\"전화번호를 입력해주세요.\">\r\n          </FormRow>\r\n          <FormRow title=\"이메일\">\r\n            <input ref=\"emailElRef\" class=\"form-row-input\" type=\"email\" placeholder=\"이메일을 입력해주세요.\">\r\n          </FormRow>\r\n          <FormRow title=\"가입\">\r\n            <div class=\"btns\">\r\n              <input type=\"submit\" value=\"가입\" class=\"btn-primary\" />\r\n            </div>\r\n          </FormRow>\r\n        </form>\r\n        <div v-else>\r\n          이미 로그인 상태입니다. <route-link class=\"btn-link\" to=\"/\">홈</route-link> 으로 이동\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, ref, reactive, getCurrentInstance, onMounted } from \'vue\'\r\nimport { MainApi } from \'../apis/\'\r\nimport { Router } from \'vue-router\';\r\n\r\nexport default defineComponent({\r\n  name: \'MemberJoinPage\',\r\n  props: {\r\n    globalShare: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n  },\r\n  setup(props) {\r\n    const router:Router = getCurrentInstance()?.appContext.config.globalProperties.$router;\r\n    const mainApi:MainApi = getCurrentInstance()?.appContext.config.globalProperties.$mainApi;\r\n    const loginIdElRef = ref<HTMLInputElement>();\r\n    const loginPwElRef = ref<HTMLInputElement>();\r\n    const loginPwConfirmElRef = ref<HTMLInputElement>();\r\n    const nameElRef = ref<HTMLInputElement>();\r\n    const nicknameElRef = ref<HTMLInputElement>();\r\n    const cellphoneNoElRef = ref<HTMLInputElement>();\r\n    const emailElRef = ref<HTMLInputElement>();\r\n    \r\n   \r\n    function checkAndJoin() {\r\n       // 아이디 체크\r\n      if ( loginIdElRef.value == null ) {\r\n        return;\r\n      }\r\n      \r\n      const loginIdEl = loginIdElRef.value;\r\n      loginIdEl.value = loginIdEl.value.trim();\r\n      \r\n      if ( loginIdEl.value.length == 0 ) {\r\n        alert(\'아이디를 입력해주세요.\');\r\n        loginIdEl.focus();\r\n        return;\r\n      }\r\n      // 비번 체크\r\n      if ( loginPwElRef.value == null ) {\r\n        return;\r\n      }\r\n\r\n      const loginPwEl = loginPwElRef.value;\r\n      loginPwEl.value = loginPwEl.value.trim();\r\n      \r\n      if ( loginPwEl.value.length == 0 ) {\r\n        alert(\'비밀번호를 입력해주세요.\');\r\n        loginPwEl.focus();\r\n        return;\r\n      }\r\n      \r\n      // 비번확인 체크\r\n      if ( loginPwConfirmElRef.value == null ) {\r\n        return;\r\n      }\r\n\r\n      const loginPwConfirmEl = loginPwConfirmElRef.value;\r\n      \r\n      if ( loginPwEl.value != loginPwConfirmEl.value ) {\r\n        alert(\'로그인 비번이 일치하지 않습니다.\');\r\n        loginPwConfirmEl.focus();\r\n        return;\r\n      }\r\n\r\n      // 이름 체크\r\n      if ( nameElRef.value == null ) {\r\n        return;\r\n      }\r\n\r\n      const nameEl = nameElRef.value;\r\n      nameEl.value = nameEl.value.trim();\r\n\r\n      if ( nameEl.value.length == 0 ) {\r\n        alert(\'이름을 입력해주세요.\');\r\n        nameEl.focus();\r\n        return;\r\n      }\r\n\r\n      // 닉네임 체크\r\n      if ( nicknameElRef.value == null ) {\r\n        return;\r\n      }\r\n\r\n      const nicknameEl = nicknameElRef.value;\r\n      nicknameEl.value = nicknameEl.value.trim();\r\n      \r\n      if ( nicknameEl.value.length == 0 ) {\r\n        alert(\'닉네임을 입력해주세요.\');\r\n        nicknameEl.focus();\r\n        return;\r\n      }\r\n      \r\n      // 전화번호 체크\r\n      if ( cellphoneNoElRef.value == null ) {\r\n        return;\r\n      }\r\n\r\n      const cellphoneNoEl = cellphoneNoElRef.value;\r\n      cellphoneNoEl.value = cellphoneNoEl.value.trim();\r\n      \r\n      if ( cellphoneNoEl.value.length == 0 ) {\r\n        alert(\'전화번호를 입력해주세요.\');\r\n        cellphoneNoEl.focus();\r\n        return;\r\n      }\r\n\r\n      // 이메일 체크\r\n      if ( emailElRef.value == null ) {\r\n        return;\r\n      }\r\n      \r\n      const emailEl = emailElRef.value;\r\n      emailEl.value = emailEl.value.trim();\r\n      \r\n      if ( emailEl.value.length == 0 ) {\r\n        alert(\'이메일을 입력해주세요.\');\r\n        emailEl.focus();\r\n        return;\r\n      }\r\n      \r\n      //회원가입\r\n      join(loginIdEl.value, loginPwEl.value, nameEl.value, nicknameEl.value, cellphoneNoEl.value, emailEl.value);\r\n    }\r\n    function join(loginId:string, loginPw:string, name:string, nickname:string, cellphoneNo:string, email:string) {\r\n      mainApi.member_doJoin(loginId, loginPw, name, nickname, cellphoneNo, email)\r\n        .then(axiosResponse => {\r\n          \r\n          alert(axiosResponse.data.msg);\r\n          if ( axiosResponse.data.fail ) {\r\n            return;\r\n          }\r\n          \r\n          router.replace(\'/member/login?loginId=\' + loginId)\r\n        });\r\n    }\r\n    return {\r\n      checkAndJoin,\r\n      loginIdElRef,\r\n      loginPwElRef,\r\n      loginPwConfirmElRef,\r\n      nameElRef,\r\n      nicknameElRef,\r\n      cellphoneNoElRef,\r\n      emailElRef,\r\n    }\r\n  }\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n</style> \r\n```',8,1,0,0,0),(65,'2021-04-24 14:57:43','2021-04-24 15:28:33','P.Lamplight - 개발일지(초기셋팅, 리스트페이지 디자인, 백엔드 게시물불러오기,입력값보내기 테스트까지 완료)','# 초기셋팅, 리스트페이지 디자인, 백엔드 게시물불러오기,입력값보내기 테스트까지 완료\r\n\r\n## NOTE\r\n\r\n```\r\n없음\r\n```\r\n\r\n<br>\r\n## 주요소스코드\r\n\r\n### DirectorList.vue\r\n```html\r\n<template>\r\n  <!-- 메인-지도사 리스트 시작 -->\r\n  <section class=\"directorList-section bg-gray-500\">\r\n    <div class=\"mt-6\" v-bind:key=\"article.id\" v-for=\"article in state.articles\">\r\n      {{ article.title }} {{ article.regDate }}\r\n    </div>\r\n    <div class=\"h-2 bg-gray-500\"></div>\r\n    <!--리스트 search 시작-->\r\n    <form class=\"flex h-10 directorList-section-search m-2 text-right rounded-md\" v-on:submit=\"seacrchDirector\">\r\n      <input ref=\"searchKewoardElRef\" class=\"h-full w-full rounded-l-md pl-4\" type=\"text\" placeholder=\"검색어 입력\">\r\n      <button class=\"w-20 text-white rounded-r-md bg-blue-500\" type=\"submit\">검색</button>\r\n    </form>\r\n    <!--리스트 search 끝-->\r\n    <!--리스트 grid 시작-->\r\n    <div class=\"directorList-section-grid grid grid-cols-1 md:grid-cols-3 gap-3\">\r\n      <!--리스트 grid__body 시작-->\r\n      <div class=\"directorList-section-grid__body p-8 bg-white m-2 border rounded-xl\">\r\n        <!--프로필 이미지-->\r\n        <div class=\"flex justify-center overflow-hidden\">\r\n          <img class=\"h-96 rounded-lg object-cover object-center\" src=\"https://taegon.kim/wp-content/uploads/2018/05/image-5.png\">\r\n        </div>\r\n        <!--이름-->\r\n        <div class=\"text-center m-4\">\r\n          <router-link to=\"/director/profile\" class=\"text-indigo-500 font-bold text-xl md:text-2xl hover:text-gray-700\">\r\n            홍길동\r\n          </router-link>\r\n        </div>\r\n        <!--소개멘트-->\r\n        <h1 class=\"font-semibold text-gray-900 leading-none text-xl mt-1 mb-3 capitalize break-normal\">\r\n          간단하게 자신을 소개할 멘트를 작성해주세요.\r\n        </h1>\r\n        <!--활동이력-->\r\n        <div class=\"max-w-full border mt-2 p-1 pl-2 rounded-md\">\r\n          <p class=\"text-base font-medium tracking-wide text-gray-600 mt-1\">\r\n            지역: 대전광역시\r\n          </p>\r\n          <p class=\"text-base font-medium tracking-wide text-gray-600 mt-1\">\r\n            자격증: 장례지도사 2급\r\n          </p>\r\n          <p class=\"text-base font-medium tracking-wide text-gray-600 mt-1\">\r\n            경력: 5년\r\n          </p>\r\n        </div>\r\n        <!--평점-->\r\n        <div class=\"flex justify-center items-center w-full text-center mt-3\">\r\n          <div class=\"font-bold text-xl mr-5\">\r\n            \'홍길동\'님의 전체 평점\r\n          </div>\r\n          <div class=\"border rounded-full h-24 w-24 bg-yellow-500 flex justify-center items-center\">\r\n            <div class=\"font-bold text-2xl text-white\">\r\n              4.5/5\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <!--후기-->\r\n        <div class=\"flex justify-between items-end h-8 w-full border-b-4 font-semibold\">\r\n          <p class=\"pb-1\">\r\n            매칭 후기\r\n          </p>\r\n          <div class=\"text-sm cursor-pointer hover:text-blue-500\">\r\n            더보기\r\n          </div>\r\n        </div>\r\n        <div class=\"mt-2 border-b-2 border-t-2\">\r\n            <p class=\"text-gray-900 p-2\">\r\n              후기를 작성합니다. Lorem ipsum dolor sit amet consectetur adipisicing elit. \r\n            </p>\r\n            <p class=\"text-gray-500 p-2 text-sm\">\r\n              2021-03-11 15:15:15\r\n            </p>\r\n        </div>\r\n        <!--후기-->\r\n        <div class=\"mt-2 border-b-2 border-t-2\">\r\n            <p class=\"text-gray-900 p-2\">\r\n              후기를 작성합니다. ipsum, sapiente earum voluptates reiciendis fuga sit! Minima quaerat sit sed iusto consectetur.\r\n            </p>\r\n            <p class=\"text-gray-500 p-2 text-sm\">\r\n              2021-03-11 15:15:15\r\n            </p>\r\n        </div>\r\n        \r\n      </div>\r\n      <!--리스트 grid__body 끝-->\r\n    </div>\r\n    <!--리스트 grid 끝-->\r\n  </section>\r\n  <!-- 메인-지도사 리스트 끝 -->\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, reactive, ref, getCurrentInstance, onMounted, watch } from \'vue\'\r\nimport { IArticle } from \'../types/\'\r\nimport { MainApi } from \'../apis/\'\r\nimport { Router } from \'vue-router\'\r\n\r\nexport default defineComponent({\r\n  name: \'DirectorList\',\r\n\r\n  props: {\r\n    globalShare: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    boardId: {\r\n      type: Number,\r\n      required: true,\r\n      default:1\r\n    }\r\n  },\r\n\r\n  setup(props){\r\n    const router:Router = getCurrentInstance()?.appContext.config.globalProperties.$router;\r\n    const mainApi:MainApi = getCurrentInstance()?.appContext.config.globalProperties.$mainApi;\r\n   \r\n    const searchKewoardElRef = ref<HTMLInputElement>();\r\n\r\n\r\n\r\n    const state = reactive({\r\n      articles: [] as IArticle[]\r\n    });\r\n\r\n    function loadArticles(boardId:number){\r\n      mainApi.article_list(boardId)\r\n      .then(axiosResponse => {\r\n          state.articles = axiosResponse.data.body.articles;\r\n      });\r\n    }\r\n\r\n    // onMounted 바로 실행하는 것이 아닌 모든 것이 준비되었을때 실행됨\r\n    onMounted(() => {\r\n      loadArticles(props.boardId);\r\n    });\r\n\r\n    \r\n\r\n    function seacrchDirector(){\r\n\r\n      if(searchKewoardElRef.value == null ){\r\n        return;\r\n      }\r\n\r\n      const searchKewoard = searchKewoardElRef.value.value.trim();\r\n\r\n      if(searchKewoard.length == 0){\r\n        alert(\'키워드를 입력해주세요.\')\r\n        return;\r\n      }\r\n      \r\n      mainApi.article_doWrite(1, searchKewoard, searchKewoard)\r\n        .then(axiosResponse => {\r\n          alert(axiosResponse.data.msg);\r\n        });\r\n\r\n      \r\n    };\r\n\r\n\r\n    return{\r\n      state,\r\n      seacrchDirector,\r\n      searchKewoardElRef,\r\n      \r\n    }\r\n\r\n  }\r\n})\r\n</script>\r\n\r\n\r\n<style scoped>\r\n/* https://tailwindcomponents.com/component/blogs-posts-card */\r\n.directorList-section-grid__body{\r\n  min-width: 400px;\r\n}\r\n\r\n</style>\r\n\r\n```',8,1,0,0,0),(66,'2021-04-24 14:57:43','2021-04-24 15:28:34','P.Lamplight - 개발일지(리스트 검색기능 구현 진행중..)','# 리스트 검색기능 구현 진행중..\r\n\r\n## NOTE\r\n\r\n```\r\nhttps://learnvue.co/2020/12/setting-up-your-first-vue3-project-vue-3-0-release/\r\n\r\nhttps://codepen.io/rbqja5597/pen/XWjqOGN?editors=1000\r\n```\r\n\r\n<br>\r\n## 주요소스코드\r\n\r\n### DirectorList.vue\r\n```html\r\n<template>\r\n  <!-- 메인-지도사 리스트 시작 -->\r\n  <section class=\"directorList-section bg-gray-500\">\r\n    <div class=\"h-2 bg-gray-500\"></div>\r\n    <!--리스트 search 시작-->\r\n    <form class=\"flex h-10 directorList-section-search m-2 text-right rounded-md\">\r\n      <select ref=\"searchKeywordTypeElRef\" class=\"h-full w-full\" id=\"\">\r\n        <option value=\"name\">이름</option>\r\n        <option value=\"nickname\">닉네임</option>\r\n        <option value=\"loginId\">아이디</option>\r\n      </select>\r\n      <select ref=\"pageElRef\" id=\"\">\r\n        <option value=\"1\">1</option>\r\n        <option value=\"2\">2</option>\r\n      </select>\r\n      <input ref=\"searchKeywordElRef\" class=\"h-full w-full rounded-l-md pl-4\" type=\"text\" placeholder=\"검색어 입력\" v-model=\"searchKeyword\">\r\n      <button class=\"w-20 text-white rounded-r-md bg-blue-500\" type=\"button\">검색</button>\r\n    </form>\r\n    {{ searchKeyword }}\r\n    <!--리스트 search 끝-->\r\n    <!--리스트 grid 시작-->\r\n    <div class=\"directorList-section-grid grid grid-cols-1 md:grid-cols-3 gap-3 overflow-hidden\">\r\n      <!--리스트 grid__body 시작-->\r\n      <div class=\"mt-6\" v-bind:key=\"member.id\" v-for=\"member in filteredMembers\">\r\n      <div class=\"directorList-section-grid__body p-8 bg-white m-2 border rounded-xl\">\r\n        <!--프로필 이미지-->\r\n        <div class=\"flex justify-center overflow-hidden\">\r\n          <img class=\"h-96 rounded-lg object-cover object-center\" src=\"https://taegon.kim/wp-content/uploads/2018/05/image-5.png\">\r\n        </div>\r\n        <!--이름-->\r\n        <div class=\"text-center m-4\">\r\n          <router-link to=\"/director/profile\" class=\"text-indigo-500 font-bold text-xl md:text-2xl hover:text-gray-700\">\r\n            {{ member.name }}\r\n          </router-link>\r\n        </div>\r\n        <!--소개멘트-->\r\n        <h1 class=\"font-semibold text-gray-900 leading-none text-xl mt-1 mb-3 capitalize break-normal\">\r\n          소개멘트 작성란입니다.\r\n        </h1>\r\n        <!--활동이력-->\r\n        <div class=\"max-w-full border mt-2 p-1 pl-2 rounded-md\">\r\n          <p class=\"text-base font-medium tracking-wide text-gray-600 mt-1\">\r\n            {{ member.cellphoneNo }}\r\n          </p>\r\n          <p class=\"text-base font-medium tracking-wide text-gray-600 mt-1\">\r\n            {{ member.email }}\r\n          </p>\r\n          <p class=\"text-base font-medium tracking-wide text-gray-600 mt-1\">\r\n            {{ member.regDate }}\r\n          </p>\r\n        </div>\r\n        <button class=\"btn-primary mt-2 h-10 w-full rounded-md\">\r\n          선택\r\n        </button>\r\n        <!--평점-->\r\n        <div class=\"flex justify-center items-center w-full text-center mt-3\">\r\n          <div class=\"font-bold text-xl mr-5\">\r\n            \'{{ member.name }}\'님의 전체 평점\r\n          </div>\r\n          <div class=\"border rounded-full h-24 w-24 bg-yellow-500 flex justify-center items-center\">\r\n            <div class=\"font-bold text-2xl text-white\">\r\n              4.5/5\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <!--후기-->\r\n        <div class=\"flex justify-between items-end h-8 w-full border-b-4 font-semibold\">\r\n          <p class=\"pb-1\">\r\n            매칭 후기\r\n          </p>\r\n          <div class=\"text-sm cursor-pointer hover:text-blue-500\">\r\n            더보기\r\n          </div>\r\n        </div>\r\n        <div class=\"mt-2 border-b-2 border-t-2\">\r\n            <p class=\"text-gray-900 p-2\">\r\n              후기를 작성합니다. Lorem ipsum dolor sit amet consectetur adipisicing elit. \r\n            </p>\r\n            <p class=\"text-gray-500 p-2 text-sm\">\r\n              2021-03-11 15:15:15\r\n            </p>\r\n        </div>\r\n        <!--후기-->\r\n        <div class=\"mt-2 border-b-2 border-t-2\">\r\n            <p class=\"text-gray-900 p-2\">\r\n              후기를 작성합니다. ipsum, sapiente earum voluptates reiciendis fuga sit! Minima quaerat sit sed iusto consectetur.\r\n            </p>\r\n            <p class=\"text-gray-500 p-2 text-sm\">\r\n              2021-03-11 15:15:15\r\n            </p>\r\n        </div>\r\n        \r\n      </div>\r\n      </div>\r\n      <!--리스트 grid__body 끝-->\r\n    </div>\r\n    <!--리스트 grid 끝-->\r\n  </section>\r\n  <!-- 메인-지도사 리스트 끝 -->\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, reactive, ref, getCurrentInstance, onMounted, computed, watch } from \'vue\'\r\nimport { IMember } from \'../types/\'\r\nimport { MainApi } from \'../apis/\'\r\n\r\nexport default defineComponent({\r\n  name: \'DirectorList\',\r\n\r\n  props: {\r\n    globalShare: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    boardId: {\r\n      type: Number,\r\n      required: true,\r\n      default:1\r\n    },\r\n  },\r\n\r\n  setup(props){\r\n    const mainApi:MainApi = getCurrentInstance()?.appContext.config.globalProperties.$mainApi;\r\n\r\n    const state:any = reactive({\r\n      members: [] as IMember[],\r\n      searchKeyword:\'\'\r\n    });\r\n    //21.03.15 리스트 검색기능 구현 진행중..\r\n    //문제점\r\n    // - v-model 바로 안나옴\r\n    // - 검색타입, 페이지 값 어떻게 받고, 어떻게 넘길지.....\r\n    const filteredMembers = computed(() => {\r\n      return state.members.filter((member:IMember) => member.name.includes(state.searchKeyword))\r\n    })\r\n    \r\n    \r\n\r\n    function loadMembers(boardId:number, searchKeywordType:string, searchKeyword:string, page:number){\r\n      \r\n      mainApi.member_list(boardId, searchKeywordType, searchKeyword, page)\r\n      .then(axiosResponse => {\r\n          state.members = axiosResponse.data.body.members;\r\n      });\r\n\r\n    }\r\n\r\n    // onMounted 바로 실행하는 것이 아닌 모든 것이 준비되었을때 실행됨\r\n    onMounted(() => {\r\n      loadMembers(props.boardId, \"name\", \"\", 1);\r\n    });\r\n\r\n    return{\r\n      state,\r\n      filteredMembers,\r\n    }\r\n\r\n  }\r\n})\r\n</script>\r\n\r\n\r\n<style scoped>\r\n/* https://tailwindcomponents.com/component/blogs-posts-card */\r\n.directorList-section-grid__body{\r\n  min-width: 400px;\r\n}\r\n\r\n</style>\r\n```',8,1,0,0,0),(67,'2021-04-24 14:57:44','2021-04-24 15:28:34','P.Lamplight - 개발일지(리스트 필터링, 검색기능 구현)','# 리스트 필터링, 검색기능 구현\r\n\r\n## NOTE\r\n\r\n```\r\nprops\r\n-props 속성은 컴포넌트 간에 데이터를 전달할 수 있는 컴포넌트 통신 방법입니다.\r\n-props 속성을 기억할 때는 상위 컴포넌트에서 하위 컴포넌트로 내려보내는 \r\n 데이터 속성으로 기억하면 쉽습니다\r\n```\r\n\r\n<br>\r\n## 주요소스코드\r\n\r\n### DirectorList.vue\r\n```html\r\n<template>\r\n  <!-- 메인-지도사 리스트 시작 -->\r\n  <section class=\"directorList-section bg-gray-500\">\r\n    <div class=\"h-2 bg-gray-500\"></div>\r\n    <!--리스트 search 시작-->\r\n    <div class=\"flex h-10 directorList-section-search m-2 text-right rounded-md\">\r\n      <select class=\"h-full w-1/4 rounded-l-md\" id=\"\" @change=\"onChangeSearchKeywordType($event)\">\r\n        <option value=\"name\">이름</option>\r\n        <option value=\"address_state\">시/도</option>\r\n        <option value=\"address_city\">시/군/구</option>\r\n        <option value=\"address_street\">읍/면/동</option>\r\n      </select>\r\n      <input id=\"searchKeywordElRef\" ref=\"searchKeywordElRef\" class=\"h-full w-full pl-4\" type=\"text\" placeholder=\"검색어 입력\" :value=\"searchKeyword\" @keyup.enter=\"onInput($event)\" >\r\n      <button class=\"w-20 text-white rounded-r-md bg-blue-500\" type=\"button\">검색</button>\r\n    </div>\r\n    <!--리스트 search 끝-->\r\n    <!--리스트 grid 시작-->\r\n    <div class=\"directorList-section-grid grid grid-cols-1 md:grid-cols-3 gap-3 overflow-hidden\">\r\n      <!--리스트 grid__body 시작-->\r\n      <div class=\"mt-6\" v-bind:key=\"director.id\" v-for=\"director in filteredDirectors\">\r\n      <div class=\"directorList-section-grid__body p-8 bg-white m-2 border rounded-xl\">\r\n        <!--프로필 이미지-->\r\n        <div class=\"flex justify-center overflow-hidden\">\r\n          <img class=\"h-96 rounded-lg object-cover object-center\" :src=\"\'http://localhost:8090\' + director.extra__thumbImg\">\r\n        </div>\r\n        <!--이름-->\r\n        <div class=\"text-center m-4\">\r\n          <router-link to=\"/director/profile\" class=\"text-indigo-500 font-bold text-xl md:text-2xl hover:text-gray-700\">\r\n            {{ director.name }}\r\n          </router-link>\r\n        </div>\r\n        <!--소개멘트-->\r\n        <h1 class=\"font-semibold text-gray-900 leading-none text-xl mt-1 mb-3 capitalize break-normal\">\r\n          소개멘트 작성란입니다.\r\n        </h1>\r\n        <!--지역-->\r\n        <div class=\"max-w-full border mt-2 p-1 pl-2 rounded-md\">\r\n          지역\r\n          <p class=\"text-base font-medium tracking-wide text-gray-600 mt-1\">\r\n            - {{ director.address_state }} {{ director.address_city }} {{ director.address_street }}\r\n          </p>\r\n        </div>\r\n        <!--활동이력-->\r\n        <div class=\"max-w-full border mt-2 p-1 pl-2 rounded-md\">\r\n          활동이력\r\n          <p class=\"text-base font-medium tracking-wide text-gray-600 mt-1\">\r\n            - {{ director.cellphoneNo }}\r\n          </p>\r\n          <p class=\"text-base font-medium tracking-wide text-gray-600 mt-1\">\r\n            - {{ director.email }}\r\n          </p>\r\n          <p class=\"text-base font-medium tracking-wide text-gray-600 mt-1\">\r\n            - {{ director.regDate }}\r\n          </p>\r\n        </div>\r\n        <router-link :to=\"\'/client/doOrder?id=\' + director.id + \'&clientId=\' + globalShare.loginedClient.id\" class=\"block btn-primary mt-2 h-10 w-full rounded-md\">\r\n          선택\r\n        </router-link>\r\n        <!--평점-->\r\n        <div class=\"flex justify-center items-center w-full text-center mt-3\">\r\n          <div class=\"font-bold text-xl mr-5\">\r\n            \'{{ director.name }}\'님의 전체 평점\r\n          </div>\r\n          <div class=\"border rounded-full h-24 w-24 bg-yellow-500 flex justify-center items-center\">\r\n            <div class=\"font-bold text-2xl text-white\">\r\n              4.5/5\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <!--후기-->\r\n        <div class=\"flex justify-between items-end h-8 w-full border-b-4 font-semibold\">\r\n          <p class=\"pb-1\">\r\n            매칭 후기\r\n          </p>\r\n          <div class=\"text-sm cursor-pointer hover:text-blue-500\">\r\n            더보기\r\n          </div>\r\n        </div>\r\n        <div class=\"mt-2 border-b-2 border-t-2\">\r\n            <p class=\"text-gray-900 p-2\">\r\n              후기를 작성합니다. Lorem ipsum dolor sit amet consectetur adipisicing elit. \r\n            </p>\r\n            <p class=\"text-gray-500 p-2 text-sm\">\r\n              2021-03-11 15:15:15\r\n            </p>\r\n        </div>\r\n        <!--후기-->\r\n        <div class=\"mt-2 border-b-2 border-t-2\">\r\n            <p class=\"text-gray-900 p-2\">\r\n              후기를 작성합니다. ipsum, sapiente earum voluptates reiciendis fuga sit! Minima quaerat sit sed iusto consectetur.\r\n            </p>\r\n            <p class=\"text-gray-500 p-2 text-sm\">\r\n              2021-03-11 15:15:15\r\n            </p>\r\n        </div>\r\n        \r\n      </div>\r\n      </div>\r\n      <!--리스트 grid__body 끝-->\r\n    </div>\r\n    <!--리스트 grid 끝-->\r\n  </section>\r\n  <!-- 메인-지도사 리스트 끝 -->\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, reactive, ref, getCurrentInstance, onMounted, computed, watch } from \'vue\'\r\nimport { IDirector } from \'../types/\'\r\nimport { MainApi } from \'../apis/\'\r\n\r\nconst searchKeywordElRef = ref<HTMLInputElement>();\r\n\r\nexport default defineComponent({\r\n  name: \'DirectorList\',\r\n\r\n//props 속성은 컴포넌트 간에 데이터를 전달할 수 있는 컴포넌트 통신 방법입니다. \r\n//props 속성을 기억할 때는 상위 컴포넌트에서 하위 컴포넌트로 내려보내는 데이터 속성으로 기억하면 쉽습니다\r\n  props: {\r\n    globalShare: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n  },\r\n\r\n  setup(props){\r\n    const mainApi:MainApi = getCurrentInstance()?.appContext.config.globalProperties.$mainApi;\r\n\r\n    const state:any = reactive({\r\n      directors: [] as IDirector[],\r\n      searchKeyword: \'\' as String,\r\n      result:\'\' as String,\r\n    });\r\n\r\n    \r\n    //21.03.16 리스트 검색기능 구현 진행중..\r\n    // 문제점\r\n    // 검색버튼 클릭시에도 onInput이 되도록 개선 필요\r\n\r\n    let searchKeywordType = \"name\";\r\n    let page = \"1\";\r\n\r\n    function onInput(event:any){\r\n      state.searchKeyword = event.target.value;\r\n      return state.searchKeyword;\r\n    }\r\n\r\n    function onChangeSearchKeywordType(event:any){\r\n      searchKeywordType = event.target.value;\r\n      return searchKeywordType;\r\n    };\r\n\r\n    function onChangePageElRef(event:any){\r\n      page = event.target.value;\r\n      return page;\r\n    }\r\n\r\n    //alert(\"1\");\r\n    const filteredDirectors = computed(() => {\r\n      //alert(\"2\");\r\n      state.result = state.searchKeyword;\r\n\r\n      let filteredDirectors = state.directors;\r\n\r\n      if(searchKeywordType == \"name\"){\r\n        filteredDirectors = state.directors.filter((director:IDirector) => director.name.includes(state.searchKeyword))\r\n      }\r\n      if(searchKeywordType == \"address_state\"){\r\n        filteredDirectors = state.directors.filter((director:IDirector) => director.address_state.includes(state.searchKeyword))\r\n      }\r\n      if(searchKeywordType == \"address_city\"){\r\n        filteredDirectors = state.directors.filter((director:IDirector) => director.address_city.includes(state.searchKeyword))\r\n      }\r\n      if(searchKeywordType == \"address_street\"){\r\n        filteredDirectors = state.directors.filter((director:IDirector) => director.address_street.includes(state.searchKeyword))\r\n      }\r\n      return filteredDirectors\r\n    })\r\n    \r\n    \r\n\r\n    function loadDirectors(){\r\n      //alert(\"4\");\r\n      mainApi.director_list()\r\n      .then(axiosResponse => {\r\n          state.directors = axiosResponse.data.body.directors;\r\n      });\r\n\r\n    }\r\n\r\n    // onMounted 바로 실행하는 것이 아닌 모든 것이 준비되었을때 실행됨\r\n    onMounted(() => {\r\n      //alert(\"3\");\r\n      loadDirectors();\r\n    });\r\n\r\n    return{\r\n      state,\r\n      filteredDirectors,\r\n      onInput,\r\n      onChangeSearchKeywordType,\r\n      onChangePageElRef\r\n\r\n    }\r\n\r\n  }\r\n})\r\n</script>\r\n\r\n\r\n<style scoped>\r\n/* https://tailwindcomponents.com/component/blogs-posts-card */\r\n.directorList-section-grid__body{\r\n  min-width: 400px;\r\n}\r\n\r\n</style>\r\n```',8,1,0,0,0),(68,'2021-04-24 14:57:44','2021-04-24 15:28:35','P.Lamplight - 개발일지(testDB 구축, 지도사 리스팅,요청페이지, 요청페이지 상세보기,요청페이지 리스팅까지 DB연계 완료)','# testDB 구축, 지도사 리스팅,요청페이지, 요청페이지 상세보기,요청페이지 리스팅까지 DB연계 완료\r\n\r\n## NOTE\r\n\r\n```\r\nDB 설계\r\n\r\n필수\r\n - order 테이블\r\n - client 테이블\r\n - director 테이블\r\n - genFile 테이블\r\n\r\n나중에\r\n - comment 테이블\r\n - like 테이블\r\n```\r\n```\r\n-members값 가져오기[ㅇ]\r\n-요청페이지[ㅇ]\r\n-상세페이지[ㅇ]\r\n-리스트페이지[ㅇ]\r\nOrderDetailPage.vue--53\r\n<!-- 의뢰인/전문가 구분방법 고민 필요... -->\r\n```\r\n\r\n<br>\r\n## 주요소스코드\r\n\r\n### DB\r\n```sql\r\n# 데이터베이스 생성\r\nDROP DATABASE IF EXISTS lamplight;\r\nCREATE DATABASE lamplight;\r\nUSE lamplight;\r\n\r\n# 요청사항 테이블 생성\r\nCREATE TABLE `order` (\r\n    id INT(10) UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,\r\n    regDate DATETIME NOT NULL,\r\n    updateDate DATETIME NOT NULL,\r\n    option1 CHAR(100) NOT NULL,\r\n    option1qty INT(10) UNSIGNED NOT NULL,\r\n    option2 CHAR(100) NOT NULL,\r\n    option2qty INT(10) UNSIGNED NOT NULL,\r\n    option3 CHAR(100) NOT NULL,\r\n    option3qty INT(10) UNSIGNED NOT NULL,\r\n    option4 CHAR(100) NOT NULL,\r\n    option4qty INT(10) UNSIGNED NOT NULL,\r\n    option5 CHAR(100) NOT NULL,\r\n    option5qty INT(10) UNSIGNED NOT NULL,\r\n    `body` TEXT NOT NULL,\r\n    `directorId` INT(10) UNSIGNED NOT NULL,\r\n    `clientId` INT(10) UNSIGNED NOT NULL\r\n);\r\n\r\n# 의뢰인 회원 테이블 생성\r\nCREATE TABLE `client` (\r\n    id INT(10) UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,\r\n    regDate DATETIME NOT NULL,\r\n    updateDate DATETIME NOT NULL,\r\n    loginId CHAR(30) NOT NULL,\r\n    loginPw VARCHAR(100) NOT NULL,\r\n    authKey CHAR(80) NOT NULL,\r\n    authLevel SMALLINT(2) UNSIGNED DEFAULT 3 NOT NULL COMMENT \'(3=일반,7=관리자)\',\r\n    `name` CHAR(30) NOT NULL,\r\n    `nickname` CHAR(30) NOT NULL,\r\n    `email` CHAR(100) NOT NULL,\r\n    `cellphoneNo` CHAR(20) NOT NULL,\r\n    `address_state` CHAR(100) NOT NULL,\r\n    `address_city` CHAR(100) NOT NULL,\r\n    `address_street` CHAR(100) NOT NULL\r\n);\r\n\r\n# 로그인 ID로 검색했을 때\r\nALTER TABLE `client` ADD UNIQUE INDEX (`loginId`);\r\n\r\n# authKey 칼럼에 유니크 인덱스 추가\r\nALTER TABLE `client` ADD UNIQUE INDEX (`authKey`);\r\n\r\n# 회원, 테스트 데이터 생성\r\nINSERT INTO `client`\r\nSET regDate = NOW(),\r\n    updateDate = NOW(),\r\n    loginId = \'user1\',\r\n    loginPw = \'user1\',\r\n    authKey = \'authKey1__1\',\r\n    authLevel = 7,\r\n    `name` = \'user1\',\r\n    `nickname` = \'user1\',\r\n    `email` = \'user1@user1.com\',\r\n    `cellphoneNo` = 01011111111,\r\n    `address_state` = \'대전광역시\',\r\n    `address_city` = \'유성구\',\r\n    `address_street` = \'반석동\';\r\n\r\nINSERT INTO `client`\r\nSET regDate = NOW(),\r\n    updateDate = NOW(),\r\n    loginId = \'user2\',\r\n    loginPw = \'user2\',\r\n    authKey = \'authKey2__2\',\r\n    authLevel = 3,\r\n    `name` = \'user2\',\r\n    `nickname` = \'user2\',\r\n    `email` = \'user2@user2.com\',\r\n    `cellphoneNo` = 01022222222,\r\n    `address_state` = \'경기도\',\r\n    `address_city` = \'이천시\',\r\n    `address_street` = \'장수동\';\r\n\r\nINSERT INTO `client`\r\nSET regDate = NOW(),\r\n    updateDate = NOW(),\r\n    loginId = \'user3\',\r\n    loginPw = \'user3\',\r\n    authKey = \'authKey3__3\',\r\n    authLevel = 3,\r\n    `name` = \'user3\',\r\n    `nickname` = \'user3\',\r\n    `email` = \'user3@user3.com\',\r\n    `cellphoneNo` = 01033333333,\r\n    `address_state` = \'전라북도\',\r\n    `address_city` = \'익산시\',\r\n    `address_street` = \'익산동\';\r\n    \r\n# 의뢰인 회원 테이블 생성\r\nCREATE TABLE `director` (\r\n    id INT(10) UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,\r\n    regDate DATETIME NOT NULL,\r\n    updateDate DATETIME NOT NULL,\r\n    loginId CHAR(30) NOT NULL,\r\n    loginPw VARCHAR(100) NOT NULL,\r\n    authKey CHAR(80) NOT NULL,\r\n    authLevel SMALLINT(2) UNSIGNED DEFAULT 3 NOT NULL COMMENT \'(3=일반,7=관리자)\',\r\n    `name` CHAR(30) NOT NULL,\r\n    `nickname` CHAR(30) NOT NULL,\r\n    `email` CHAR(100) NOT NULL,\r\n    `cellphoneNo` CHAR(20) NOT NULL,\r\n    `address_state` CHAR(100) NOT NULL,\r\n    `address_city` CHAR(100) NOT NULL,\r\n    `address_street` CHAR(100) NOT NULL\r\n);\r\n\r\n# 로그인 ID로 검색했을 때\r\nALTER TABLE `director` ADD UNIQUE INDEX (`loginId`);\r\n\r\n# authKey 칼럼에 유니크 인덱스 추가\r\nALTER TABLE `director` ADD UNIQUE INDEX (`authKey`);\r\n\r\n# 회원, 테스트 데이터 생성\r\nINSERT INTO `director`\r\nSET regDate = NOW(),\r\n    updateDate = NOW(),\r\n    loginId = \'tester1\',\r\n    loginPw = \'tester1\',\r\n    authKey = \'authKey1__4\',\r\n    authLevel = 3,\r\n    `name` = \'tester1\',\r\n    `nickname` = \'tester1\',\r\n    `email` = \'tester1@tester1.com\',\r\n    `cellphoneNo` = 01044444444,\r\n    `address_state` = \'대전광역시\',\r\n    `address_city` = \'유성구\',\r\n    `address_street` = \'반석동\';\r\n\r\nINSERT INTO `director`\r\nSET regDate = NOW(),\r\n    updateDate = NOW(),\r\n    loginId = \'tester2\',\r\n    loginPw = \'tester2\',\r\n    authKey = \'authKey5__5\',\r\n    authLevel = 3,\r\n    `name` = \'tester2\',\r\n    `nickname` = \'tester2\',\r\n    `email` = \'tester2@tester2.com\',\r\n    `cellphoneNo` = 01055555555,\r\n    `address_state` = \'경기도\',\r\n    `address_city` = \'이천시\',\r\n    `address_street` = \'장수동\';\r\n\r\nINSERT INTO `director`\r\nSET regDate = NOW(),\r\n    updateDate = NOW(),\r\n    loginId = \'tester3\',\r\n    loginPw = \'tester3\',\r\n    authKey = \'authKey6__6\',\r\n    authLevel = 3,\r\n    `name` = \'tester3\',\r\n    `nickname` = \'tester3\',\r\n    `email` = \'tester3@tester3.com\',\r\n    `cellphoneNo` = 01066666666,\r\n    `address_state` = \'전라북도\',\r\n    `address_city` = \'익산시\',\r\n    `address_street` = \'익산동\';\r\n\r\n# 파일 테이블 추가\r\nCREATE TABLE genFile (\r\n  id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT, # 번호\r\n  regDate DATETIME DEFAULT NULL, # 작성날짜\r\n  updateDate DATETIME DEFAULT NULL, # 갱신날짜\r\n  delDate DATETIME DEFAULT NULL, # 삭제날짜\r\n  delStatus TINYINT(1) UNSIGNED NOT NULL DEFAULT 0, # 삭제상태(0:미삭제,1:삭제)\r\n  relTypeCode CHAR(50) NOT NULL, # 관련 데이터 타입(article, member)\r\n  relId INT(10) UNSIGNED NOT NULL, # 관련 데이터 번호\r\n  originFileName VARCHAR(100) NOT NULL, # 업로드 당시의 파일이름\r\n  fileExt CHAR(10) NOT NULL, # 확장자\r\n  typeCode CHAR(20) NOT NULL, # 종류코드 (common)\r\n  type2Code CHAR(20) NOT NULL, # 종류2코드 (attatchment)\r\n  fileSize INT(10) UNSIGNED NOT NULL, # 파일의 사이즈(byte)\r\n  fileExtTypeCode CHAR(10) NOT NULL, # 파일규격코드(img, video)\r\n  fileExtType2Code CHAR(10) NOT NULL, # 파일규격2코드(jpg, mp4)\r\n  fileNo SMALLINT(2) UNSIGNED NOT NULL, # 파일번호 (1)\r\n  fileDir CHAR(20) NOT NULL, # 파일이 저장되는 폴더명\r\n  PRIMARY KEY (id),\r\n  KEY relId (relId,relTypeCode,typeCode,type2Code,fileNo)\r\n); \r\n\r\n```\r\n',8,1,0,0,0),(69,'2021-04-24 14:57:45','2021-04-24 15:28:35','P.Lamplight - 개발일지(요청수정페이지,회원정보페이지,회원수정페이지까지 DB연계 완료)','# 요청수정페이지,회원정보페이지,회원수정페이지까지 DB연계 완료\r\n\r\n## NOTE\r\n\r\n```\r\n프론트엔드\r\n-요청 수정 페이지[ㅇ]\r\n-회원정보 수정 페이지[ㅇ]\r\n-평점/후기페이지[...]\r\n```\r\n```\r\n백엔드\r\n-order테이블 funeralHome,stepLevel 컬럼 추가\r\n```\r\n\r\n<br>\r\n## 주요소스코드\r\n\r\n### OrderModifyPage.vue\r\n```html\r\n<template>\r\n\r\n  <TitleBar>요청서 수정 페이지</TitleBar>\r\n\r\n  <section class=\"section section-article-write-form-box px-2\">\r\n    <div class=\"container mx-auto\">\r\n      <div class=\"px-6 py-6 bg-white rounded-lg shadow-md\">\r\n        <form v-if=\"globalShare.isLogined\" v-on:submit.prevent=\"checkAndModifyOrder\">\r\n          <FormRow title=\"제목\">\r\n            <input ref=\"modifiedOrderTitleElRef\" class=\"form-row-input\" type=\"text\" :value=\"state.order.title\">\r\n          </FormRow>\r\n          <FormRow title=\"장례식장\">\r\n            <input ref=\"modifiedOrderFuneralHomeElRef\" class=\"form-row-input\" type=\"text\" :value=\"state.order.funeralHome\">\r\n          </FormRow>\r\n          <FormRow title=\"옵션1\">\r\n            <input ref=\"modifiedOrderOption1ElRef\" class=\"form-row-input\" type=\"text\" :value=\"state.order.option1\">\r\n            <select ref=\"modifiedOrderOption1qtyElRef\" name=\"option1qty\" class=\"form-row-input w-full rounded-sm\" :value=\"state.order.option1qty\">\r\n						  <option value=\"1\">1</option>\r\n						  <option value=\"2\">2</option>\r\n						  <option value=\"3\">3</option>\r\n						  <option value=\"4\">4</option>\r\n						  <option value=\"5\">5</option>\r\n					  </select>\r\n          </FormRow>\r\n          <FormRow title=\"옵션2\">\r\n            <input ref=\"modifiedOrderOption2ElRef\" class=\"form-row-input\" type=\"text\" :value=\"state.order.option2\">\r\n            <select ref=\"modifiedOrderOption2qtyElRef\" name=\"option1qty\" class=\"form-row-input w-full rounded-sm\" :value=\"state.order.option2qty\">\r\n						  <option value=\"1\">1</option>\r\n						  <option value=\"2\">2</option>\r\n						  <option value=\"3\">3</option>\r\n						  <option value=\"4\">4</option>\r\n						  <option value=\"5\">5</option>\r\n					  </select>\r\n          </FormRow>\r\n          <FormRow title=\"옵션3\">\r\n            <input ref=\"modifiedOrderOption3ElRef\" class=\"form-row-input\" type=\"text\" :value=\"state.order.option3\">\r\n            <select ref=\"modifiedOrderOption3qtyElRef\" name=\"option1qty\" class=\"form-row-input w-full rounded-sm\" :value=\"state.order.option3qty\">\r\n						  <option value=\"1\">1</option>\r\n						  <option value=\"2\">2</option>\r\n						  <option value=\"3\">3</option>\r\n						  <option value=\"4\">4</option>\r\n						  <option value=\"5\">5</option>\r\n					  </select>\r\n          </FormRow>\r\n          <FormRow title=\"옵션4\">\r\n            <input ref=\"modifiedOrderOption4ElRef\" class=\"form-row-input\" type=\"text\" :value=\"state.order.option4\">\r\n            <select ref=\"modifiedOrderOption4qtyElRef\" name=\"option1qty\" class=\"form-row-input w-full rounded-sm\" :value=\"state.order.option4qty\">\r\n						  <option value=\"1\">1</option>\r\n						  <option value=\"2\">2</option>\r\n						  <option value=\"3\">3</option>\r\n						  <option value=\"4\">4</option>\r\n						  <option value=\"5\">5</option>\r\n					  </select>\r\n          </FormRow>\r\n          <FormRow title=\"옵션5\">\r\n            <input ref=\"modifiedOrderOption5ElRef\" class=\"form-row-input\" type=\"text\" :value=\"state.order.option5\">\r\n            <select ref=\"modifiedOrderOption5qtyElRef\" name=\"option1qty\" class=\"form-row-input w-full rounded-sm\" :value=\"state.order.option5qty\">\r\n						  <option value=\"1\">1</option>\r\n						  <option value=\"2\">2</option>\r\n						  <option value=\"3\">3</option>\r\n						  <option value=\"4\">4</option>\r\n						  <option value=\"5\">5</option>\r\n					  </select>\r\n          </FormRow>\r\n          <FormRow title=\"추가 요청 사항\">\r\n            <textarea ref=\"modifiedOrderBodyElRef\" class=\"form-row-input\" :value=\"state.order.body\"></textarea>\r\n          </FormRow>\r\n          <FormRow title=\"완료\">\r\n            <div class=\"btns\">\r\n              <input type=\"submit\" value=\"완료\" class=\"btn-primary\" />\r\n            </div>\r\n          </FormRow>\r\n        </form>\r\n        <div v-else>\r\n          <router-link class=\"btn-link\" to=\"/member/login\">로그인</router-link> 후 이용해주세요.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, reactive, ref, getCurrentInstance, onMounted, watch } from \'vue\'\r\nimport { MainApi } from \'../apis\'\r\nimport { Router } from \'vue-router\'\r\nimport { IOrder } from \'../types\'\r\n\r\n\r\nexport default defineComponent({\r\n  name: \'AddOrderPage\',\r\n\r\n  props: {\r\n    globalShare: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    id: {\r\n      type: Number,\r\n      required: true\r\n    }\r\n  },\r\n\r\n  setup(props){\r\n    const router:Router = getCurrentInstance()?.appContext.config.globalProperties.$router;\r\n    const mainApi:MainApi = getCurrentInstance()?.appContext.config.globalProperties.$mainApi;\r\n\r\n    const modifiedOrderTitleElRef = ref<HTMLInputElement>();\r\n    const modifiedOrderFuneralHomeElRef = ref<HTMLInputElement>();\r\n    const modifiedOrderOption1ElRef = ref<HTMLInputElement>();\r\n    const modifiedOrderOption1qtyElRef = ref<HTMLInputElement>();\r\n    const modifiedOrderOption2ElRef = ref<HTMLInputElement>();\r\n    const modifiedOrderOption2qtyElRef = ref<HTMLInputElement>();\r\n    const modifiedOrderOption3ElRef = ref<HTMLInputElement>();\r\n    const modifiedOrderOption3qtyElRef = ref<HTMLInputElement>();\r\n    const modifiedOrderOption4ElRef = ref<HTMLInputElement>();\r\n    const modifiedOrderOption4qtyElRef = ref<HTMLInputElement>();\r\n    const modifiedOrderOption5ElRef = ref<HTMLInputElement>();\r\n    const modifiedOrderOption5qtyElRef = ref<HTMLInputElement>();\r\n    const modifiedOrderBodyElRef = ref<HTMLInputElement>();\r\n\r\n    const state = reactive({\r\n      order: {} as IOrder\r\n    });\r\n\r\n    function loadOrder(id:number) {\r\n      mainApi.order_detail(id)\r\n      .then(axiosResponse => {\r\n        state.order = axiosResponse.data.body.order;\r\n      });\r\n    }\r\n    onMounted(() => {\r\n      loadOrder(props.id);\r\n    });\r\n    watch(() => props.id, (newValue, oldValue) => {\r\n      loadOrder(props.id);\r\n    })\r\n\r\n    /* 공백 체크 */\r\n    function checkAndModifyOrder(){\r\n\r\n      //일반적으로 안해도 되지만 typescript에서는 해야됨\r\n      //제목\r\n      if(modifiedOrderTitleElRef.value == null){\r\n        return;\r\n      }\r\n\r\n      const modifiedOrderTitleEl = modifiedOrderTitleElRef.value;\r\n      modifiedOrderTitleEl.value = modifiedOrderTitleEl.value.trim();\r\n\r\n      if(modifiedOrderTitleEl.value.length == 0){\r\n        alert(\'제목을 입력해 주세요.\')\r\n        modifiedOrderTitleEl.focus();\r\n        return;\r\n      }\r\n\r\n      //장례식장\r\n      if(modifiedOrderFuneralHomeElRef.value == null){\r\n        return;\r\n      }\r\n\r\n      const modifiedOrderFuneralHomeEl = modifiedOrderFuneralHomeElRef.value;\r\n      modifiedOrderFuneralHomeEl.value = modifiedOrderFuneralHomeEl.value.trim();\r\n\r\n      if(modifiedOrderFuneralHomeEl.value.length == 0){\r\n        alert(\'장례식장명을 입력해 주세요.\')\r\n        modifiedOrderFuneralHomeEl.focus();\r\n        return;\r\n      }\r\n\r\n      //옵션1\r\n      if(modifiedOrderOption1ElRef.value == null){\r\n        return;\r\n      }\r\n\r\n      const modifiedOrderOption1El = modifiedOrderOption1ElRef.value;\r\n      modifiedOrderOption1El.value = modifiedOrderOption1El.value.trim();\r\n\r\n      if(modifiedOrderOption1El.value.length == 0){\r\n        alert(\'옵션1을 입력해 주세요.\')\r\n        modifiedOrderOption1El.focus();\r\n        return;\r\n      }\r\n\r\n      //옵션1qty\r\n      if(modifiedOrderOption1qtyElRef.value == null){\r\n        return;\r\n      }\r\n\r\n      const modifiedOrderOption1qtyEl = modifiedOrderOption1qtyElRef.value;\r\n\r\n      //옵션2\r\n      if(modifiedOrderOption2ElRef.value == null){\r\n        return;\r\n      }\r\n\r\n      const modifiedOrderOption2El = modifiedOrderOption2ElRef.value;\r\n      modifiedOrderOption2El.value = modifiedOrderOption2El.value.trim();\r\n\r\n      if(modifiedOrderOption1El.value.length == 0){\r\n        alert(\'옵션2를 입력해 주세요.\')\r\n        modifiedOrderOption2El.focus();\r\n        return;\r\n      }\r\n\r\n      //옵션2qty\r\n      if(modifiedOrderOption2qtyElRef.value == null){\r\n        return;\r\n      }\r\n\r\n      const modifiedOrderOption2qtyEl = modifiedOrderOption2qtyElRef.value;\r\n\r\n      //옵션3\r\n      if(modifiedOrderOption3ElRef.value == null){\r\n        return;\r\n      }\r\n\r\n      const modifiedOrderOption3El = modifiedOrderOption3ElRef.value;\r\n      modifiedOrderOption3El.value = modifiedOrderOption3El.value.trim();\r\n\r\n      if(modifiedOrderOption3El.value.length == 0){\r\n        alert(\'옵션3을 입력해 주세요.\')\r\n        modifiedOrderOption3El.focus();\r\n        return;\r\n      }\r\n\r\n      //옵션3qty\r\n      if(modifiedOrderOption3qtyElRef.value == null){\r\n        return;\r\n      }\r\n\r\n      const modifiedOrderOption3qtyEl = modifiedOrderOption3qtyElRef.value;\r\n\r\n      //옵션4\r\n      if(modifiedOrderOption4ElRef.value == null){\r\n        return;\r\n      }\r\n\r\n      const modifiedOrderOption4El = modifiedOrderOption4ElRef.value;\r\n      modifiedOrderOption4El.value = modifiedOrderOption4El.value.trim();\r\n\r\n      if(modifiedOrderOption4El.value.length == 0){\r\n        alert(\'옵션4를 입력해 주세요.\')\r\n        modifiedOrderOption4El.focus();\r\n        return;\r\n      }\r\n\r\n      //옵션4qty\r\n      if(modifiedOrderOption4qtyElRef.value == null){\r\n        return;\r\n      }\r\n\r\n      const modifiedOrderOption4qtyEl = modifiedOrderOption4qtyElRef.value;\r\n\r\n      //옵션5\r\n      if(modifiedOrderOption5ElRef.value == null){\r\n        return;\r\n      }\r\n\r\n      const modifiedOrderOption5El = modifiedOrderOption5ElRef.value;\r\n      modifiedOrderOption5El.value = modifiedOrderOption5El.value.trim();\r\n\r\n      if(modifiedOrderOption5El.value.length == 0){\r\n        alert(\'옵션5를 입력해 주세요.\')\r\n        modifiedOrderOption5El.focus();\r\n        return;\r\n      }\r\n\r\n      //옵션5qty\r\n      if(modifiedOrderOption5qtyElRef.value == null){\r\n        return;\r\n      }\r\n\r\n      const modifiedOrderOption5qtyEl = modifiedOrderOption5qtyElRef.value;\r\n\r\n\r\n      //body\r\n      if(modifiedOrderBodyElRef.value == null){\r\n        return;\r\n      }\r\n\r\n      const modifiedOrderBodyEl = modifiedOrderBodyElRef.value;\r\n      modifiedOrderBodyEl.value = modifiedOrderBodyEl.value.trim();\r\n\r\n      if(modifiedOrderBodyEl.value.length == 0){\r\n        alert(\'내용을 입력해 주세요.\')\r\n        modifiedOrderBodyEl.focus();\r\n        return;\r\n      }\r\n\r\n      // 작성 함수로 보내기\r\n      modifyOrder(props.id, modifiedOrderTitleEl.value, modifiedOrderFuneralHomeEl.value, modifiedOrderOption1El.value, parseInt(modifiedOrderOption1qtyEl.value), modifiedOrderOption2El.value, parseInt(modifiedOrderOption2qtyEl.value), modifiedOrderOption3El.value, parseInt(modifiedOrderOption3qtyEl.value), modifiedOrderOption4El.value, parseInt(modifiedOrderOption4qtyEl.value), modifiedOrderOption5El.value, parseInt(modifiedOrderOption5qtyEl.value), modifiedOrderBodyEl.value, state.order.directorId, props.globalShare.loginedMember.id);\r\n\r\n    }\r\n\r\n    //typescript에서는 title:string, body:string 이런식으로 type을 적어주어야 한다\r\n      function modifyOrder(id:number, title:string, funeralHome:string, option1:string, option1qty:number, option2:string, option2qty:number, option3:string, option3qty:number, option4:string, option4qty:number, option5:string, option5qty:number, body:string, directorId:number, clientId:number){\r\n       \r\n        mainApi.order_doModify(id, title, funeralHome, option1, option1qty, option2, option2qty, option3, option3qty, option4, option4qty, option5, option5qty, body, directorId, clientId)\r\n        .then(axiosResponse => {\r\n          alert(axiosResponse.data.msg);\r\n          \r\n          // 로그인이 fail 상태이면 리턴\r\n          if ( axiosResponse.data.fail ) {\r\n            return;\r\n          }\r\n\r\n          //authKey가 있는 상태에서 가능\r\n          const modifiedOrderId = axiosResponse.data.body.id;\r\n          //alert(modifiedArticleId + \"번 게시물 등록 완료!!\");\r\n\r\n          router.replace(\"detail?id=\" + modifiedOrderId);\r\n        });\r\n      }\r\n\r\n    return{\r\n        state,\r\n        modifiedOrderTitleElRef,\r\n        modifiedOrderFuneralHomeElRef,\r\n        modifiedOrderOption1ElRef,\r\n        modifiedOrderOption1qtyElRef,\r\n        modifiedOrderOption2ElRef,\r\n        modifiedOrderOption2qtyElRef,\r\n        modifiedOrderOption3ElRef,\r\n        modifiedOrderOption3qtyElRef,\r\n        modifiedOrderOption4ElRef,\r\n        modifiedOrderOption4qtyElRef,\r\n        modifiedOrderOption5ElRef,\r\n        modifiedOrderOption5qtyElRef,\r\n        modifiedOrderBodyElRef,\r\n        checkAndModifyOrder,\r\n      \r\n    }\r\n\r\n  }\r\n  \r\n})\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n```\r\n\r\n### MemberModifyPage.vue\r\n```html\r\n<template>\r\n  <TitleBar>회원정보수정</TitleBar>\r\n\r\n  <section class=\"section section-member-modify-form px-2\">\r\n    <div class=\"container mx-auto\">\r\n      <div class=\"px-6 py-6 bg-white rounded-lg shadow-md\">\r\n        <form v-if=\"globalShare.isLogined\" v-on:submit.prevent=\"checkAndModify\">\r\n          <div title=\"프로필 이미지\">\r\n            <img class=\"h-96 rounded-lg object-cover object-center\" :src=\"\'http://localhost:8090\' + state.member.extra__thumbImg\">\r\n          </div>\r\n          <FormRow title=\"프로필 이미지\">\r\n            <input ref=\"profileImgElRef\" class=\"form-row-input\" type=\"file\">\r\n          </FormRow>\r\n          <FormRow title=\"회원유형\">\r\n            <select ref=\"authLevelElRef\" :value=\"state.member.authLevel\">\r\n              <option value=\"3\">일반회원</option>\r\n              <option value=\"4\">도우미</option>\r\n              <option value=\"5\">지도사</option>\r\n            </select>\r\n          </FormRow>\r\n          <FormRow title=\"아이디\">\r\n            <input ref=\"loginIdElRef\" class=\"form-row-input\" type=\"text\" :value=\"state.member.loginId\">\r\n          </FormRow>\r\n          <FormRow title=\"비밀번호\">\r\n            <input ref=\"loginPwElRef\" class=\"form-row-input\" type=\"password\" placeholder=\"비밀번호를 입력해주세요.\">\r\n          </FormRow>\r\n          <FormRow title=\"비밀번호 확인\">\r\n            <input ref=\"loginPwConfirmElRef\" class=\"form-row-input\" type=\"password\" placeholder=\"비밀번호 확인을 해주세요.\">\r\n          </FormRow>\r\n          <FormRow title=\"이름\">\r\n            <input ref=\"nameElRef\" class=\"form-row-input\" type=\"text\" :value=\"state.member.name\">\r\n          </FormRow>\r\n          <FormRow title=\"닉네임\">\r\n            <input ref=\"nicknameElRef\" class=\"form-row-input\" type=\"text\" :value=\"state.member.nickname\">\r\n          </FormRow>\r\n          <FormRow title=\"전화번호\">\r\n            <input ref=\"cellphoneNoElRef\" class=\"form-row-input\" type=\"tel\" maxlength=\"11\" :value=\"state.member.cellphoneNo\">\r\n          </FormRow>\r\n          <FormRow title=\"이메일\">\r\n            <input ref=\"emailElRef\" class=\"form-row-input\" type=\"email\" :value=\"state.member.email\">\r\n          </FormRow>\r\n          <FormRow title=\"시/도\">\r\n            <input ref=\"addressElRef\" class=\"form-row-input\" type=\"text\" :value=\"state.member.address\">\r\n          </FormRow>\r\n          <FormRow title=\"완료\">\r\n            <div class=\"btns\">\r\n              <input type=\"submit\" value=\"완료\" class=\"btn-primary\" />\r\n            </div>\r\n          </FormRow>\r\n        </form>\r\n        <div v-else>\r\n          이미 로그인 상태입니다. <router-link class=\"btn-link\" to=\"/\">홈</router-link> 으로 이동\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, ref, reactive, getCurrentInstance, onMounted, watch } from \'vue\'\r\nimport { MainApi } from \'../apis\'\r\nimport { Router } from \'vue-router\'\r\nimport { IMember } from \'../types\'\r\n\r\nexport default defineComponent({\r\n  name: \'MemberJoinPage\',\r\n  props: {\r\n    globalShare: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    id: {\r\n      type: Number,\r\n      required: true\r\n    }\r\n  },\r\n  setup(props) {\r\n    const router:Router = getCurrentInstance()?.appContext.config.globalProperties.$router;\r\n    const mainApi:MainApi = getCurrentInstance()?.appContext.config.globalProperties.$mainApi;\r\n    const profileImgElRef = ref<HTMLInputElement>();\r\n    const authLevelElRef = ref<HTMLInputElement>();\r\n    const loginIdElRef = ref<HTMLInputElement>();\r\n    const loginPwElRef = ref<HTMLInputElement>();\r\n    const loginPwConfirmElRef = ref<HTMLInputElement>();\r\n    const nameElRef = ref<HTMLInputElement>();\r\n    const nicknameElRef = ref<HTMLInputElement>();\r\n    const cellphoneNoElRef = ref<HTMLInputElement>();\r\n    const emailElRef = ref<HTMLInputElement>();\r\n    const addressElRef = ref<HTMLInputElement>();\r\n\r\n\r\n    const state = reactive({\r\n      member: {} as IMember\r\n    });\r\n\r\n    function loadMember(id:number) {\r\n      mainApi.member_detail(id)\r\n      .then(axiosResponse => {\r\n        state.member = axiosResponse.data.body.member;\r\n      });\r\n    }\r\n    onMounted(() => {\r\n      loadMember(props.id);\r\n    });\r\n    watch(() => props.id, (newValue, oldValue) => {\r\n      loadMember(props.id);\r\n    })\r\n\r\n   \r\n    function checkAndModify() {\r\n       // 아이디 체크\r\n      if ( loginIdElRef.value == null ) {\r\n        return;\r\n      }\r\n      \r\n      const loginIdEl = loginIdElRef.value;\r\n      loginIdEl.value = loginIdEl.value.trim();\r\n      \r\n      if ( loginIdEl.value.length == 0 ) {\r\n        alert(\'아이디를 입력해주세요.\');\r\n        loginIdEl.focus();\r\n        return;\r\n      }\r\n      // 비번 체크\r\n      if ( loginPwElRef.value == null ) {\r\n        return;\r\n      }\r\n\r\n      const loginPwEl = loginPwElRef.value;\r\n      loginPwEl.value = loginPwEl.value.trim();\r\n      \r\n      if ( loginPwEl.value.length == 0 ) {\r\n        alert(\'비밀번호를 입력해주세요.\');\r\n        loginPwEl.focus();\r\n        return;\r\n      }\r\n      \r\n      // 비번확인 체크\r\n      if ( loginPwConfirmElRef.value == null ) {\r\n        return;\r\n      }\r\n\r\n      const loginPwConfirmEl = loginPwConfirmElRef.value;\r\n      \r\n      if ( loginPwEl.value != loginPwConfirmEl.value ) {\r\n        alert(\'로그인 비번이 일치하지 않습니다.\');\r\n        loginPwConfirmEl.focus();\r\n        return;\r\n      }\r\n\r\n      // 이름 체크\r\n      if ( nameElRef.value == null ) {\r\n        return;\r\n      }\r\n\r\n      const nameEl = nameElRef.value;\r\n      nameEl.value = nameEl.value.trim();\r\n\r\n      if ( nameEl.value.length == 0 ) {\r\n        alert(\'이름을 입력해주세요.\');\r\n        nameEl.focus();\r\n        return;\r\n      }\r\n\r\n      // 닉네임 체크\r\n      if ( nicknameElRef.value == null ) {\r\n        return;\r\n      }\r\n\r\n      const nicknameEl = nicknameElRef.value;\r\n      nicknameEl.value = nicknameEl.value.trim();\r\n      \r\n      if ( nicknameEl.value.length == 0 ) {\r\n        alert(\'닉네임을 입력해주세요.\');\r\n        nicknameEl.focus();\r\n        return;\r\n      }\r\n      \r\n      // 전화번호 체크\r\n      if ( cellphoneNoElRef.value == null ) {\r\n        return;\r\n      }\r\n\r\n      const cellphoneNoEl = cellphoneNoElRef.value;\r\n      cellphoneNoEl.value = cellphoneNoEl.value.trim();\r\n      \r\n      if ( cellphoneNoEl.value.length == 0 ) {\r\n        alert(\'전화번호를 입력해주세요.\');\r\n        cellphoneNoEl.focus();\r\n        return;\r\n      }\r\n\r\n      // 이메일 체크\r\n      if ( emailElRef.value == null ) {\r\n        return;\r\n      }\r\n      \r\n      const emailEl = emailElRef.value;\r\n      emailEl.value = emailEl.value.trim();\r\n      \r\n      if ( emailEl.value.length == 0 ) {\r\n        alert(\'이메일을 입력해주세요.\');\r\n        emailEl.focus();\r\n        return;\r\n      }\r\n\r\n      // 시/도 주소 체크\r\n      if ( addressElRef.value == null ) {\r\n        return;\r\n      }\r\n      \r\n      const addressEl = addressElRef.value;\r\n      addressEl.value = addressEl.value.trim();\r\n      \r\n      if ( addressEl.value.length == 0 ) {\r\n        alert(\'시/도를 입력해주세요.\');\r\n        addressEl.focus();\r\n        return;\r\n      }\r\n\r\n     \r\n\r\n      if(authLevelElRef.value == null){\r\n        return\r\n      }\r\n      \r\n      const authLevelEl = authLevelElRef.value;\r\n      \r\n      const startFileUpload = (onSuccess:Function) => {\r\n        // ! => 반전\r\n        // a = undefinded(or null) / !a = true / !!a = flase란 의미\r\n        // ? => 만약 profileImgElRef.value?까지가 null이면 여기까지만 실행하겠다라는 의미\r\n        // 즉, !!!profileImgElRef.value?.files의 의미는 해당 파일이 없는지 물어보는 것\r\n        // 없으면 true\r\n        if(!!!profileImgElRef.value?.files){\r\n          onSuccess(\"\");  //파일이 없으면 다음 과정 생략하고 onSuccess() 즉시 실행\r\n          return;\r\n        }\r\n\r\n        mainApi.common_genFile_doUpload(profileImgElRef.value?.files[0])\r\n        .then(axiosResponse => {\r\n          \r\n          if ( axiosResponse.data.fail ) {\r\n            alert(axiosResponse.data.msg);\r\n            return;\r\n          }\r\n          else{\r\n            onSuccess(axiosResponse.data.body.genFileIdsStr);\r\n          }\r\n        });\r\n      };\r\n\r\n\r\n      //회원가입 join함수 시작\r\n      //파일첨부기능 추가로 인해 로직 변경\r\n      //join(loginIdEl.value, loginPwEl.value, nameEl.value, nicknameEl.value, cellphoneNoEl.value, emailEl.value);\r\n      const startModify = (genFileIdsStr:string) =>{\r\n        modify(props.id, parseInt(authLevelEl.value), loginIdEl.value, loginPwEl.value, nameEl.value, nicknameEl.value, cellphoneNoEl.value, emailEl.value, addressEl.value,  genFileIdsStr);\r\n      };\r\n\r\n      //startFileUpload 로직을 먼저 실행한 후\r\n      //onSuccess 즉, startJoin를 실행한다. onSuccess = startJoin\r\n      //실행 순서 : 1.첨부파일이 있는지 확인하고 업로드까지 진행하는 startFileUpload함수 종료 후 2.회원가입 join함수가 실행된다.\r\n      startFileUpload(startModify);\r\n\r\n\r\n      \r\n    }\r\n    function modify(id:number, authLevel:number, loginId:string, loginPw:string, name:string, nickname:string, cellphoneNo:string, email:string, address:string, genFileIdsStr:string) {\r\n      mainApi.member_doModify(id, authLevel, loginId, loginPw, name, nickname, cellphoneNo, email, address, genFileIdsStr)\r\n        .then(axiosResponse => {\r\n          \r\n          alert(axiosResponse.data.msg);\r\n          if ( axiosResponse.data.fail ) {\r\n            return;\r\n          }\r\n          \r\n          router.replace(\'/member/detail?id=\' + id)\r\n        });\r\n    }\r\n    return {\r\n      state,\r\n      checkAndModify,\r\n      profileImgElRef,\r\n      authLevelElRef,\r\n      loginIdElRef,\r\n      loginPwElRef,\r\n      loginPwConfirmElRef,\r\n      nameElRef,\r\n      nicknameElRef,\r\n      cellphoneNoElRef,\r\n      emailElRef,\r\n      addressElRef\r\n    }\r\n  }\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n</style> \r\n```\r\n\r\n### DB\r\n```sql\r\n# 데이터베이스 생성\r\nDROP DATABASE IF EXISTS lamplight;\r\nCREATE DATABASE lamplight;\r\nUSE lamplight;\r\n\r\n# 요청사항 테이블 생성\r\nCREATE TABLE `order` (\r\n    id INT(10) UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,\r\n    regDate DATETIME NOT NULL,\r\n    updateDate DATETIME NOT NULL,\r\n    option1 CHAR(200) NOT NULL,\r\n    option1qty INT(10) UNSIGNED NOT NULL,\r\n    option2 CHAR(200) NOT NULL,\r\n    option2qty INT(10) UNSIGNED NOT NULL,\r\n    option3 CHAR(200) NOT NULL,\r\n    option3qty INT(10) UNSIGNED NOT NULL,\r\n    option4 CHAR(200) NOT NULL,\r\n    option4qty INT(10) UNSIGNED NOT NULL,\r\n    option5 CHAR(200) NOT NULL,\r\n    option5qty INT(10) UNSIGNED NOT NULL,\r\n    title CHAR(200) NOT NULL,\r\n    `body` TEXT NOT NULL,\r\n    funeralHome CHAR(200) NOT NULL,\r\n    `directorId` INT(10) UNSIGNED NOT NULL,\r\n    `clientId` INT(10) UNSIGNED NOT NULL,\r\n    stepLevel SMALLINT(2) UNSIGNED DEFAULT 1 NOT NULL COMMENT \'(1=의뢰요청(의뢰검토),2=의뢰승인(장례준비),3=장례진행중,4=장례종료(결제미완료),5=결제완료)\'\r\n);\r\n\r\n# 테스트 의뢰 생성\r\nINSERT INTO `order`\r\nSET regDate = NOW(),\r\n    updateDate = NOW(),\r\n    option1 = \'옵션1\',\r\n    option1qty = 10,\r\n    option2 = \'옵션2\',\r\n    option2qty = 20,\r\n    option3 = \'옵션3\',\r\n    option3qty = 30,\r\n    option4 = \'옵션4\',\r\n    option4qty = 40,\r\n    option5 = \'옵션5\',\r\n    option5qty = 50,\r\n    title = \'user2님 의뢰\',\r\n    funeralHome = \'대전장례식장\',\r\n    `body` = \'기타 요청 사항\',\r\n    `directorId` = 4,\r\n    `clientId` = 2;\r\n\r\nINSERT INTO `order`\r\nSET regDate = NOW(),\r\n    updateDate = NOW(),\r\n    option1 = \'옵션1\',\r\n    option1qty = 10,\r\n    option2 = \'옵션2\',\r\n    option2qty = 20,\r\n    option3 = \'옵션3\',\r\n    option3qty = 30,\r\n    option4 = \'옵션4\',\r\n    option4qty = 40,\r\n    option5 = \'옵션5\',\r\n    option5qty = 50,\r\n    title = \'user3님 의뢰\',\r\n    funeralHome = \'익산장례식장\',\r\n    `body` = \'기타 요청 사항2\',\r\n    `directorId` = 4,\r\n    `clientId` = 3;\r\n \r\n# 회원 테이블 생성\r\nCREATE TABLE `member` (\r\n    id INT(10) UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,\r\n    regDate DATETIME NOT NULL,\r\n    updateDate DATETIME NOT NULL,\r\n    loginId CHAR(30) NOT NULL,\r\n    loginPw VARCHAR(100) NOT NULL,\r\n    authKey CHAR(80) NOT NULL,\r\n    authLevel SMALLINT(2) UNSIGNED DEFAULT 3 NOT NULL COMMENT \'(3=의뢰인,4=도우미,5=지도사,7=관리자)\',\r\n    `name` CHAR(30) NOT NULL,\r\n    `nickname` CHAR(30) NOT NULL,\r\n    `email` CHAR(100) NOT NULL,\r\n    `cellphoneNo` CHAR(20) NOT NULL,\r\n    `address` CHAR(100) NOT NULL\r\n\r\n);\r\n\r\n# 로그인 ID로 검색했을 때\r\nALTER TABLE `member` ADD UNIQUE INDEX (`loginId`);\r\n\r\n# authKey 칼럼에 유니크 인덱스 추가\r\nALTER TABLE `member` ADD UNIQUE INDEX (`authKey`);\r\n\r\n# 회원, 테스트 데이터 생성\r\nINSERT INTO `member`\r\nSET regDate = NOW(),\r\n    updateDate = NOW(),\r\n    loginId = \'user1\',\r\n    loginPw = \'user1\',\r\n    authKey = \'authKey1__1\',\r\n    authLevel = 7,\r\n    `name` = \'user1\',\r\n    `nickname` = \'user1\',\r\n    `email` = \'user1@user1.com\',\r\n    `cellphoneNo` = 01011111111,\r\n    `address` = \'대전광역시\';\r\n\r\nINSERT INTO `member`\r\nSET regDate = NOW(),\r\n    updateDate = NOW(),\r\n    loginId = \'user2\',\r\n    loginPw = \'user2\',\r\n    authKey = \'authKey1__2\',\r\n    authLevel = 3,\r\n    `name` = \'user2\',\r\n    `nickname` = \'user2\',\r\n    `email` = \'user2@user2.com\',\r\n    `cellphoneNo` = 01022222222,\r\n    `address` = \'경기도\';\r\n\r\nINSERT INTO `member`\r\nSET regDate = NOW(),\r\n    updateDate = NOW(),\r\n    loginId = \'user3\',\r\n    loginPw = \'user3\',\r\n    authKey = \'authKey1__3\',\r\n    authLevel = 3,\r\n    `name` = \'user3\',\r\n    `nickname` = \'user3\',\r\n    `email` = \'user3@user3.com\',\r\n    `cellphoneNo` = 01033333333,\r\n    `address` = \'전라북도\';\r\n    \r\nINSERT INTO `member`\r\nSET regDate = NOW(),\r\n    updateDate = NOW(),\r\n    loginId = \'tester1\',\r\n    loginPw = \'tester1\',\r\n    authKey = \'authKey1__4\',\r\n    authLevel = 5,\r\n    `name` = \'tester1\',\r\n    `nickname` = \'tester1\',\r\n    `email` = \'tester1@tester1.com\',\r\n    `cellphoneNo` = 01044444444,\r\n    `address` = \'대전광역시\';\r\n\r\n\r\nINSERT INTO `member`\r\nSET regDate = NOW(),\r\n    updateDate = NOW(),\r\n    loginId = \'tester2\',\r\n    loginPw = \'tester2\',\r\n    authKey = \'authKey1__5\',\r\n    authLevel = 5,\r\n    `name` = \'tester2\',\r\n    `nickname` = \'tester2\',\r\n    `email` = \'tester2@tester2.com\',\r\n    `cellphoneNo` = 01055555555,\r\n    `address` = \'경기도\';\r\n\r\nINSERT INTO `member`\r\nSET regDate = NOW(),\r\n    updateDate = NOW(),\r\n    loginId = \'tester3\',\r\n    loginPw = \'tester3\',\r\n    authKey = \'authKey1__6\',\r\n    authLevel = 5,\r\n    `name` = \'tester3\',\r\n    `nickname` = \'tester3\',\r\n    `email` = \'tester3@tester3.com\',\r\n    `cellphoneNo` = 01066666666,\r\n    `address` = \'전라북도\';\r\n    \r\nINSERT INTO `member`\r\nSET regDate = NOW(),\r\n    updateDate = NOW(),\r\n    loginId = \'tester4\',\r\n    loginPw = \'tester4\',\r\n    authKey = \'authKey1__7\',\r\n    authLevel = 5,\r\n    `name` = \'tester4\',\r\n    `nickname` = \'tester4\',\r\n    `email` = \'tester4@tester4.com\',\r\n    `cellphoneNo` = 01044444444,\r\n    `address` = \'대전광역시\';\r\n\r\n\r\nINSERT INTO `member`\r\nSET regDate = NOW(),\r\n    updateDate = NOW(),\r\n    loginId = \'tester5\',\r\n    loginPw = \'tester5\',\r\n    authKey = \'authKey1__8\',\r\n    authLevel = 5,\r\n    `name` = \'tester5\',\r\n    `nickname` = \'tester5\',\r\n    `email` = \'tester5@tester5.com\',\r\n    `cellphoneNo` = 01055555555,\r\n    `address` = \'경기도\';\r\n\r\nINSERT INTO `member`\r\nSET regDate = NOW(),\r\n    updateDate = NOW(),\r\n    loginId = \'tester6\',\r\n    loginPw = \'tester6\',\r\n    authKey = \'authKey1__9\',\r\n    authLevel = 5,\r\n    `name` = \'tester6\',\r\n    `nickname` = \'tester6\',\r\n    `email` = \'tester6@tester6.com\',\r\n    `cellphoneNo` = 01066666666,\r\n    `address` = \'전라북도\';\r\n\r\n# 파일 테이블 추가\r\nCREATE TABLE genFile (\r\n  id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT, # 번호\r\n  regDate DATETIME DEFAULT NULL, # 작성날짜\r\n  updateDate DATETIME DEFAULT NULL, # 갱신날짜\r\n  delDate DATETIME DEFAULT NULL, # 삭제날짜\r\n  delStatus TINYINT(1) UNSIGNED NOT NULL DEFAULT 0, # 삭제상태(0:미삭제,1:삭제)\r\n  relTypeCode CHAR(50) NOT NULL, # 관련 데이터 타입(article, member)\r\n  relId INT(10) UNSIGNED NOT NULL, # 관련 데이터 번호\r\n  originFileName VARCHAR(100) NOT NULL, # 업로드 당시의 파일이름\r\n  fileExt CHAR(10) NOT NULL, # 확장자\r\n  typeCode CHAR(20) NOT NULL, # 종류코드 (common)\r\n  type2Code CHAR(20) NOT NULL, # 종류2코드 (attatchment)\r\n  fileSize INT(10) UNSIGNED NOT NULL, # 파일의 사이즈(byte)\r\n  fileExtTypeCode CHAR(10) NOT NULL, # 파일규격코드(img, video)\r\n  fileExtType2Code CHAR(10) NOT NULL, # 파일규격2코드(jpg, mp4)\r\n  fileNo SMALLINT(2) UNSIGNED NOT NULL, # 파일번호 (1)\r\n  fileDir CHAR(20) NOT NULL, # 파일이 저장되는 폴더명\r\n  PRIMARY KEY (id),\r\n  KEY relId (relId,relTypeCode,typeCode,type2Code,fileNo)\r\n); \r\n```',8,1,0,0,0),(70,'2021-04-24 14:57:45','2021-04-24 15:28:36','P.Lamplight - 개발일지(리뷰작성, 지도사별 리뷰리스팅까지 DB연계 완료)','# 리뷰작성, 지도사별 리뷰리스팅까지 DB연계 완료\r\n\r\n## NOTE\r\n\r\n```\r\n프론트엔드\r\n-리뷰[...]\r\n -작성, 리스팅까진 성공\r\n -리스팅시 갯수제한..진행중\r\n-별점\r\n-옵션방식 변경\r\n   -옵션명__수량__\r\n   \r\n- template를 활용하면 v-for문 내 v-for문 즉, 이중v-for문 사용이 가능해진다.\r\n- 또한, vue3.0부터는 동일 태그내에 v-for랑 v-if를 사용할 수 없는 것 같다.(권장하는 방법이 아닌듯..)\r\n- template를 통해 v-for를 분리해주면 v-for와 v-if를 동시에 사용가능해진다.\r\n```\r\n```\r\n백엔드\r\n-review테이블, starRating테이블 추가\r\n```\r\n\r\n<br>\r\n## 주요소스코드\r\n\r\n### ReviewAddPage.vue\r\n```html\r\n<template>\r\n\r\n  <TitleBar>후기/평점 작성 페이지</TitleBar>\r\n\r\n  <section class=\"section section-review-write-form-box px-2\">\r\n    <div class=\"container mx-auto\">\r\n      <div class=\"px-6 py-6 bg-white rounded-lg shadow-md\">\r\n        <form v-if=\"globalShare.isLogined\" v-on:submit.prevent=\"checkAndAddReview\">\r\n          <FormRow title=\"리뷰내용\">\r\n            <textarea ref=\"newReviewBodyElRef\" class=\"form-row-input\" placeholder=\"내용을 입력해주세요.\"></textarea>\r\n          </FormRow>\r\n          <FormRow title=\"작성\">\r\n            <div class=\"btns\">\r\n              <input type=\"submit\" value=\"작성\" class=\"btn-primary\" />\r\n            </div>\r\n          </FormRow>\r\n        </form>\r\n        <div v-else>\r\n          <router-link class=\"btn-link\" to=\"/member/login\">로그인</router-link> 후 이용해주세요.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, reactive, ref, getCurrentInstance, onMounted } from \'vue\'\r\nimport { MainApi } from \'../apis\'\r\nimport { Router } from \'vue-router\'\r\n\r\n\r\nexport default defineComponent({\r\n  name: \'ReviewAddPage\',\r\n\r\n  props: {\r\n    globalShare: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    relId: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    relTypeCode: {\r\n      type: String,\r\n      required: true\r\n    }\r\n  },\r\n\r\n  setup(props){\r\n    const router:Router = getCurrentInstance()?.appContext.config.globalProperties.$router;\r\n    const mainApi:MainApi = getCurrentInstance()?.appContext.config.globalProperties.$mainApi;\r\n\r\n    const newReviewBodyElRef = ref<HTMLInputElement>();\r\n\r\n\r\n    /* 공백 체크 */\r\n    function checkAndAddReview(){\r\n\r\n      //일반적으로 안해도 되지만 typescript에서는 해야됨\r\n      //제목\r\n      if(newReviewBodyElRef.value == null){\r\n        return;\r\n      }\r\n\r\n      const newReviewBodyEl = newReviewBodyElRef.value;\r\n      newReviewBodyEl.value = newReviewBodyEl.value.trim();\r\n\r\n      if(newReviewBodyEl.value.length == 0){\r\n        alert(\'내용을 입력해 주세요.\')\r\n        newReviewBodyEl.focus();\r\n        return;\r\n      }\r\n\r\n    \r\n\r\n      // 작성 함수로 보내기\r\n      addReview(props.relTypeCode, props.relId, newReviewBodyEl.value, props.globalShare.loginedMember.id);\r\n\r\n    }\r\n\r\n    //typescript에서는 title:string, body:string 이런식으로 type을 적어주어야 한다\r\n      function addReview(relTypeCode:string, relId:number, body:string, memberId:number){\r\n       \r\n        mainApi.review_doAdd(relTypeCode, relId, body, memberId)\r\n        .then(axiosResponse => {\r\n          alert(axiosResponse.data.msg);\r\n          \r\n          // 로그인이 fail 상태이면 리턴\r\n          if ( axiosResponse.data.fail ) {\r\n            return;\r\n          }\r\n\r\n          //authKey가 있는 상태에서 가능\r\n          const newReviewId = axiosResponse.data.body.id;\r\n          //alert(newArticleId + \"번 게시물 등록 완료!!\");\r\n\r\n          router.replace(\"/director/list\");\r\n        });\r\n      }\r\n\r\n    return{\r\n        newReviewBodyElRef,\r\n        checkAndAddReview,\r\n      \r\n    }\r\n\r\n  }\r\n  \r\n})\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n```\r\n\r\n### DB\r\n```sql\r\n# 리뷰 테이블 추가\r\nCREATE TABLE review (\r\n  id INT(10) UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,\r\n  regDate DATETIME NOT NULL,\r\n  updateDate DATETIME NOT NULL,\r\n  `relTypeCode` CHAR(20) NOT NULL,\r\n  relId INT(10) UNSIGNED NOT NULL,\r\n  memberId INT(10) UNSIGNED NOT NULL,\r\n  `body` TEXT NOT NULL\r\n);\r\n\r\n# 고속 검색을 위해서 인덱스 걸기\r\nALTER TABLE review ADD KEY (relTypeCode, relId); \r\n# SELECT * FROM reply WHERE relTypeCode = \'article\' AND relId = 5; # O\r\n# SELECT * FROM reply WHERE relTypeCode = \'article\'; # O\r\n# SELECT * FROM reply WHERE relId = 5 AND relTypeCode = \'article\'; # X\r\n\r\n\r\n# 평점 테이블 추가\r\nCREATE TABLE starRating (\r\n  id INT(10) UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,\r\n  regDate DATETIME NOT NULL,\r\n  updateDate DATETIME NOT NULL,\r\n  `relTypeCode` CHAR(20) NOT NULL,\r\n  relId INT(10) UNSIGNED NOT NULL,\r\n  memberId INT(10) UNSIGNED NOT NULL,\r\n  `point` SMALLINT(1)  # 좋아요 시 +1, 싫어요 시 -1 등 가능\r\n);\r\n\r\n# 고속 검색을 위해서 인덱스 걸기\r\nALTER TABLE starRating ADD KEY (relTypeCode, relId); \r\n# SELECT * FROM reply WHERE relTypeCode = \'article\' AND relId = 5; # O\r\n# SELECT * FROM reply WHERE relTypeCode = \'article\'; # O\r\n# SELECT * FROM reply WHERE relId = 5 AND relTypeCode = \'article\'; # X\r\n```',8,1,0,0,0),(71,'2021-04-24 14:57:46','2021-04-24 15:28:36','P.Lamplight - 개발일지(평점 추가, 출력 구현, 리뷰 삭제 기능 구현, directorProfilePage 추가, orderListPage에서 진행단계별 필터링 기능 구','# 평점 추가, 출력 구현, 리뷰 삭제 기능 구현, directorProfilePage 추가, orderListPage에서 진행단계별 필터링 기능 구현\r\n\r\n## NOTE\r\n\r\n```\r\n<프론트엔드>\r\n\r\n-리뷰[...]\r\n -작성, 리스팅까진 성공[ㅇ]\r\n -리스팅시 갯수제한..진행중[]\r\n-평점[ㅇ]\r\n   \r\ntypescript 기초\r\nhttps://www.tutorialsteacher.com/typescript/typescript-number\r\n\r\nvue 템플릿 모음\r\nhttps://vuejsexamples.com/tag/rating/\r\n```\r\n```\r\n<백엔드>\r\n\r\n-starRating테이블명 -> rating으로 변경, 평점 추가, 출력 구현, 리뷰 삭제 기능 구현\r\n```\r\n\r\n<br>\r\n## 주요소스코드\r\n\r\n### OrderListPage.vue\r\n```html\r\n<template>\r\n  <!-- 메인-요청 리스트 시작 -->\r\n  <section class=\"orderList-section bg-gray-500\">\r\n    <div class=\"h-2 bg-gray-500\"></div>\r\n    <!--리스트 search 시작-->\r\n    <div class=\"flex h-10 orderList-section-search m-2 text-right rounded-md\">\r\n      <select ref=\"selectStepLevelElRef\" class=\"h-full w-1/4 rounded-l-md\" id=\"\" @change=\"onChangeStepLevel\">\r\n        <option value=\"0\">진행단계 전체</option>\r\n        <option value=\"1\">요청서 검토중</option>\r\n        <option value=\"2\">장례준비중</option>\r\n        <option value=\"3\">장례진행중</option>\r\n        <option value=\"4\">장례종료(결제대기중)</option>\r\n        <option value=\"5\">결제완료</option>\r\n      </select>\r\n      <select class=\"h-full w-1/4\" id=\"\" @change=\"onChangeSearchKeywordType($event)\">\r\n        <option value=\"title\">제목</option>\r\n        <option value=\"body\">내용</option>\r\n        <option value=\"funeralHome\">장례식장</option>\r\n      </select>\r\n      <input id=\"searchKeywordElRef\" ref=\"searchKeywordElRef\" class=\"h-full w-full pl-4\" type=\"text\" placeholder=\"검색어 입력\" :value=\"searchKeyword\" @keyup.enter=\"onInput($event)\" >\r\n      <button class=\"w-20 text-white rounded-r-md bg-blue-500\" type=\"button\" @click=\"onClickInput\">검색</button>\r\n    </div>\r\n    <!--리스트 search 끝-->\r\n    <!--리스트 grid 시작-->\r\n    <div class=\"orderList-section-grid grid grid-cols-1 md:grid-cols-3 gap-3 overflow-hidden\">\r\n      <!--리스트 grid__body 시작-->\r\n      <div class=\"mt-6\" v-bind:key=\"order.id\" v-for=\"order in filteredOrders\">\r\n      <div class=\"orderList-section-grid__body p-8 bg-white m-2 border rounded-xl\">\r\n        <!--진행단계-->\r\n        <div class=\"btn-success\">\r\n          진행단계: {{returnToString(order.stepLevel)}}\r\n        </div>\r\n        <!--제목-->\r\n        <div class=\"text-center m-4\">\r\n          <router-link :to=\"\'/order/detail?id=\' + order.id\" class=\"text-indigo-500 font-bold text-xl md:text-2xl hover:text-gray-700\">\r\n            {{ order.title }}\r\n          </router-link>\r\n        </div>\r\n        <!--담당지도사-->\r\n        <h1 class=\"font-semibold text-gray-900 leading-none text-xl mt-1 mb-3 capitalize break-normal\">\r\n          담당자회원번호: {{order.directorId}}\r\n        </h1>\r\n        <!--의뢰인명-->\r\n        <h1 class=\"font-semibold text-gray-900 leading-none text-xl mt-1 mb-3 capitalize break-normal\">\r\n          의뢰인: {{order.extra__member}}\r\n        </h1>\r\n         <!--장례식장-->\r\n        <h1 class=\"font-semibold text-gray-900 leading-none text-xl mt-1 mb-3 capitalize break-normal\">\r\n          장례식장: {{order.funeralHome}}\r\n        </h1>\r\n        <!--옵션-->\r\n        <div class=\"max-w-full border mt-2 p-1 pl-2 rounded-md\">\r\n          옵션1\r\n          <p class=\"text-base font-medium tracking-wide text-gray-600 mt-1\">\r\n            - 내용: {{ order.option1 }} / 수량: {{ order.option1qty }}\r\n          </p>\r\n        </div>\r\n        <div class=\"max-w-full border mt-2 p-1 pl-2 rounded-md\">\r\n          옵션2\r\n          <p class=\"text-base font-medium tracking-wide text-gray-600 mt-1\">\r\n            - 내용: {{ order.option2 }} / 수량: {{ order.option2qty }}\r\n          </p>\r\n        </div>\r\n        <div class=\"max-w-full border mt-2 p-1 pl-2 rounded-md\">\r\n          옵션3\r\n          <p class=\"text-base font-medium tracking-wide text-gray-600 mt-1\">\r\n            - 내용: {{ order.option3 }} / 수량: {{ order.option3qty }}\r\n          </p>\r\n        </div>\r\n        <div class=\"max-w-full border mt-2 p-1 pl-2 rounded-md\">\r\n          옵션4\r\n          <p class=\"text-base font-medium tracking-wide text-gray-600 mt-1\">\r\n            - 내용: {{ order.option4 }} / 수량: {{ order.option4qty }}\r\n          </p>\r\n        </div>\r\n        <div class=\"max-w-full border mt-2 p-1 pl-2 rounded-md\">\r\n          옵션5\r\n          <p class=\"text-base font-medium tracking-wide text-gray-600 mt-1\">\r\n            - 내용: {{ order.option5 }} / 수량: {{ order.option5qty }}\r\n          </p>\r\n        </div>\r\n        <!--추가 요청 내용-->\r\n        <div class=\"max-w-full border mt-2 p-1 pl-2 rounded-md\">\r\n          추가 요청사항\r\n          <p class=\"text-base font-medium tracking-wide text-gray-600 mt-1\">\r\n            - {{ order.body }}\r\n          </p>\r\n        </div>\r\n        <router-link :to=\"\'/order/detail?id=\' + order.id\" class=\"block btn-primary mt-2 h-10 w-full rounded-md\">\r\n            상세보기\r\n        </router-link>\r\n        <router-link :to=\"\'/review/doAdd?relTypeCode=director&relId=\' + order.directorId\" class=\"block btn-secondary mt-2 h-10 w-full rounded-md\">\r\n            후기/평점 작성\r\n        </router-link>\r\n        \r\n      </div>\r\n      </div>\r\n      <!--리스트 grid__body 끝-->\r\n    </div>\r\n    <!--리스트 grid 끝-->\r\n  </section>\r\n  <!-- 메인-지도사 리스트 끝 -->\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, reactive, ref, getCurrentInstance, onMounted, computed, watch } from \'vue\'\r\nimport { IOrder } from \'../types\'\r\nimport { MainApi } from \'../apis\'\r\n\r\nconst searchKeywordElRef = ref<HTMLInputElement>();\r\nconst selectStepLevelElRef = ref<HTMLInputElement>();\r\n\r\nexport default defineComponent({\r\n  name: \'OrderListPage\',\r\n\r\n//props 속성은 컴포넌트 간에 데이터를 전달할 수 있는 컴포넌트 통신 방법입니다. \r\n//props 속성을 기억할 때는 상위 컴포넌트에서 하위 컴포넌트로 내려보내는 데이터 속성으로 기억하면 쉽습니다\r\n  props: {\r\n    globalShare: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    memberId: {\r\n      type: Number,\r\n      required: true\r\n    }\r\n  },\r\n\r\n  setup(props){\r\n    const mainApi:MainApi = getCurrentInstance()?.appContext.config.globalProperties.$mainApi;\r\n\r\n    const state = reactive({\r\n      orders: [] as IOrder[],\r\n      searchKeyword: \'\' as string,\r\n      result:\'\' as string,\r\n      selectStepLevel: 0,\r\n    });\r\n\r\n    let searchKeywordType = \"title\";\r\n\r\n    function onInput(event:any){\r\n      state.searchKeyword = event.target.value;\r\n      return state.searchKeyword;\r\n    }\r\n\r\n    function onClickInput() {\r\n      if(searchKeywordElRef.value == undefined){\r\n        return;\r\n      }\r\n\r\n      state.searchKeyword = searchKeywordElRef.value.value;\r\n      return state.searchKeyword;\r\n    }\r\n\r\n    function onChangeSearchKeywordType(event:any){\r\n      searchKeywordType = event.target.value;\r\n      return searchKeywordType;\r\n    };\r\n\r\n\r\n    function onChangeStepLevel() {\r\n\r\n      if(selectStepLevelElRef.value == undefined){\r\n        return;\r\n      }\r\n      state.selectStepLevel = parseInt(selectStepLevelElRef.value?.value);\r\n      return state.selectStepLevel;\r\n    }\r\n\r\n    function returnToString(stepLevel:any) {\r\n      let stepLevelToStr = \'\'; \r\n      if(stepLevel == 1){\r\n        stepLevelToStr = \'요청서 검토중\';\r\n      }\r\n      if(stepLevel == 2){\r\n        stepLevelToStr = \'외뢰승인(장례준비중)\';\r\n      }\r\n      if(stepLevel == 3){\r\n        stepLevelToStr = \'장례진행중\';\r\n      }\r\n      if(stepLevel == 4){\r\n        stepLevelToStr = \'장례종료(결제대기중)\';\r\n      }\r\n      if(stepLevel == 5){\r\n        stepLevelToStr = \'결제완료\';\r\n      }\r\n\r\n      return stepLevelToStr;\r\n    }\r\n\r\n    //alert(\"1\");\r\n    const filteredOrders = computed(() => {\r\n      //alert(\"2\");\r\n      state.result = state.searchKeyword;\r\n\r\n      let filteredOrders = state.orders;\r\n      \r\n      //filteredOrders = state.orders.filter((order:IOrder) => order.stepLevel === state.selectStepLevel)\r\n      if(state.selectStepLevel == 0){\r\n        if(searchKeywordType == \"title\"){\r\n        filteredOrders = state.orders.filter((order:IOrder) => order.title.includes(state.searchKeyword))\r\n      }\r\n      if(searchKeywordType == \"body\"){\r\n        filteredOrders = state.orders.filter((order:IOrder) => order.body.includes(state.searchKeyword))\r\n      }\r\n      if(searchKeywordType == \"funeralHome\"){\r\n        filteredOrders = state.orders.filter((order:IOrder) => order.funeralHome.includes(state.searchKeyword))\r\n      }\r\n      }\r\n      else{\r\n        if(searchKeywordType == \"title\"){\r\n        filteredOrders = state.orders.filter((order:IOrder) => order.title.includes(state.searchKeyword) && order.stepLevel === state.selectStepLevel)\r\n      }\r\n      if(searchKeywordType == \"body\"){\r\n        filteredOrders = state.orders.filter((order:IOrder) => order.body.includes(state.searchKeyword) && order.stepLevel === state.selectStepLevel)\r\n      }\r\n      if(searchKeywordType == \"funeralHome\"){\r\n        filteredOrders = state.orders.filter((order:IOrder) => order.funeralHome.includes(state.searchKeyword) && order.stepLevel === state.selectStepLevel)\r\n      }\r\n      }\r\n\r\n      return filteredOrders\r\n    })\r\n\r\n    const memberId = props.memberId;\r\n\r\n    function loadOrders(memberId:number){\r\n      //alert(\"4\");\r\n      mainApi.order_list(memberId)\r\n      .then(axiosResponse => {\r\n          state.orders = axiosResponse.data.body.orders;\r\n      });\r\n\r\n    }\r\n\r\n    // onMounted 바로 실행하는 것이 아닌 모든 것이 준비되었을때 실행됨\r\n    onMounted(() => {\r\n      //alert(\"3\");\r\n      loadOrders(memberId);\r\n    });\r\n\r\n\r\n    return{\r\n      state,\r\n      filteredOrders,\r\n      searchKeywordElRef,\r\n      onInput,\r\n      onClickInput,\r\n      returnToString,\r\n      onChangeSearchKeywordType,\r\n      onChangeStepLevel,\r\n      selectStepLevelElRef\r\n\r\n    }\r\n\r\n  }\r\n})\r\n</script>\r\n\r\n\r\n<style scoped>\r\n/* https://tailwindcomponents.com/component/blogs-posts-card */\r\n.orderList-section-grid__body{\r\n  min-width: 400px;\r\n}\r\n\r\n</style>\r\n\r\n```\r\n\r\n### 멤버별 평점 0.5단위로 값 가져오는 쿼리\r\n```sql\r\n# 평점 포인트 포함해서 지도사 리스팅\r\nSELECT M.*,\r\nIF(\r\n(ROUND(AVG(R.point),1)-(ROUND(AVG(R.point),1)-0.5)) >= 0.5,\r\n ROUND(AVG(R.point)),\r\n ROUND(AVG(R.point))-0.5\r\n) AS extra__retingPoint\r\nFROM `member` AS M\r\nLEFT JOIN rating AS R\r\nON R.relTypeCode = \'director\'\r\nAND M.id = R.relId\r\nWHERE M.authLevel = 5\r\nGROUP BY M.id\r\nORDER BY M.id DESC\r\n```\r\n\r\n### 평점 테이블 추가\r\n```sql\r\n# 평점 테이블 추가\r\nCREATE TABLE rating (\r\n  id INT(10) UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,\r\n  regDate DATETIME NOT NULL,\r\n  updateDate DATETIME NOT NULL,\r\n  `relTypeCode` CHAR(20) NOT NULL,\r\n  relId INT(10) UNSIGNED NOT NULL,\r\n  memberId INT(10) UNSIGNED NOT NULL,\r\n  `point` FLOAT(10)  # 좋아요 시 +1, 싫어요 시 -1 등 가능\r\n);\r\n\r\n# 고속 검색을 위해서 인덱스 걸기\r\nALTER TABLE rating ADD KEY (relTypeCode, relId); \r\n# SELECT * FROM reply WHERE relTypeCode = \'article\' AND relId = 5; # O\r\n# SELECT * FROM reply WHERE relTypeCode = \'article\'; # O\r\n# SELECT * FROM reply WHERE relId = 5 AND relTypeCode = \'article\'; # X\r\n```',8,1,0,0,0),(72,'2021-04-24 14:57:46','2021-04-24 15:28:36','P.Lamplight - 개발일지(ionic 프레임워크로 변경 시작)','# ionic 프레임워크로 변경(ionic 전역상태 세팅, 각 페이지 생성, 하단 메뉴 연결 등)\r\n\r\n## NOTE\r\n\r\n```\r\n<프론트엔드>\r\n\r\n-ionic 프레임워크 초기 셋팅\r\nionic 프레임워크란?\r\nhttps://ithub.tistory.com/70\r\n   \r\n-Symbol()\r\n\'심볼(symbol)\'은 유일한 식별자(unique identifier)를 만들고 싶을 때 사용합니다.\r\n자바스크립트는 객체 프로퍼티 키로 오직 문자형과 심볼형만을 허용합니다. 숫자형, 불린형 모두 불가능하고 오직 문자형과 심볼형만 가능하죠.\r\nSymbol()을 사용하면 심볼값을 만들 수 있습니다.\r\n심볼을 만들 때 심볼 이름이라 불리는 설명을 붙일 수도 있습니다.\r\n여기에서 심볼이릉은 \'globalState\'\r\n심볼은 유일성이 보장되는 자료형이기 때문에, 설명이 동일한 심볼을 여러 개 만들어도 각 심볼값은 다릅니다. 심볼에 붙이는 설명(심볼 이름)은 어떤 것에도 영향을 주지 않는 이름표 역할만을 합니다.\r\n\r\n설명 더보기 https://ko.javascript.info/symbol\r\n```\r\n```\r\n<백엔드>\r\n\r\n없음\r\n```\r\n\r\n<br>\r\n## 주요소스코드\r\n\r\n### stores/index.ts\r\n```html\r\nimport { reactive } from \"@vue/reactivity\"\r\nimport { inject } from \"vue\";\r\n\r\n//Symbol()\r\n//\'심볼(symbol)\'은 유일한 식별자(unique identifier)를 만들고 싶을 때 사용합니다.\r\n//자바스크립트는 객체 프로퍼티 키로 오직 문자형과 심볼형만을 허용합니다. 숫자형, 불린형 모두 불가능하고 오직 문자형과 심볼형만 가능하죠.\r\n//Symbol()을 사용하면 심볼값을 만들 수 있습니다.\r\n//심볼을 만들 때 심볼 이름이라 불리는 설명을 붙일 수도 있습니다.\r\n//여기에서 심볼이릉은 \'globalState\'\r\n//심볼은 유일성이 보장되는 자료형이기 때문에, 설명이 동일한 심볼을 여러 개 만들어도 각 심볼값은 다릅니다. 심볼에 붙이는 설명(심볼 이름)은 어떤 것에도 영향을 주지 않는 이름표 역할만을 합니다.\r\n//설명 더보기 https://ko.javascript.info/symbol\r\n\r\nexport const globalStateSymbol = Symbol(\'globalState\');\r\n\r\n//전역적으로 사용할 것들 이곳에 등록\r\n//그리고 types에서도 자료형? 등록 필요\r\n//전역상태를 셋팅해놓는 이유는 여러 페이지에서 사용하기 위함\r\nexport const createGlobalState = (): GlobalState =>{ \r\n  return reactive({\r\n    loginedMember: {\r\n      id:0,\r\n      regDate:\"\",\r\n      updateDate:\"\",\r\n    }\r\n  });\r\n};\r\n\r\n//useGlobalState 함수가 GlobalState 객체를 리턴한다\r\nexport const useGlobalState = (): GlobalState => inject(globalStateSymbol) as GlobalState;\r\n```\r\n\r\n### types/index.d.ts\r\n```html\r\ninterface GlobalState {\r\n  loginedMember : Member,\r\n}\r\n\r\ninterface Member {\r\n  id : number,\r\n  regDate:string,\r\n  updateDate:string,\r\n\r\n}\r\n```',8,1,0,0,0),(73,'2021-04-24 14:57:47','2021-04-24 15:28:37','P.Lamplight - 개발일지(ionic exam template 진행)','# ionic 기반으로 옮기기 위한 ionic exam template 진행(tailwind, fontawesome, 로그인,게시물리스팅 가능, expert에 Review리스트 담기 완료)\r\n\r\n## NOTE\r\n\r\n```\r\n<프론트엔드>\r\n\r\n-PWA???\r\n \"프로그레시브 웹 앱Progressive Web App(PWA)\"\r\n PWA는 몇 가지 기능(예를 들어 ‘설치’ 기능)을 추가하여 전통적인 웹사이트를 좀 더 강화한 것\r\n PWA는 운영체제(따라서 그 사용자)와 깊은 수준에서 연결하는 능력을 갖고 있다. \r\n 이는 설치, 그리고 알림이나 주소록 접근 등의 기능을 제공하는 API를 통해 가능하다.\r\n   \r\n-ionic 테마사이트\r\nhttps://ionicframework.com/docs/theming/themes\r\n\r\n-camelcase??\r\n 일반적으로 객체 명명은 memberAuthKey 이런식으로 함\r\n 이런 명명법을 camelcase라고함\r\n typescript에선 camelcase방식을 권장하지만 이것을 무시할 수도 있음(큰 문제는 없음)\r\n 이를 무시하기 위해 아래와 같이 주석을 달아줌\r\n   \r\n-Singleton??\r\n 싱글톤 패턴\r\n 애플리케이션이 시작될 때 어떤 클래스가 최초 한번만 메모리를 할당하고(Static) 그 메모리에 인스턴스를 만들어 사용하는 디자인패턴.\r\n => 싱글톤 패턴은 단 하나의 인스턴스를 생성해 사용하는 디자인 패턴이다.\r\n (인스턴스가 필요 할 때 똑같은 인스턴스를 만들어 내는 것이 아니라, 동일(기존) 인스턴스를 사용하게함)\r\n\r\n싱글톤 패턴을 쓰는 이유\r\n 고정된 메모리 영역을 얻으면서 한번의 new로 인스턴스를 사용하기 때문에 메모리 낭비를 방지할 수 있음\r\n\r\n싱글톤 패턴의 문제점\r\n 싱글톤 인스턴스가 너무 많은 일을 하거나 많은 데이터를 공유시킬 경우 다른 클래스의 인스턴스들 간에 결합도가 높아져 \"개방-폐쇄 원칙\" 을 위배하게 된다. (=객체 지향 설계 원칙에 어긋남)\r\n 따라서 수정이 어려워지고 테스트하기 어려워진다. \r\n But, 적절히 사용하면 매우 유용하다.\r\n\r\n출처: https://jeong-pro.tistory.com/86 [기본기를 쌓는 정아마추어 코딩블로그]\r\n\r\n-동기 vs 비동기\r\n\r\n동기(synchronous : 동시에 일어나는)\r\n - 동기는 말 그대로 동시에 일어난다는 뜻입니다. \r\n - 요청과 그 결과가 동시에 일어난다는 약속인데요. \r\n - 바로 요청을 하면 시간이 얼마가 걸리던지 요청한 자리에서 결과가 주어져야 합니다.\r\n - 요청과 결과가 한 자리에서 동시에 일어남\r\n - A노드와 B노드 사이의 작업 처리 단위(transaction)를 동시에 맞추겠다.\r\n \r\n쉽게 이야기하면, 하나의 함수가 끝나고 반환 값을 받은 뒤 다음 함수를 실행하는 것.\r\n\r\n\r\n비동기(Asynchronous : 동시에 일어나지 않는)\r\n - 비동기는 동시에 일어나지 않는다를 의미합니다. \r\n - 요청과 결과가 동시에 일어나지 않을거라는 약속입니다. \r\n - 요청한 그 자리에서 결과가 주어지지 않음\r\n - 노드 사이의 작업 처리 단위를 동시에 맞추지 않아도 된다.\r\n\r\n쉽게 이야기하면 함수를 실행 시켜 놓고 다음 함수로 넘어가는 방식이다.\r\n\r\n\r\n즉, 동기식=순차적 진행\r\n비동기식=동시다발적 진행\r\n\r\n\r\n거의 모든 html 구성을 JS로 만들고, 외부의 값들을 불러와 만들 때\r\n일일히 외부의 값이 오기까지 기다리면 웹페이지의 로딩 속도가 굉장히 느려진다.\r\n그럴 때 일단 모든 부분들을 표시해 놓고 비동기 방식으로 외부 값이 오면 그때 그때 \r\n그 값을 페이지에 넣는 방식을 사용하면 웹페이지의 로딩이 빨라지게 된다.\r\n\r\n출처: https://private.tistory.com/24 [공부해서 남 주자]\r\n\r\n\r\n\r\n-await??\r\n 비동기식 로직을 동기식으로 바꿔주는 함수?\r\n await을 쓰기 위해선 await이 달린 함수를 감싸고 있는 부모 함수에 \r\nasync를 붙여줘야 함\r\n\r\nex) async A(){\r\n    await B(){\r\n    }\r\n}\r\n\r\n\r\n-expert에 Review리스트 담기 완료\r\n\r\n```\r\n```\r\n<백엔드>\r\n\r\n-없음\r\n```\r\n\r\n<br>\r\n## 주요소스코드\r\n\r\n### services/index.ts\r\n```html\r\n//service를 통해 mainAPI를 가져오는 방식으로 변경\r\n//MVC패턴 같은 느낌\r\n//import { MainService } from \"@/types\";\r\nimport { Member } from \"@/types\";\r\nimport { inject } from \"vue\";\r\nimport { getMainApi, MainApi } from \"@/apis\";  //service를 통해 mainAPI를 가져오는 방식으로 변경\r\n\r\n  export class MainService {\r\n    private mainApi: MainApi;\r\n  \r\n    constructor() {\r\n      this.mainApi = getMainApi();\r\n    }\r\n\r\n    //camelcase??\r\n    //일반적으로 객체 명명은 memberAuthKey 이런식으로 함\r\n    //이런 명명법을 camelcase라고함\r\n    //typescript에선 camelcase방식을 권장하지만 이것을 무시할 수도 있음(큰 문제는 없음)\r\n    //이를 무시하기 위해 아래와 같이 주석을 달아줌\r\n  \r\n    /* eslint-disable @typescript-eslint/camelcase */\r\n    member_authKey(loginId: string, loginPw: string) {\r\n      return this.mainApi.member_authKey(loginId, loginPw);\r\n    }\r\n\r\n    /* eslint-disable @typescript-eslint/camelcase */\r\n    article_list(boardId: number) {\r\n      return this.mainApi.article_list(boardId);\r\n    }\r\n\r\n\r\n    // //이미지를 리사이징해주는 유틸 적용\r\n    // //사용하려면 작동을 시켜야 함..일단은 적용 보류(21.04.01)\r\n    // /* eslint-disable @typescript-eslint/no-inferrable-types */\r\n    // getMemberThumbImgUrl(id: number, width: number = 40, height: number = 40) {\r\n\r\n    //   const originUrl = \'http://localhost:8021/common/genFile/file/member/\' + id + \'/common/attachment/1\';\r\n    //   const url = `http://localhost:8085/img?failWidth=${width}&failHeight=${height}&failText=U.U&width=${width}&height=${height}&url=` + originUrl;\r\n    //   return url;\r\n    // }\r\n\r\n    // /* eslint-disable @typescript-eslint/no-inferrable-types */\r\n    // getArticleThumbImgUrl(id: number, width: number = 100, height: number = 100) {\r\n    //   const originUrl = \'http://localhost:8021/common/genFile/file/article/\' + id + \'/common/attachment/1\';\r\n    //   const url = `http://localhost:8085/img?failWidth=${width}&failHeight=${height}&failText=U.U&width=${width}&height=${height}&url=` + originUrl;\r\n    //   return url;\r\n    //  }\r\n  \r\n    getMemberThumbImgUrl(id: number) {\r\n      return \"https://i.pravatar.cc/45?img=13&k=\" + id\r\n    }\r\n\r\n    getArticleThumbImgUrl(id: number) {\r\n      return \"https://i.pravatar.cc/45?img=13&k=\" + id\r\n    }\r\n  }\r\n  \r\n  export const mainServiceSymbol = Symbol(\'globalState\');\r\n  \r\n  class Singleton {\r\n    static mainService: MainService;\r\n  }\r\n  \r\n  export const createMainService = () => {\r\n    if ( Singleton.mainService == null ) {\r\n      Singleton.mainService = new MainService();\r\n    }\r\n  \r\n    return Singleton.mainService;\r\n  };\r\n  \r\n  export const useMainService = (): MainService => inject(mainServiceSymbol) as MainService;\r\n```\r\n\r\n### ExpertService.java\r\n```html\r\npublic List<Expert> getExperts() {\r\n		List<Expert> experts = expertDao.getExperts();\r\n		\r\n		for(Expert expert : experts) {\r\n			updateForPrint(expert);\r\n			addReviewList(expert); //각 expert객체마다 review리스트를 담아서 넘겨줌\r\n		}\r\n		\r\n		return experts;\r\n	}\r\n\r\n	private void addReviewList(Expert expert) {\r\n		String relTypeCode = \"expert\";\r\n		List<Review> reviews = reviewService.getForPrintReviews(relTypeCode);\r\n		\r\n		for(Review review : reviews) {\r\n			if(review != null && review.getRelId() == expert.getId()) {\r\n				expert.getExtra__reviews().add(review);\r\n			}\r\n		}\r\n\r\n	}\r\n```\r\n',8,1,0,0,0),(74,'2021-04-24 14:57:47','2021-04-24 15:28:37','P.Lamplight - 개발일지(멤버쪼개기 완료, funeral 테이블 추가, 요청수락, 진행단계별 버튼 변경 기능 구현까지)','# 멤버쪼개기 완료, funeral 테이블 추가, 요청수락, 진행단계별 버튼 변경 기능 구현까지\r\n\r\n## NOTE\r\n\r\n```\r\n<프론트엔드>\r\n\r\nTodo\r\n-의뢰인 요청 - 검토(수락) - 수락(진행) - 종료요청(최종종료)까지\r\n 1사이클 실행\r\n-요청서에서 승인버튼 누르면 장례클래스 생성[ㅇ]\r\n-도우미 마무리\r\n -장례클래스 생성[ㅇ]\r\n -장례클래스와 연관된 도우미 테이블 생성[ㅇ]\r\n -모든 장례리스팅[ㅇ]\r\n -도우미,전문가의 현재 진행중인 my장례 리스팅[ㅇ]\r\n  -장례리스트에 도우미 현황 나오기[ㅇ]\r\n\r\n -장례에 도우미 지원[]\r\n -전문가에서 장례별 도우미 지원현황 확인 후 수락[]\r\n -도우미에서 내 지원현황 확인,취소[]\r\n\r\n```\r\n```\r\n<백엔드>\r\n\r\n-funeral, funeralRelAssts 테이블 추가\r\n```\r\n\r\n<br>\r\n## 주요소스코드\r\n\r\n### FuneralListPage.vue\r\n```html\r\n<template>\r\n  <!-- 메인-장례 리스트 시작 -->\r\n  <section class=\"funeralList-section bg-gray-500\">\r\n    <div class=\"h-2 bg-gray-500\"></div>\r\n    <!--리스트 search 시작-->\r\n    <div class=\"flex h-10 funeralList-section-search m-2 text-right rounded-md\">\r\n      <select ref=\"selectStepLevelElRef\" class=\"h-full w-1/4 rounded-l-md\" id=\"\" @change=\"onChangeStepLevel\">\r\n        <option value=\"0\">진행단계 전체</option>\r\n        <option value=\"1\">요청서 검토중</option>\r\n        <option value=\"2\">장례준비중</option>\r\n        <option value=\"3\">장례진행중</option>\r\n        <option value=\"4\">장례종료(확인대기중)</option>\r\n        <option value=\"5\">장례종료(최종종료)</option>\r\n      </select>\r\n      <select class=\"h-full w-1/4\" id=\"\" @change=\"onChangeSearchKeywordType($event)\">\r\n        <option value=\"title\">제목</option>\r\n        <option value=\"body\">내용</option>\r\n        <option value=\"funeralHome\">장례식장</option>\r\n      </select>\r\n      <input id=\"searchKeywordElRef\" ref=\"searchKeywordElRef\" class=\"h-full w-full pl-4\" type=\"text\" placeholder=\"검색어 입력\" :value=\"searchKeyword\" @keyup.enter=\"onInput($event)\" >\r\n      <button class=\"w-20 text-white rounded-r-md bg-blue-500\" type=\"button\" @click=\"onClickInput\">검색</button>\r\n    </div>\r\n    <!--리스트 search 끝-->\r\n    <!--리스트 grid 시작-->\r\n    <div class=\"funeralList-section-grid grid grid-cols-1 md:grid-cols-3 gap-3 overflow-hidden\">\r\n      <!--리스트 grid__body 시작-->\r\n      <div class=\"mt-6\" v-bind:key=\"funeral.id\" v-for=\"funeral in filteredFunerals\">\r\n      <div class=\"funeralList-section-grid__body p-8 bg-white m-2 border rounded-xl\">\r\n        <!--진행단계-->\r\n        <div class=\"btn-success\">\r\n          진행단계: {{returnToString(funeral.stepLevel)}}\r\n        </div>\r\n        <!--제목-->\r\n        <div class=\"text-center m-4\">\r\n          <router-link :to=\"\'/funeral/detail?id=\' + funeral.id\" class=\"text-indigo-500 font-bold text-xl md:text-2xl hover:text-gray-700\">\r\n            {{ funeral.title }}\r\n          </router-link>\r\n        </div>\r\n        <!--담당지도사-->\r\n        <h1 class=\"font-semibold text-gray-900 leading-none text-xl mt-1 mb-3 capitalize break-normal\">\r\n          담당지도사: {{funeral.extra__expertName}}\r\n        </h1>\r\n        <!--의뢰인명-->\r\n        <h1 class=\"font-semibold text-gray-900 leading-none text-xl mt-1 mb-3 capitalize break-normal\">\r\n          의뢰인: {{funeral.extra__clientName}}\r\n        </h1>\r\n         <!--장례식장-->\r\n        <h1 class=\"font-semibold text-gray-900 leading-none text-xl mt-1 mb-3 capitalize break-normal\">\r\n          장례식장: {{funeral.funeralHome}}\r\n        </h1>\r\n        <!--예상인원-->\r\n        <div class=\"max-w-full border mt-2 p-1 pl-2 rounded-md\">\r\n          예상인원\r\n          <p class=\"text-base font-medium tracking-wide text-gray-600 mt-1\">\r\n            -  {{ funeral.head }}\r\n          </p>\r\n        </div>\r\n        <!--종교-->\r\n        <div class=\"max-w-full border mt-2 p-1 pl-2 rounded-md\">\r\n          종교\r\n          <p class=\"text-base font-medium tracking-wide text-gray-600 mt-1\">\r\n            -  {{ funeral.religion }}\r\n          </p>\r\n        </div>\r\n        <!--장례기간-->\r\n        <div class=\"max-w-full border mt-2 p-1 pl-2 rounded-md\">\r\n          장례기간\r\n          <p class=\"text-base font-medium tracking-wide text-gray-600 mt-1\">\r\n            - 시작일: {{ funeral.startDate }} / 종료일: {{ funeral.endDate }}\r\n          </p>\r\n        </div>\r\n        <div>\r\n          도우미 현황\r\n          <div v-bind:key=\"assistant.id\" v-for=\"assistant in funeral.extra__assistants.slice(0,3)\">\r\n            {{ assistant.name }} 도우미\r\n          </div>\r\n        </div>\r\n        <router-link :to=\"\'/funeral/detail?id=\' + funeral.id\" class=\"block btn-primary mt-2 h-10 w-full rounded-md\">\r\n            상세보기\r\n        </router-link>\r\n        <router-link :to=\"\'/funeral/doApply?funeralId=\' + funeral.id\" class=\"block btn-secondary mt-2 h-10 w-full rounded-md\">\r\n            지원하기\r\n        </router-link>\r\n        \r\n      </div>\r\n      </div>\r\n      <!--리스트 grid__body 끝-->\r\n    </div>\r\n    <!--리스트 grid 끝-->\r\n  </section>\r\n  <!-- 메인-지도사 리스트 끝 -->\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, reactive, ref, getCurrentInstance, onMounted, computed, watch } from \'vue\'\r\nimport { IFuneral } from \'../types\'\r\nimport { MainApi } from \'../apis\'\r\n\r\nconst searchKeywordElRef = ref<HTMLInputElement>();\r\nconst selectStepLevelElRef = ref<HTMLInputElement>();\r\n\r\nexport default defineComponent({\r\n  name: \'FuneralListPageForAsst\',\r\n\r\n//props 속성은 컴포넌트 간에 데이터를 전달할 수 있는 컴포넌트 통신 방법입니다. \r\n//props 속성을 기억할 때는 상위 컴포넌트에서 하위 컴포넌트로 내려보내는 데이터 속성으로 기억하면 쉽습니다\r\n  props: {\r\n    globalShare: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n  },\r\n\r\n  setup(props){\r\n    const mainApi:MainApi = getCurrentInstance()?.appContext.config.globalProperties.$mainApi;\r\n\r\n    const state = reactive({\r\n      funerals: [] as IFuneral[],\r\n      searchKeyword: \'\' as string,\r\n      result:\'\' as string,\r\n      selectStepLevel: 0,\r\n    });\r\n\r\n    let searchKeywordType = \"title\";\r\n\r\n    function onInput(event:any){\r\n      state.searchKeyword = event.target.value;\r\n      return state.searchKeyword;\r\n    }\r\n\r\n    function onClickInput() {\r\n      if(searchKeywordElRef.value == undefined){\r\n        return;\r\n      }\r\n\r\n      state.searchKeyword = searchKeywordElRef.value.value;\r\n      return state.searchKeyword;\r\n    }\r\n\r\n    function onChangeSearchKeywordType(event:any){\r\n      searchKeywordType = event.target.value;\r\n      return searchKeywordType;\r\n    };\r\n\r\n\r\n    function onChangeStepLevel() {\r\n\r\n      if(selectStepLevelElRef.value == undefined){\r\n        return;\r\n      }\r\n      state.selectStepLevel = parseInt(selectStepLevelElRef.value?.value);\r\n      return state.selectStepLevel;\r\n    }\r\n\r\n    function returnToString(stepLevel:any) {\r\n      let stepLevelToStr = \'\'; \r\n      if(stepLevel == 1){\r\n        stepLevelToStr = \'의뢰요청(의뢰검토중)\';\r\n      }\r\n      if(stepLevel == 2){\r\n        stepLevelToStr = \'의뢰승인(장례준비중)\';\r\n      }\r\n      if(stepLevel == 3){\r\n        stepLevelToStr = \'장례진행중\';\r\n      }\r\n      if(stepLevel == 4){\r\n        stepLevelToStr = \'장례종료(종료확인요청)\';\r\n      }\r\n      if(stepLevel == 5){\r\n        stepLevelToStr = \'종료확인(최종종료)\';\r\n      }\r\n\r\n      return stepLevelToStr;\r\n    }\r\n\r\n    //alert(\"1\");\r\n    const filteredFunerals = computed(() => {\r\n      //alert(\"2\");\r\n      state.result = state.searchKeyword;\r\n\r\n      let filteredFunerals = state.funerals;\r\n      \r\n      //filteredFunerals = state.funerals.filter((funeral:IFuneral) => funeral.stepLevel === state.selectStepLevel)\r\n      if(state.selectStepLevel == 0){\r\n        if(searchKeywordType == \"title\"){\r\n        filteredFunerals = state.funerals.filter((funeral:IFuneral) => funeral.title.includes(state.searchKeyword))\r\n      }\r\n      if(searchKeywordType == \"body\"){\r\n        filteredFunerals = state.funerals.filter((funeral:IFuneral) => funeral.body.includes(state.searchKeyword))\r\n      }\r\n      if(searchKeywordType == \"funeralHome\"){\r\n        filteredFunerals = state.funerals.filter((funeral:IFuneral) => funeral.funeralHome.includes(state.searchKeyword))\r\n      }\r\n      }\r\n      else{\r\n        if(searchKeywordType == \"title\"){\r\n        filteredFunerals = state.funerals.filter((funeral:IFuneral) => funeral.title.includes(state.searchKeyword) && funeral.stepLevel === state.selectStepLevel)\r\n      }\r\n      if(searchKeywordType == \"body\"){\r\n        filteredFunerals = state.funerals.filter((funeral:IFuneral) => funeral.body.includes(state.searchKeyword) && funeral.stepLevel === state.selectStepLevel)\r\n      }\r\n      if(searchKeywordType == \"funeralHome\"){\r\n        filteredFunerals = state.funerals.filter((funeral:IFuneral) => funeral.funeralHome.includes(state.searchKeyword) && funeral.stepLevel === state.selectStepLevel)\r\n      }\r\n      }\r\n\r\n      return filteredFunerals\r\n    })\r\n\r\n\r\n    function loadFunerals(){\r\n      //alert(\"4\");\r\n      mainApi.funeral_list()\r\n      .then(axiosResponse => {\r\n          state.funerals = axiosResponse.data.body.funerals;\r\n      });\r\n\r\n    }\r\n\r\n    // onMounted 바로 실행하는 것이 아닌 모든 것이 준비되었을때 실행됨\r\n    onMounted(() => {\r\n      //alert(\"3\");\r\n      loadFunerals();\r\n    });\r\n\r\n\r\n    return{\r\n      state,\r\n      filteredFunerals,\r\n      searchKeywordElRef,\r\n      onInput,\r\n      onClickInput,\r\n      returnToString,\r\n      onChangeSearchKeywordType,\r\n      onChangeStepLevel,\r\n      selectStepLevelElRef\r\n\r\n    }\r\n\r\n  }\r\n})\r\n</script>\r\n\r\n\r\n<style scoped>\r\n/* https://tailwindcomponents.com/component/blogs-posts-card */\r\n.funeralList-section-grid__body{\r\n  min-width: 400px;\r\n}\r\n\r\n</style>\r\n```\r\n\r\n### DB\r\n```sql\r\n# 장례 테이블 생성\r\nCREATE TABLE `funeral` (\r\n    id INT(10) UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,\r\n    regDate DATETIME NOT NULL,\r\n    updateDate DATETIME NOT NULL,\r\n    `head` INT(10) UNSIGNED NOT NULL, #예상인원수\r\n    religion CHAR(200) NOT NULL, #종교\r\n    `startDate` DATE NOT NULL, #장례시작일\r\n    `endDate` DATE NOT NULL, #장례종료일\r\n    title CHAR(200) NOT NULL, \r\n    `body` TEXT NOT NULL, #상세요구사항\r\n    funeralHome CHAR(200) NOT NULL, #장례식장\r\n    `expertId` INT(10) UNSIGNED NOT NULL,\r\n    `clientId` INT(10) UNSIGNED NOT NULL,\r\n    stepLevel SMALLINT(2) UNSIGNED DEFAULT 2 NOT NULL COMMENT \'(2=의뢰승인(장례진행중),3=장례종료(종료확인요청),4=종료확인(최종종료))\'\r\n);\r\n\r\n# 장례와 관련된 도우미 그룹 테이블 생성\r\nCREATE TABLE `funeralRelAssts`(\r\n    id INT(10) UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,\r\n    funeralId INT(10) UNSIGNED NOT NULL,\r\n    assistantId INT(10) UNSIGNED NOT NULL\r\n);\r\n\r\n# 도우미가 진행중인 장례 리스팅\r\nSELECT F.*,\r\nIFNULL(C.name, \"탈퇴회원\") AS extra__clientName,\r\nIFNULL(E.name, \"탈퇴회원\") AS extra__expertName\r\nFROM `funeral` AS F\r\nLEFT JOIN `client` AS C\r\nON F.clientId = C.id\r\nLEFT JOIN `expert` AS E\r\nON F.expertId = E.id\r\nWHERE F.id = (\r\nSELECT funeralId \r\nFROM funeralRelAssts\r\nWHERE assistantId = 1\r\n)\r\nORDER BY F.id DESC\r\n```',8,1,0,0,0),(75,'2021-04-24 14:57:47','2021-04-24 15:28:37','P.Lamplight - 개발일지(ionic이사 진행중-의뢰인로그인,회원가입,정보수정.....지도사리스팅....요청서crud, 리스팅 완료)','# ionic이사 진행중-의뢰인로그인,회원가입,정보수정.....지도사리스팅....요청서crud, 리스팅 완료\r\n\r\n## NOTE\r\n\r\n```\r\n<프론트엔드>\r\n\r\nTodo\r\n-ionic으로 일단 이사[]\r\n -의뢰인로그인,로그아웃[ㅇ]\r\n -의뢰인회원가입후 로그인아이디[ㅇ]\r\n -의뢰인마이페이지[ㅇ]\r\n -의뢰인회원정보 수정[ㅇ]\r\n -지도사 리스팅[ㅇ]\r\n -요청서 작성[ㅇ]/상세보기[ㅇ]\r\n -요청서 수정[ㅇ]\r\n -요청서 삭제[ㅇ]\r\n  -컨펌창 도입[ㅇ]\r\n   -요청서 작성시[ㅇ]\r\n   -요청서 수정시[ㅇ]\r\n   -회원가입시[ㅇ]\r\n   -회원정보 수정시[ㅇ]\r\n -요청서 리스팅[ㅇ]\r\n \r\n-ionic 컨펌창 도입[ㅇ]\r\nhttps://forum.ionicframework.com/t/return-value-from-alert-confirmation/75824/2\r\n\r\n-사이클 변경\r\n의뢰인 요청서 등록 -> 해당 지역에 속한 지도사에게 푸시알림(or SMS)\r\n-> 요청서 확인 후 수락 푸시알림(or SMS)+연락처 -> 장례 준비 진행(도우미 지원(2차 배포시 추가))\r\n-> 장례 진행 -> 종료 -> 의뢰인 최종 확인(결제(2차 배포시 추가)) -> 평점/리뷰 작성\r\n -요청서 등록시 해당 지역 지도사에게 알림(연락처 전달?)[]\r\n -요청서 확인 후 수락 푸시알림(or SMS)+지도사프로필[]\r\n\r\n\r\n\r\n-NaN\r\n 전역 NaN 속성은 Not-A-Number(숫자가 아님)를 나타냄\r\n isNaN() 함수로 NaN 여부를 확인\r\n```\r\n```\r\n<백엔드>\r\n\r\n-order 테이블 컬럼 수정(deceasedName #고인 이름, bereavedName #유족 이름 추가)\r\n```\r\n\r\n<br>\r\n## 주요소스코드\r\n\r\n### Client/Join.vue\r\n```html\r\n<template>\r\n  <ion-page>\r\n    <ion-custom-header>회원 - 가입</ion-custom-header>\r\n    <ion-content :fullscreen=\"true\">\r\n      <ion-header collapse=\"condense\">\r\n        <ion-toolbar>\r\n          <ion-title size=\"large\">회원 - 가입</ion-title>\r\n        </ion-toolbar>\r\n      </ion-header>\r\n      <ion-custom-body class=\"justify-center\">\r\n        <div class=\"logo-box text-center\">\r\n          <span>\r\n            <span class=\"text-3xl\">\r\n              <font-awesome-icon icon=\"lemon\" />\r\n            </span>\r\n            <span class=\"font-bold text-3xl\">\r\n              DESIGN LEMON\r\n            </span>\r\n          </span>\r\n        </div>\r\n        <form @submit.prevent=\"checkAndJoin\">\r\n          <div>\r\n            <ion-item>\r\n              <ion-label position=\"stacked\">프로필 이미지</ion-label>\r\n              <ion-input v-model=\"joinFormState.profileImg\" type=\"file\"></ion-input>\r\n            </ion-item>\r\n          </div>\r\n          <div>\r\n            <ion-item>\r\n              <ion-label position=\"floating\">아이디</ion-label>\r\n              <ion-input v-model=\"joinFormState.loginId\" type=\"text\" minlength=\"5\" maxlength=\"12\" placeholder=\"아이디를 입력해주세요.\"></ion-input>\r\n            </ion-item>\r\n          </div>\r\n          <div>\r\n            <ion-item>\r\n              <ion-label position=\"floating\">비밀번호</ion-label>\r\n              <ion-input v-model=\"joinFormState.loginPw\" minlength=\"8\" type=\"password\" placeholder=\"비밀번호를 입력해주세요.\"></ion-input>\r\n            </ion-item>\r\n          </div>\r\n          <div>\r\n            <ion-item>\r\n              <ion-label position=\"floating\">비밀번호 확인</ion-label>\r\n              <ion-input v-model=\"joinFormState.loginPwConfirm\" minlength=\"8\" type=\"password\" placeholder=\"비밀번호 확인을 해주세요.\"></ion-input>\r\n            </ion-item>\r\n          </div>\r\n          <div>\r\n            <ion-item>\r\n              <ion-label position=\"floating\">이름</ion-label>\r\n              <ion-input v-model=\"joinFormState.name\" minlength=\"2\" placeholder=\"이름을 입력해주세요.\"></ion-input>\r\n            </ion-item>\r\n          </div>\r\n          <div>\r\n            <ion-item>\r\n              <ion-label position=\"floating\">연락처</ion-label>\r\n              <ion-input v-model=\"joinFormState.cellphoneNo\" type=\"tel\" maxlength=\"11\" placeholder=\"연락처를 입력해주세요.\"></ion-input>\r\n            </ion-item>\r\n          </div>\r\n          <div>\r\n            <ion-item>\r\n              <ion-label position=\"floating\">이메일</ion-label>\r\n              <ion-input v-model=\"joinFormState.email\" type=\"email\" placeholder=\"이메일을 입력해주세요.\"></ion-input>\r\n            </ion-item>\r\n          </div>\r\n          <div>\r\n            <ion-item>\r\n              <ion-label position=\"floating\">지역</ion-label>\r\n              <ion-input v-model=\"joinFormState.region\" placeholder=\"시/도 주소를 입력해주세요.\"></ion-input>\r\n            </ion-item>\r\n          </div>\r\n          <div class=\"py-2 px-4\">\r\n            <ion-button type=\"submit\" expand=\"block\">가입</ion-button>\r\n          </div>\r\n          <div class=\"px-4\">\r\n            <ion-button color=\"secondary\" type=\"reset\" expand=\"block\">초기화</ion-button>\r\n          </div>\r\n        </form>\r\n      </ion-custom-body>\r\n    </ion-content>\r\n  </ion-page>\r\n</template>\r\n\r\n<style>\r\n</style>\r\n\r\n<script lang=\"ts\">\r\nimport { IonCustomBody, IonCustomHeader } from \'@/components/\';\r\nimport { \r\n  IonPage, \r\n  IonHeader, \r\n  IonToolbar, \r\n  IonTitle, \r\n  IonContent,\r\n  IonLabel, \r\n  IonInput, \r\n  IonItem, \r\n  IonButton, \r\n} from \'@ionic/vue\';\r\nimport { useGlobalState } from \'@/stores\'\r\nimport { useMainService } from \'@/services\';\r\nimport { useRouter } from \'vue-router\';\r\nimport * as util from \'@/utils\';\r\nimport { reactive } from \'vue\';\r\n\r\n\r\nconst useJoinFormState = () => {\r\n  return reactive({\r\n    profileImg: [] as File[],\r\n    loginId: \'\',\r\n    loginPw: \'\',\r\n    loginPwConfirm: \'\',\r\n    name: \'\',\r\n    cellphoneNo: \'\',\r\n    email: \'\',\r\n    region: \'\',\r\n  })\r\n}\r\n\r\nexport default {\r\n  name: \'Join\',\r\n\r\n  components: { \r\n    IonHeader, \r\n    IonToolbar, \r\n    IonTitle,\r\n    IonLabel, \r\n    IonInput, \r\n    IonItem, \r\n    IonButton, \r\n    IonContent, \r\n    IonPage, \r\n    IonCustomBody, \r\n    IonCustomHeader \r\n  },\r\n\r\n  setup() {\r\n    const globalState = useGlobalState();\r\n    const joinFormState = useJoinFormState();\r\n    const router = useRouter();\r\n    const mainService = useMainService();\r\n\r\n    // function confirmAlert(){\r\n    //   const msg = \'해당 내용으로 가입하시겠습니까?\'\r\n    //   util.showAlertConfirm(msg)\r\n    // }\r\n\r\n    function checkAndJoin() {\r\n       // 아이디 체크\r\n      const loginId = joinFormState.loginId.trim();\r\n      \r\n      if ( joinFormState.loginId.trim().length == 0 ) {\r\n        alert(\'아이디를 입력해주세요.\');\r\n        return;\r\n      }\r\n      // 비번 체크\r\n      const loginPw = joinFormState.loginPw.trim();\r\n      \r\n      if ( loginPw.length == 0 ) {\r\n        alert(\'비밀번호를 입력해주세요.\');\r\n        return;\r\n      }\r\n      \r\n      // 비번확인 체크\r\n      const loginPwConfirm = joinFormState.loginPwConfirm.trim();\r\n      \r\n      if ( loginPw != loginPwConfirm ) {\r\n        alert(\'비밀번호가 일치하지 않습니다.\');\r\n        return;\r\n      }\r\n\r\n      // 이름 체크\r\n      const name = joinFormState.name.trim();\r\n\r\n      if ( name.length == 0 ) {\r\n        alert(\'이름을 입력해주세요.\');\r\n        return;\r\n      }\r\n      \r\n      // 전화번호 체크\r\n      const cellphoneNo = joinFormState.cellphoneNo.trim();\r\n      \r\n      if ( cellphoneNo.length == 0 ) {\r\n        alert(\'연락처를 입력해주세요.\');\r\n        return;\r\n      }\r\n\r\n      // 이메일 체크\r\n      const email = joinFormState.email.trim();\r\n      \r\n      if ( email.length == 0 ) {\r\n        alert(\'이메일을 입력해주세요.\');\r\n        return;\r\n      }\r\n\r\n      // 시/도 주소 체크\r\n      const region = joinFormState.region.trim();\r\n      \r\n      if ( region.length == 0 ) {\r\n        alert(\'지역(시/도)을 입력해주세요.\');\r\n        return;\r\n      }\r\n\r\n      async function startFileUpload(onSuccess: Function){\r\n        // ! => 반전\r\n        // a = undefinded(or null) / !a = true / !!a = flase란 의미\r\n        // ? => 만약 profileImgElRef.value?까지가 null이면 여기까지만 실행하겠다라는 의미\r\n        // 즉, !!!profileImgElRef.value?.files의 의미는 해당 파일이 없는지 물어보는 것\r\n        // 없으면 true\r\n        if(joinFormState.profileImg == null){\r\n          onSuccess(\"\");  //파일이 없으면 다음 과정 생략하고 onSuccess() 즉시 실행\r\n          alert(\"파일 업로드 안됨\")\r\n          return;\r\n        }\r\n        const axRes = await mainService.common_genFile_doUpload(joinFormState.profileImg[0])\r\n\r\n        if ( axRes.data.fail ) {\r\n          util.showAlert(axRes.data.msg);\r\n          return;\r\n        }\r\n        else{\r\n            onSuccess(axRes.data.body.genFileIdsStr);\r\n        }\r\n      }\r\n\r\n      async function join(loginId: string, loginPw: string, name: string, cellphoneNo: string, email: string, region: string, genFileIdsStr: string) {\r\n        const axRes = await  mainService.client_doJoin(loginId, loginPw, name, cellphoneNo, email, region, genFileIdsStr);\r\n  \r\n          util.showAlert(axRes.data.msg);\r\n        \r\n          if ( axRes.data.fail ) {\r\n            return;\r\n          }\r\n\r\n          router.replace(\'/client/login?loginId=\' + loginId)\r\n      }\r\n\r\n      const startJoin = (genFileIdsStr: string) =>{\r\n          join(loginId, loginPw, name, cellphoneNo, email, region,  genFileIdsStr);\r\n      }\r\n\r\n      const msg = \'해당 내용으로 가입하시겠습니까?\'\r\n      util.showAlertConfirm(msg).then(confirm => {\r\n        if (confirm == false) {\r\n          return\r\n        } else{\r\n          startFileUpload(startJoin);\r\n        }\r\n      })\r\n      \r\n    }\r\n\r\n    \r\n\r\n    return {\r\n      globalState,\r\n      //confirmAlert,\r\n      joinFormState,\r\n      checkAndJoin,\r\n      \r\n    }\r\n  }\r\n}\r\n</script>\r\n```\r\n\r\n### Order/List.vue\r\n```html\r\n<template>\r\n<ion-custom-header>의뢰 - 리스트</ion-custom-header>\r\n<ion-content >\r\n  <ion-list class=\"mb-12\">\r\n    <ion-item>\r\n    <ion-select v-model=\"searchState.selectStepLevel\">\r\n      <ion-select-option value=\"0\">진행단계 전체</ion-select-option>\r\n      <ion-select-option value=\"1\">요청서 검토중</ion-select-option>\r\n      <ion-select-option value=\"2\">장례준비중</ion-select-option>\r\n      <ion-select-option value=\"3\">장례진행중</ion-select-option>\r\n      <ion-select-option value=\"4\">장례종료(확인대기중)</ion-select-option>\r\n      <ion-select-option value=\"5\">장례종료(최종종료)</ion-select-option>\r\n    </ion-select>\r\n    </ion-item>\r\n    <ion-item>\r\n    <ion-select v-model=\"searchState.searchKeywordType\">\r\n      <ion-select-option value=\"deceasedName\">고인명</ion-select-option>\r\n      <ion-select-option value=\"bereavedName\">상주명</ion-select-option>\r\n      <ion-select-option value=\"extra__clientName\">의뢰인명</ion-select-option>\r\n      <ion-select-option value=\"body\">내용</ion-select-option>\r\n      <ion-select-option value=\"funeralHome\">장례식장</ion-select-option>\r\n    </ion-select>\r\n    </ion-item>\r\n    <ion-item>\r\n      <ion-searchbar show-cancel-button=\"focus\" animated inputmode=\"search\" enterkeyhint=\"enter\" placeholder=\"검색어를 입력해주세요.\" :value=\"searchState.searchKeyword\" @keyup.enter=\"onInput($event)\"></ion-searchbar>\r\n    </ion-item>\r\n    <ion-list-header>MyOrderList</ion-list-header>\r\n    <template v-bind:key=\"order.id\" v-for=\"order in returnFilteredOrders\">\r\n    <ion-item>\r\n      <!--진행단계-->\r\n        <div v-if=\"order.stepLevel==1\" class=\"btn-success\">\r\n          진행단계: {{returnToString(order.stepLevel)}}\r\n        </div>\r\n        <div v-if=\"order.stepLevel==2\" class=\"btn-secondary\">\r\n          진행단계: {{returnToString(order.stepLevel)}}\r\n        </div>\r\n        <div v-if=\"order.stepLevel==3\" class=\"btn-warning\">\r\n          진행단계: {{returnToString(order.stepLevel)}}\r\n        </div>\r\n        <div v-if=\"order.stepLevel==4\" class=\"btn-primary\">\r\n          진행단계: {{returnToString(order.stepLevel)}}\r\n        </div>\r\n        <div v-if=\"order.stepLevel==5\" class=\"btn-primary\">\r\n          진행단계: {{returnToString(order.stepLevel)}}\r\n        </div>\r\n      <ion-label>\r\n        <ion-grid>\r\n          <ion-row>\r\n            <ion-col size=\"12\" class=\"bg-gray-300 border rounded-md\">\r\n              고인명: {{order.deceasedName}}\r\n            </ion-col>\r\n          </ion-row>\r\n          <ion-row>\r\n            <ion-col size=\"4\">\r\n              상주명: {{order.bereavedName}}\r\n            </ion-col>\r\n            <ion-col size=\"10\">\r\n              의뢰인: {{order.extra__clientName}}\r\n            </ion-col>\r\n            <ion-col size=\"10\">\r\n              담당지도사: {{order.extra__expertName}}\r\n            </ion-col>\r\n          </ion-row>\r\n          <ion-row>\r\n            <ion-col size=\"10\">\r\n              장례식장: {{order.funeralHome}}\r\n            </ion-col>\r\n            <ion-col size=\"10\">\r\n              인원: {{order.head}} 명\r\n            </ion-col>\r\n            <ion-col size=\"10\">\r\n              종교: {{order.religion}}\r\n            </ion-col>\r\n            <ion-col size=\"10\">\r\n              장례시작일: {{order.startDate}}\r\n            </ion-col>\r\n            <ion-col size=\"10\">\r\n              장례종료일: {{order.endDate}}\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-label>\r\n      <div class=\"flex-col\">\r\n        <ion-item-divider class=\"mt-2\">\r\n          <ion-button color=\"\" slot=\"end\" :href=\"\'/order/detail?id=\' + order.id\">\r\n            상세보기\r\n          </ion-button>\r\n        </ion-item-divider>\r\n        <ion-item-divider class=\"mt-2\">\r\n          <ion-button v-if=\"globalState.loginedClient.id == order.clientId\" color=\"success\" slot=\"end\" :href=\"\'/review/add?relTypeCode=expert&relId=\' + order.expertId\">\r\n            후기/평점 작성\r\n          </ion-button>\r\n        </ion-item-divider>\r\n\r\n        <ion-item-divider class=\"mt-2\" v-if=\"globalState.loginedClient.id !== order.clientId\">\r\n          <ion-button v-if=\"order.stepLevel==1\" color=\"success\" slot=\"end\" @click=\"changeStepLevel(order.id, order.stepLevel)\">\r\n            의뢰수락(장례준비)\r\n          </ion-button>\r\n          <ion-button v-if=\"order.stepLevel==2\" color=\"success\" slot=\"end\" @click=\"changeStepLevel(order.id, order.stepLevel)\">\r\n            장례진행\r\n          </ion-button>\r\n          <ion-button v-if=\"order.stepLevel==3\" color=\"success\" slot=\"end\" @click=\"changeStepLevel(order.id, order.stepLevel)\">\r\n            장례종료(확인요청)\r\n          </ion-button>\r\n        </ion-item-divider>\r\n\r\n        <ion-item-divider class=\"mt-2\" v-if=\"globalState.loginedClient.id == order.clientId\">\r\n          <ion-button v-if=\"order.stepLevel==2\" color=\"success\" slot=\"end\">\r\n            장례준비중\r\n          </ion-button>\r\n          <ion-button v-if=\"order.stepLevel==3\" color=\"success\" slot=\"end\">\r\n            장례진행중\r\n          </ion-button>\r\n          <ion-button v-if=\"order.stepLevel==4\" color=\"success\" slot=\"end\" @click=\"changeStepLevel(order.id, order.stepLevel)\">\r\n            장례종료(확인)\r\n          </ion-button>\r\n        </ion-item-divider>\r\n        \r\n\r\n      </div>\r\n      </ion-item>\r\n    </template>\r\n  </ion-list>\r\n</ion-content>\r\n</template>\r\n\r\n<style>\r\n</style>\r\n\r\n<script lang=\"ts\">\r\nimport { IonCustomHeader } from \'@/components/\';\r\nimport { \r\n  IonSelect, \r\n  IonSelectOption, \r\n  IonSearchbar, \r\n  IonLabel, \r\n  IonListHeader, \r\n  IonList, \r\n  IonItem, \r\n  IonContent,\r\n  IonItemDivider,\r\n  IonCol,\r\n  IonRow,\r\n  IonGrid,\r\n  IonButton,\r\n} from \'@ionic/vue\';\r\nimport { useGlobalState } from \'@/stores\'\r\nimport { useMainService } from \'@/services\';\r\nimport { reactive, computed, onMounted, watch } from \'vue\';\r\nimport * as util from \'@/utils\';\r\nimport { useRoute } from \'vue-router\';\r\nimport { Order } from \'@/types\';\r\n\r\nconst useSearchState = () => {\r\n  return reactive({\r\n    searchKeyword: \'\',\r\n    searchKeywordType: \'deceasedName\',\r\n    selectStepLevel: \'0\',\r\n  })\r\n}\r\n\r\nexport default  {\r\n  name: \'OrderList\',\r\n  \r\n  components: { \r\n    IonSelect, \r\n    IonSelectOption, \r\n    IonSearchbar, \r\n    IonCustomHeader, \r\n    IonLabel, \r\n    IonListHeader, \r\n    IonList, \r\n    IonItem, \r\n    IonContent,\r\n    IonItemDivider,\r\n    IonCol,\r\n    IonRow,\r\n    IonGrid,\r\n    IonButton,\r\n  },\r\n  \r\n  setup() {\r\n    const globalState = useGlobalState();\r\n    const mainService = useMainService();\r\n    const searchState = useSearchState();\r\n    const route = useRoute();\r\n\r\n    const state = reactive({\r\n      orders: [] as Order[],\r\n    });\r\n\r\n    function returnToString(stepLevel: any) {\r\n      let stepLevelToStr = \'\'; \r\n      if(stepLevel == 1){\r\n        stepLevelToStr = \'의뢰요청(의뢰검토중)\';\r\n      }\r\n      if(stepLevel == 2){\r\n        stepLevelToStr = \'의뢰승인(장례준비중)\';\r\n      }\r\n      if(stepLevel == 3){\r\n        stepLevelToStr = \'장례진행중\';\r\n      }\r\n      if(stepLevel == 4){\r\n        stepLevelToStr = \'장례종료(종료확인요청)\';\r\n      }\r\n      if(stepLevel == 5){\r\n        stepLevelToStr = \'종료확인(최종종료)\';\r\n      }\r\n      \r\n      return stepLevelToStr;\r\n    }\r\n\r\n    function onInput(event: any){\r\n      searchState.searchKeyword = event.target.value;\r\n      return searchState.searchKeyword;\r\n    }\r\n\r\n\r\n    const returnFilteredOrders = computed(() => {\r\n\r\n      let filteredOrders = state.orders;\r\n      \r\n      if(searchState.selectStepLevel == \'0\'){\r\n        if(searchState.searchKeywordType == \"deceasedName\"){\r\n          filteredOrders = state.orders.filter((order: Order) => order.deceasedName.includes(searchState.searchKeyword))\r\n        }\r\n        if(searchState.searchKeywordType == \"bereavedName\"){\r\n          filteredOrders = state.orders.filter((order: Order) => order.bereavedName.includes(searchState.searchKeyword))\r\n        }\r\n        if(searchState.searchKeywordType == \"extra__clientName\"){\r\n          filteredOrders = state.orders.filter((order: Order) => order.extra__clientName.includes(searchState.searchKeyword))\r\n        }\r\n        if(searchState.searchKeywordType == \"body\"){\r\n          filteredOrders = state.orders.filter((order: Order) => order.body.includes(searchState.searchKeyword))\r\n        }\r\n        if(searchState.searchKeywordType == \"funeralHome\"){\r\n          filteredOrders = state.orders.filter((order: Order) => order.funeralHome.includes(searchState.searchKeyword))\r\n        }\r\n      }\r\n      else{\r\n        if(searchState.searchKeywordType == \"deceasedName\"){\r\n          filteredOrders = state.orders.filter((order: Order) => order.deceasedName.includes(searchState.searchKeyword) && order.stepLevel === parseInt(searchState.selectStepLevel))\r\n        }\r\n        if(searchState.searchKeywordType == \"bereavedName\"){\r\n          filteredOrders = state.orders.filter((order: Order) => order.bereavedName.includes(searchState.searchKeyword) && order.stepLevel === parseInt(searchState.selectStepLevel))\r\n        }\r\n        if(searchState.searchKeywordType == \"extra__clientName\"){\r\n          filteredOrders = state.orders.filter((order: Order) => order.extra__clientName.includes(searchState.searchKeyword) && order.stepLevel === parseInt(searchState.selectStepLevel))\r\n        }\r\n        if(searchState.searchKeywordType == \"body\"){\r\n          filteredOrders = state.orders.filter((order: Order) => order.body.includes(searchState.searchKeyword) && order.stepLevel === parseInt(searchState.selectStepLevel))\r\n        }\r\n        if(searchState.searchKeywordType == \"funeralHome\"){\r\n          filteredOrders = state.orders.filter((order: Order) => order.funeralHome.includes(searchState.searchKeyword) && order.stepLevel === parseInt(searchState.selectStepLevel))\r\n        }\r\n      }\r\n      return filteredOrders\r\n    })\r\n\r\n    async function loadOrders(memberId: number, memberType: string){\r\n      const axRes = await mainService.order_list(memberId, memberType)\r\n      state.orders = axRes.data.body.orders;\r\n    }\r\n\r\n    // function doDeleteReview(id: number) {\r\n    //   if(confirm(\'정말 삭제하시겠습니까?\') == false){\r\n    //     return;\r\n    //   }\r\n    //   mainService.review_doDelete(id)\r\n    //   .then(axiosResponse => {\r\n    //       alert(axiosResponse.data.msg);\r\n    //       if ( axiosResponse.data.fail ) {\r\n    //         return;\r\n    //       }\r\n    //     window.location.reload();\r\n    //   });\r\n    // }\r\n\r\n    async function doChangeStepLevel(id: number, stepLevel: number){\r\n      const axRes = await mainService.order_changeStepLevel(id, stepLevel)\r\n          util.showAlert(axRes.data.msg)\r\n\r\n          if ( axRes.data.fail ) {\r\n            return;\r\n          }\r\n          window.location.reload();\r\n    }\r\n\r\n    function changeStepLevel(id: number, stepLevel: number){\r\n\r\n      const msg = \'해당 의뢰를 수락하시겠습니까?\'\r\n      util.showAlertConfirm(msg).then(confirm => {\r\n        if (confirm == false) {\r\n          return\r\n        } else{\r\n          doChangeStepLevel(id, stepLevel)\r\n        }\r\n      })\r\n      \r\n    }\r\n\r\n    let loginedMemberId = 0;\r\n    let loginedMemberType = \'\';\r\n\r\n    if(globalState.loginedClient.id != null){\r\n        loginedMemberId = globalState.loginedClient.id\r\n        loginedMemberType = \'client\'\r\n    }\r\n\r\n    // onMounted 바로 실행하는 것이 아닌 모든 것이 준비되었을때 실행됨\r\n    onMounted(() => {\r\n      //alert(\"3\");\r\n      loadOrders(loginedMemberId, loginedMemberType);\r\n     // loadReviews(relTypeCode);\r\n    });\r\n\r\n\r\n    return {\r\n      globalState,\r\n      mainService,\r\n      state,\r\n      searchState,\r\n      returnFilteredOrders,\r\n      //doDeleteReview,\r\n      onInput,\r\n      returnToString,\r\n      changeStepLevel,\r\n      //onClickInput,\r\n    }\r\n  }\r\n}\r\n\r\n\r\n</script>\r\n```\r\n\r\n### DB\r\n```sql\r\n# 요청사항 테이블 생성\r\nCREATE TABLE `order` (\r\n    id INT(10) UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,\r\n    regDate DATETIME NOT NULL,\r\n    updateDate DATETIME NOT NULL,\r\n    `head` INT(10) UNSIGNED NOT NULL, #예상인원수\r\n    religion CHAR(200) NOT NULL, #종교\r\n    `startDate` DATE NOT NULL, #장례시작일\r\n    `endDate` DATE NOT NULL, #장례종료일\r\n    deceasedName CHAR(30) NOT NULL, #고인 이름\r\n    bereavedName CHAR(30) NOT NULL, #유족 이름\r\n    `body` TEXT NOT NULL, #상세요구사항\r\n    funeralHome CHAR(200) NOT NULL, #장례식장\r\n    `expertId` INT(10) UNSIGNED NOT NULL,\r\n    `clientId` INT(10) UNSIGNED NOT NULL,\r\n    stepLevel SMALLINT(2) UNSIGNED DEFAULT 1 NOT NULL COMMENT \'(1=의뢰요청(의뢰검토),2=의뢰승인(장례준비중),3=장례진행중,4=장례종료(종료확인요청),5=종료확인(최종종료))\'\r\n);\r\n```',8,1,0,0,0),(76,'2021-04-24 14:57:49','2021-04-24 15:28:38','P.Lamplight - 개발일지(~통합~디자인, native푸시&뱃지&전화 도입, SMS...PWA...구글스토어 앱 등록 완료(검토중))','# ~통합~디자인, native푸시&뱃지&전화 도입, SMS...PWA...구글스토어 앱 등록 완료(검토중)\r\n\r\n## PWA\r\n[상장례](https://sangjangrye.web.app/)\r\n\r\n## NOTE\r\n\r\n### 프론트엔드\r\n```\r\n<21.04.07~21.04.18 Work Done>\r\n-리뷰작성후 리뷰리스트[ㅇ]\r\n-평점 소수점[ㅇ]\r\n-회원정보 수정시 이미지 삭제 버그 수정 및 지도사 회원가입시 스캔파일 첨부여부 체크[ㅇ]\r\n-안드로이드 에뮬에서 테스트\r\n	-안드로이드 에뮬레이터 로컬호스트 연결[ㅇ]\r\n-가입대기상태인 회원 노출되는 버그 수정[ㅇ]\r\n-뱃지[ㅇ]\r\n -의뢰인 시나리오\r\n	order\r\n	-내 요청 접수/거절[ㅇ]\r\n	-진행단계변경 3-4[ㅇ]\r\n 	-최종확인버튼 클릭시 event 데이터 완전 삭제[ㅇ]\r\n -전문가 시나리오\r\n	order\r\n	-내 지역 신규요청[ㅇ]\r\n	-장례종료최종확인 5[ㅇ]\r\n	-의뢰직접요청[ㅇ]\r\n	-의뢰수락시 지역별 event 데이터 완전 삭제[ㅇ]\r\n	-의뢰거절시 지역별 event 데이터 다시 생성[ㅇ]\r\n	 -의뢰 취소했을 경우 지역별 event 삭제[ㅇ]\r\n -각 시나리오별 위치에 뱃지 노출[ㅇ]\r\n -각 시나리오별 페이지 접근 시 이벤트 삭제[ㅇ]\r\n-모든 의뢰 종료 시 지도사 work값 1로 변경[ㅇ]\r\n 시나리오\r\n -장례 최종 종료[ㅇ]\r\n -장례 취소 종료[ㅇ]\r\n -장례 거절 종료[ㅇ]\r\n-리스트 의뢰 번호 노출[ㅇ]\r\n-메인 위치 조정[ㅇ]\r\n-fab버튼 위치 잡기[기기테스트 필요]\r\n-헤더 제거[ㅇ]\r\n-취소/뒤로가기 버튼적용[ㅇ]\r\n<ion-buttons>\r\n      <ion-button color=\"\" @click=\"historyBack\">\r\n        <font-awesome-icon class=\"text-gray-600 text-2xl mt-3\" icon=\"arrow-left\"/>\r\n      </ion-button>\r\n    </ion-buttons>\r\n\r\nfunction historyBack(){\r\n      router.go(-1)\r\n    }\r\n-버튼 디자인[ㅇ]\r\n\r\n통합\r\n-아이디/비번 찾기[ㅇ]\r\n-회원가입 경력/자격증[ㅇ]\r\n-마이페이지 경력/자격증[ㅇ]\r\n-전체요청리스트/내요청리스트 구분[ㅇ]\r\n-지도사 work 상태[ㅇ]\r\n-의뢰수락,포기 백엔드 연계 테스트 필요[ㅇ]\r\n-지역명 옵션 채우기 17 [ㅇ]\r\n-내 의뢰 관리 의뢰인 ID 버그 수정[ㅇ]\r\n-백엔드랑 연계해봐야 함[ㅇ]\r\n-회원정보 수정시 기존 genFile도 변경[ㅇ]\r\n-회원탈퇴시 기존 genFile도 삭제[ㅇ]\r\n\r\n\r\n<ToDo List>\r\n-백엔드,어드민-전문가 수락 소영님[ㅇ]\r\n-PWA테스트[ㅇ], 앱 설명작성[ㅇ],앱버전 동연님[ㅇ]\r\n-푸시 원하님[ㅇ]\r\n\r\n```\r\n```\r\n<21.04.19>\r\n-PWA 작업[ㅇ]\r\n-아이폰 하단 fab버튼 위치[ㅇ]\r\n-개인정보처리방침,이용약관[ㅇ]\r\n-이벤트 삭제[ㅇ]\r\n -의뢰인시나리오\r\n	-진행장례 최종 종료 버튼 클릭시[ㅇ]\r\n -지도사 시나리오\r\n	-진행장례 최종 종료 확인 뱃지 확인시[ㅇ]\r\n	-미확인 장례중간종료시[ㅇ]\r\n-디자인 수정[ㅇ]\r\n\r\n```\r\n```\r\n<21.04.20>\r\n-푸시 작업[ㅇ]\r\n-sms테스트[ㅇ]\r\n\r\n<21.04.21>\r\n-서버[ㅇ]\r\n-버그 수정[]\r\n  -이미지크기 고정[ㅇ]\r\n  -연락처입력버그[ㅇ]\r\n  -안드로이드스튜디오 앱 이미지 변경[ㅇ]\r\n-다크모드[ㅇ]\r\n.inputOutLine{\r\n  background-color: #f4f5f8;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n    .light {\r\n        background-color: black;\r\n        color: red;\r\n    }\r\n}\r\n@media (prefers-color-scheme: light) {\r\n    .light {\r\n        background-color: black;\r\n        color: red;\r\n    }\r\n}\r\n  -로그인 input[ㅇ]\r\n  -지도사리스트[ㅇ]\r\n  -프로필,내정보[ㅇ]\r\n  -지역의뢰리스트[ㅇ]\r\n  -내의뢰리스트[ㅇ]\r\n  -의뢰상세보기[ㅇ]\r\n  -리뷰리스트[ㅇ]\r\n  -리뷰작성[ㅇ]\r\n  -회원탈퇴,로그아웃버튼[ㅇ]\r\n  -하단바[ㅇ]\r\n-pull제스처-새로고침[ㅇ]\r\nionic-vue3.0-ts-lamplight\r\n```\r\n```\r\n<21.04.22>\r\n-PWA 안드로이드 앱 아이콘,이름변경[ㅇ]  \r\n-기기 테스트[ㅇ]\r\n-앱 마켓 등록[ㅇ]\r\n```\r\n\r\n### 백엔드\r\n```\r\n- ~통합, event 테이블 생성, 서버 구축, native푸시&뱃지도입, SMS...구글스토어 앱 등록 완료(검토중)\r\n```\r\n```\r\n-EVENT뱃지[ㅇ]\r\n -의뢰인 시나리오\r\n	order\r\n	-내 요청 접수/거절[ㅇ]\r\n	-진행단계변경 3-4[ㅇ]\r\n 	-최종확인버튼 클릭시 event 데이터 완전 삭제[ㅇ]\r\n -전문가 시나리오\r\n	order\r\n	-내 지역 신규요청[ㅇ]\r\n	-장례종료최종확인 5[ㅇ]\r\n	-의뢰직접요청[ㅇ]\r\n	-의뢰수락시 지역별 event 데이터 완전 삭제[ㅇ]\r\n	-의뢰거절시 지역별 event 데이터 다시 생성[ㅇ]\r\n	 -의뢰 취소했을 경우 지역별 event 삭제[ㅇ]\r\n -각 시나리오별 위치에 뱃지 노출[ㅇ]\r\n -각 시나리오별 페이지 접근 시 이벤트 삭제[ㅇ]\r\n-모든 의뢰 종료 시 지도사 work값 1로 변경[ㅇ]\r\n 시나리오\r\n -장례 최종 종료[ㅇ]\r\n -장례 취소 종료[ㅇ]\r\n -장례 거절 종료[ㅇ]\r\n```\r\n\r\n<br>\r\n## 주요소스코드\r\n\r\n### DB\r\n```html\r\n#이벤트\r\nCREATE TABLE `event`(\r\n    id INT(10) UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,\r\n    regDate DATETIME DEFAULT NULL, # 작성날짜\r\n    updateDate DATETIME DEFAULT NULL, # 갱신날짜\r\n    `relTypeCode` CHAR(20) NOT NULL, #order\r\n    `relTypeCode2` CHAR(20) NOT NULL, #client or expert\r\n    relId INT(10) UNSIGNED NOT NULL, #orderId\r\n    relId2 INT(10) UNSIGNED NOT NULL, #clientId or expertId\r\n    `accept` SMALLINT(2) UNSIGNED NOT NULL, #for client\r\n    stepLevel SMALLINT(2) UNSIGNED NOT NULL, #3~4 for client / 5 #for expert\r\n    directOrder SMALLINT(2) UNSIGNED NOT NULL, #for expert\r\n    cancelOrder SMALLINT(2) UNSIGNED NOT NULL, #for expert\r\n    `region` CHAR(50) NOT NULL, #for expert\r\n    `alertCheckStatus` SMALLINT(2) UNSIGNED DEFAULT 0 NOT NULL COMMENT \'(0=확인안함 1=확인함)\'\r\n);\r\n\r\n```',8,1,0,0,0),(77,'2021-04-24 15:27:19','2021-04-24 15:28:38','LINK 메뉴에 \"상장례\" 링크를 추가했습니다.','**P.Lmaplight 프로젝트**의 결과물로 **상장례 APP**을 서비스하게 되었습니다!\r\n<br>\r\n상장례 앱에 대해 간략히 소개드리자면,\r\n국내 최초 장례지도사 매칭 플랫폼으로 전국 어디서나 장례지도사와 빠르게 연결해드리는 서비스입니다.\r\n\r\n### 프론트엔드\r\n**ionic 프레임워크**를 기반으로 개발하였으며,\r\n**Vue.js(3.0), TypeScript** 등을 사용했습니다.\r\n\r\n### 백엔드\r\n**SpringBoot 프레임워크**를 기반으로 개발하였으며,\r\n**tomcat, CentOS7 기반 Linux서버**에 연결해 서비스중입니다.\r\n\r\n<br>\r\n21.04.24 기준\r\n-구글스토어 앱 심사를 진행중입니다.\r\n-구글스토어 앱 배포 완료 후 정식 서비스를 실시할 예정입니다.\r\n-현재는 PWA사이트로 앱을 확인 하실 수 있습니다.\r\n-PWA링크 [상장례](https://sangjangrye.web.app/)\r\n\r\n<br>\r\n많은 관심 부탁드립니다~!\r\n\r\n감사합니다.( _ _ )',1,1,0,0,0),(78,'2021-04-29 20:55:45','2021-04-29 20:55:45','[HMAC-SHA256] HMAC-SHA256 개념 정리(feat. 해싱화, 암호화)','# HMAC-SHA256\r\n\r\n최근 신규 앱을 런칭하면서 회원의 PW 정보를 어떤 방식으로 암호화 또는 해싱화하면 좋을까 고민하다가 **HMAC-SHA256**이란 걸 알게되었다.\r\n\r\n이전에 프로젝트를 진행하면서 SHA256 해싱 방법을 적용해보긴 했지만 HMAC-SHA256은 HMAC이라는 단어가 하나 추가됐을 뿐이데 생소한 느낌이었다.\r\n\r\n지금부터 **HMAC-SHA256**을 적용하기 위해 구글링을 한 내용을 토대로 간략하게 정리해 보고자 한다.\r\n\r\n# 암호화 vs 해싱\r\nHMAC-SHA256에 대해 알아보기 전에 **암호화**와 **해싱**의 차이에 대해 살펴보자.\r\n\r\n## 해싱이란?\r\n - **원본 문자열을 알아볼 수 없는 난해한 문자열로 변환(정의)하는 과정**이다.\r\n - 해싱 후에는 문장이 **날씬한(?)형태**로 바뀌므로** Message Digest**라고 한다.\r\n\r\n## 암호화와 해싱의 차이?\r\n - **암호화**: **데이터의 노출을 막는 것**이 주 목적이다.\r\n - **해싱**: **데이터 변조의 무결성을 확인하는 것**이 주 목적이다.\r\n\r\n\r\n# HMAC과 SHA256\r\n\r\n그렇다면 **HMAC**는 무엇이고, **SHA256**는 무엇인지 지금부터 각각의 개념을 살펴보자.\r\n\r\n## HMAC \r\n- **해싱**과 **공유키**를 사용한 **MAC기술**이다.\r\n- 원본 메시지가 변하면 그 해시값도 변하는 해싱의 특징을 활용하여 메시지의 변조 여부를 확인(인증)해 무결성과 기밀성을 제공하는 기술을 말한다.\r\n- HMAC은 인증을 위한 **Secret Key**와 임의의 길이를 가진 **Message**를 **해시 함수(알고리즘)을 사용해서 생성**한다.\r\n```\r\nSecret Key?\r\n-서버와 클라이언트가 함께 알고 있고, 외부로 유출되어서는 안되는 값\r\n```\r\n\r\n```\r\nMAC?\r\n-Massage Authentication Code, 메시지 인증 코드\r\n```\r\n## SHA-256\r\n- 임의의 길이 메시지를 **256비트**로 만들어내는 **해시 알고리즘**이다.\r\n- **SHA-256** 해시 함수는 어떤 길이의 값을 입력해도 **256비트의 고정된 결과값**을 출력한다.\r\n- 일반적으로 입력값이 조금만 변동되도 출력값이 완전히 달라지기 때문에 **출력값을 토대로 입력값을 유추하는 것은 거의 불가능**하다.\r\n- 블록체인에서 가장 많이 채택되어 사용되고 있는 암호 방식이다.\r\n- **출력 속도가 빠르다**는 장점이 있다.\r\n\r\n즉, 정리하자면 **HMAC-SHA256**이란 기존의 **SHA-256 해시 알고리즘** 기술에 **secret key**를 사용한 MAC 기술인 **HMAC**을 함께 사용하는 **보안성이 조금 더 향상된 해싱 기술**이라 볼 수 있다.\r\n\r\n[참고: https://blog.naver.com/sehyunfa/221658905359]',7,1,0,0,0);
/*!40000 ALTER TABLE `article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `board`
--

DROP TABLE IF EXISTS `board`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `board` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` char(100) NOT NULL,
  `code` char(100) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `board`
--

LOCK TABLES `board` WRITE;
/*!40000 ALTER TABLE `board` DISABLE KEYS */;
INSERT INTO `board` VALUES (1,'공지사항','notice'),(2,'JAVA','java'),(3,'HTML & CSS & JS','html'),(4,'MySQL','mysql'),(5,'P.BLOG','p_blog'),(6,'P.JSP','p_jsp'),(7,'ETC','etc'),(8,'P.Lamplight','p_lamp'),(9,'P.WhatIsMyName','p_what');
/*!40000 ALTER TABLE `board` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ga4DataPagePath`
--

DROP TABLE IF EXISTS `ga4DataPagePath`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ga4DataPagePath` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `regDate` datetime NOT NULL,
  `updateDate` datetime NOT NULL,
  `pagePath` char(100) NOT NULL,
  `hit` int(10) unsigned NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `pagePath` (`pagePath`)
) ENGINE=InnoDB AUTO_INCREMENT=1579 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ga4DataPagePath`
--

LOCK TABLES `ga4DataPagePath` WRITE;
/*!40000 ALTER TABLE `ga4DataPagePath` DISABLE KEYS */;
INSERT INTO `ga4DataPagePath` VALUES (306,'2021-01-06 22:42:42','2021-01-06 22:42:42','/article_detail_4.html',1),(307,'2021-01-06 22:42:42','2021-01-06 22:42:42','/article_detail_5.html',1),(334,'2021-01-06 22:51:39','2021-01-06 22:51:39','/?dummy=asdkjasl;dkjas;ldkas;dlk',1),(337,'2021-01-06 22:51:39','2021-01-06 22:51:39','/article_detail_2.html',1),(338,'2021-01-06 22:51:39','2021-01-06 22:51:39','/article_detail_3.html',1),(595,'2021-01-10 22:22:55','2021-01-10 22:22:55','/article_detail_6.html',3),(596,'2021-01-10 22:22:55','2021-01-10 22:22:55','/article_detail_11.html',2),(688,'2021-01-11 22:19:06','2021-01-11 22:19:06','/article_detail_10.html',3),(1328,'2021-01-19 23:15:51','2021-01-19 23:15:51','/article_detail_13.html',6),(1569,'2021-01-25 17:24:00','2021-01-25 17:24:00','/',44),(1570,'2021-01-25 17:24:00','2021-01-25 17:24:00','/notice-list-1.html',13),(1571,'2021-01-25 17:24:00','2021-01-25 17:24:00','/index.html',10),(1572,'2021-01-25 17:24:00','2021-01-25 17:24:00','/search.html',10),(1573,'2021-01-25 17:24:00','2021-01-25 17:24:00','/statistics.html',10),(1574,'2021-01-25 17:24:00','2021-01-25 17:24:00','/java-list-1.html',9),(1575,'2021-01-25 17:24:00','2021-01-25 17:24:00','/about.html',8),(1576,'2021-01-25 17:24:00','2021-01-25 17:24:00','/html-list-1.html',8),(1577,'2021-01-25 17:24:00','2021-01-25 17:24:00','/article_detail_1.html',7),(1578,'2021-01-25 17:24:00','2021-01-25 17:24:00','/article_detail_12.html',6);
/*!40000 ALTER TABLE `ga4DataPagePath` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `member`
--

DROP TABLE IF EXISTS `member`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `member` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `loginId` char(100) NOT NULL,
  `loginPw` char(100) NOT NULL,
  `name` char(100) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `member`
--

LOCK TABLES `member` WRITE;
/*!40000 ALTER TABLE `member` DISABLE KEYS */;
INSERT INTO `member` VALUES (1,'admin','admin1!','Dev_J');
/*!40000 ALTER TABLE `member` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `recommand`
--

DROP TABLE IF EXISTS `recommand`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `recommand` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `regDate` datetime NOT NULL,
  `recommandArticleId` int(10) NOT NULL,
  `recommandMemberId` int(10) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `recommand`
--

LOCK TABLES `recommand` WRITE;
/*!40000 ALTER TABLE `recommand` DISABLE KEYS */;
/*!40000 ALTER TABLE `recommand` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `reply`
--

DROP TABLE IF EXISTS `reply`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `reply` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `regDate` datetime NOT NULL,
  `replyBody` text DEFAULT NULL,
  `replyArticleId` int(10) NOT NULL,
  `replyMemberId` int(10) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `reply`
--

LOCK TABLES `reply` WRITE;
/*!40000 ALTER TABLE `reply` DISABLE KEYS */;
/*!40000 ALTER TABLE `reply` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tag`
--

DROP TABLE IF EXISTS `tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tag` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `regDate` datetime NOT NULL,
  `updateDate` datetime NOT NULL,
  `relTypeCode` char(20) NOT NULL,
  `relId` int(10) unsigned NOT NULL,
  `body` char(20) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `relTypeCode` (`relTypeCode`,`body`)
) ENGINE=InnoDB AUTO_INCREMENT=219 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tag`
--

LOCK TABLES `tag` WRITE;
/*!40000 ALTER TABLE `tag` DISABLE KEYS */;
INSERT INTO `tag` VALUES (1,'2021-01-14 18:07:40','2021-01-14 18:07:40','article',2,'JAVA'),(2,'2021-01-14 18:07:40','2021-01-14 18:07:40','article',2,'STS'),(4,'2021-01-14 18:09:45','2021-01-14 18:09:45','article',3,'JAVA'),(5,'2021-01-14 18:09:45','2021-01-14 18:09:45','article',3,'Scanner'),(7,'2021-01-14 18:10:52','2021-01-14 18:10:52','article',4,'JAVA'),(8,'2021-01-14 18:10:52','2021-01-14 18:10:52','article',4,'println'),(9,'2021-01-14 18:10:52','2021-01-14 18:10:52','article',4,'printf'),(10,'2021-01-14 18:11:42','2021-01-14 18:11:42','article',5,'JAVA'),(11,'2021-01-14 18:11:42','2021-01-14 18:11:42','article',5,'자료형'),(12,'2021-01-14 18:11:42','2021-01-14 18:11:42','article',5,'데이터타입'),(13,'2021-01-14 18:12:10','2021-01-14 18:12:10','article',7,'JAVA'),(14,'2021-01-14 18:12:10','2021-01-14 18:12:10','article',7,'연산자'),(15,'2021-01-14 18:12:10','2021-01-14 18:12:10','article',7,'비교연산자'),(16,'2021-01-14 18:12:23','2021-01-14 18:12:23','article',8,'JAVA'),(17,'2021-01-14 18:12:23','2021-01-14 18:12:23','article',8,'연산자'),(18,'2021-01-14 18:12:23','2021-01-14 18:12:23','article',8,'논리연산자'),(19,'2021-01-14 18:12:30','2021-01-14 18:12:30','article',9,'JAVA'),(20,'2021-01-14 18:12:30','2021-01-14 18:12:30','article',9,'연산자'),(21,'2021-01-14 18:12:30','2021-01-14 18:12:30','article',9,'삼항연산자'),(22,'2021-01-14 18:12:58','2021-01-14 18:12:58','article',10,'JAVA'),(23,'2021-01-14 18:12:58','2021-01-14 18:12:58','article',10,'변수'),(25,'2021-01-14 18:13:32','2021-01-14 18:13:32','article',11,'HTML'),(26,'2021-01-14 18:13:32','2021-01-14 18:13:32','article',11,'CSS'),(27,'2021-01-14 18:13:32','2021-01-14 18:13:32','article',11,'JS'),(28,'2021-01-14 18:13:57','2021-01-14 18:13:57','article',12,'HTML'),(29,'2021-01-14 18:13:57','2021-01-14 18:13:57','article',12,'태그'),(30,'2021-01-14 18:13:57','2021-01-14 18:13:57','article',12,'엘리먼트'),(31,'2021-01-18 00:09:41','2021-01-18 00:09:41','article',14,'SQL'),(32,'2021-01-18 00:09:41','2021-01-18 00:09:41','article',14,'DB'),(33,'2021-01-18 00:09:41','2021-01-18 00:09:41','article',14,'MySQL'),(34,'2021-01-18 00:10:04','2021-01-18 00:10:04','article',15,'SQL'),(35,'2021-01-18 00:10:04','2021-01-18 00:10:04','article',15,'MySQL'),(36,'2021-01-18 22:44:51','2021-01-18 22:44:51','article',16,'JAVA'),(37,'2021-01-18 22:44:51','2021-01-18 22:44:51','article',16,'배열'),(38,'2021-01-24 22:36:57','2021-01-24 22:36:57','article',17,'project'),(39,'2021-01-24 22:36:57','2021-01-24 22:36:57','article',17,'개발일지'),(40,'2021-01-24 22:36:57','2021-01-24 22:36:57','article',17,'JSP'),(41,'2021-01-24 22:37:02','2021-01-24 22:37:02','article',18,'project'),(42,'2021-01-24 22:37:02','2021-01-24 22:37:02','article',18,'개발일지'),(43,'2021-01-24 22:37:02','2021-01-24 22:37:02','article',18,'JSP'),(44,'2021-01-24 22:37:06','2021-01-24 22:37:06','article',19,'project'),(45,'2021-01-24 22:37:06','2021-01-24 22:37:06','article',19,'개발일지'),(46,'2021-01-24 22:37:06','2021-01-24 22:37:06','article',19,'JSP'),(47,'2021-01-24 22:37:10','2021-01-24 22:37:10','article',20,'project'),(48,'2021-01-24 22:37:10','2021-01-24 22:37:10','article',20,'개발일지'),(49,'2021-01-24 22:37:10','2021-01-24 22:37:10','article',20,'JSP'),(50,'2021-01-24 22:37:28','2021-01-24 22:37:28','article',21,'project'),(51,'2021-01-24 22:37:28','2021-01-24 22:37:28','article',21,'개발일지'),(52,'2021-01-24 22:37:28','2021-01-24 22:37:28','article',21,'JSP'),(53,'2021-01-24 22:37:40','2021-01-24 22:37:40','article',22,'project'),(54,'2021-01-24 22:37:40','2021-01-24 22:37:40','article',22,'개발일지'),(55,'2021-01-24 22:37:40','2021-01-24 22:37:40','article',22,'BLOG'),(56,'2021-01-24 23:10:31','2021-01-24 23:10:31','article',23,'project'),(57,'2021-01-24 23:10:31','2021-01-24 23:10:31','article',23,'개발일지'),(58,'2021-01-24 23:10:31','2021-01-24 23:10:31','article',23,'JSP'),(59,'2021-01-24 23:10:36','2021-01-24 23:10:36','article',24,'project'),(60,'2021-01-24 23:10:36','2021-01-24 23:10:36','article',24,'개발일지'),(61,'2021-01-24 23:10:36','2021-01-24 23:10:36','article',24,'JSP'),(62,'2021-01-28 22:51:45','2021-01-28 22:51:45','article',25,'project'),(63,'2021-01-28 22:51:45','2021-01-28 22:51:45','article',25,'개발일지'),(64,'2021-01-28 22:51:45','2021-01-28 22:51:45','article',25,'JSP'),(65,'2021-01-28 22:51:49','2021-01-28 22:51:49','article',26,'project'),(66,'2021-01-28 22:51:49','2021-01-28 22:51:49','article',26,'개발일지'),(67,'2021-01-28 22:51:49','2021-01-28 22:51:49','article',26,'JSP'),(68,'2021-02-04 17:46:54','2021-02-04 17:46:54','article',27,'JAVA'),(69,'2021-02-04 17:46:54','2021-02-04 17:46:54','article',27,'startsWith'),(70,'2021-02-04 17:46:54','2021-02-04 17:46:54','article',27,'endsWith'),(71,'2021-02-04 18:13:10','2021-02-04 18:13:10','article',28,'JAVA'),(72,'2021-02-04 18:13:10','2021-02-04 18:13:10','article',28,'split'),(74,'2021-02-04 18:23:47','2021-02-04 18:23:47','article',29,'JAVA'),(75,'2021-02-04 18:23:47','2021-02-04 18:23:47','article',29,'SimpleDateFormat'),(76,'2021-02-04 18:23:47','2021-02-04 18:23:47','article',29,'Calendar'),(77,'2021-02-04 18:23:47','2021-02-04 18:23:47','article',29,'Date'),(78,'2021-02-04 18:23:47','2021-02-04 18:23:47','article',29,'compareTo()'),(81,'2021-02-04 18:33:17','2021-02-04 18:33:17','article',30,'project'),(82,'2021-02-04 18:33:17','2021-02-04 18:33:17','article',30,'개발일지'),(83,'2021-02-04 18:33:17','2021-02-04 18:33:17','article',30,'blog'),(84,'2021-02-04 18:33:22','2021-02-04 18:33:22','article',31,'project'),(85,'2021-02-04 18:33:22','2021-02-04 18:33:22','article',31,'개발일지'),(86,'2021-02-04 18:33:22','2021-02-04 18:33:22','article',31,'blog'),(87,'2021-02-17 21:45:19','2021-02-17 21:45:19','article',32,'project'),(88,'2021-02-17 21:45:19','2021-02-17 21:45:19','article',32,'개발일지'),(89,'2021-02-17 21:45:19','2021-02-17 21:45:19','article',32,'blog'),(90,'2021-02-17 21:45:24','2021-02-17 21:45:24','article',33,'project'),(91,'2021-02-17 21:45:24','2021-02-17 21:45:24','article',33,'개발일지'),(92,'2021-02-17 21:45:24','2021-02-17 21:45:24','article',33,'blog'),(93,'2021-02-17 21:45:28','2021-02-17 21:45:28','article',34,'project'),(94,'2021-02-17 21:45:28','2021-02-17 21:45:28','article',34,'개발일지'),(95,'2021-02-17 21:45:28','2021-02-17 21:45:28','article',34,'blog'),(96,'2021-02-17 21:45:31','2021-02-17 21:45:31','article',35,'project'),(97,'2021-02-17 21:45:31','2021-02-17 21:45:31','article',35,'개발일지'),(98,'2021-02-17 21:45:31','2021-02-17 21:45:31','article',35,'blog'),(99,'2021-02-17 21:45:35','2021-02-17 21:45:35','article',36,'project'),(100,'2021-02-17 21:45:35','2021-02-17 21:45:35','article',36,'개발일지'),(101,'2021-02-17 21:45:35','2021-02-17 21:45:35','article',36,'blog'),(102,'2021-02-17 22:11:02','2021-02-17 22:11:02','article',37,'project'),(103,'2021-02-17 22:11:02','2021-02-17 22:11:02','article',37,'개발일지'),(104,'2021-02-17 22:11:02','2021-02-17 22:11:02','article',37,'blog'),(105,'2021-02-17 22:11:06','2021-02-17 22:11:06','article',38,'project'),(106,'2021-02-17 22:11:06','2021-02-17 22:11:06','article',38,'개발일지'),(107,'2021-02-17 22:11:06','2021-02-17 22:11:06','article',38,'blog'),(108,'2021-02-17 22:11:10','2021-02-17 22:11:10','article',39,'project'),(109,'2021-02-17 22:11:10','2021-02-17 22:11:10','article',39,'개발일지'),(110,'2021-02-17 22:11:10','2021-02-17 22:11:10','article',39,'blog'),(111,'2021-02-17 22:11:15','2021-02-17 22:11:15','article',40,'project'),(112,'2021-02-17 22:11:15','2021-02-17 22:11:15','article',40,'개발일지'),(113,'2021-02-17 22:11:15','2021-02-17 22:11:15','article',40,'blog'),(114,'2021-02-17 22:11:22','2021-02-17 22:11:22','article',41,'project'),(115,'2021-02-17 22:11:22','2021-02-17 22:11:22','article',41,'개발일지'),(116,'2021-02-17 22:11:22','2021-02-17 22:11:22','article',41,'blog'),(117,'2021-02-17 22:11:25','2021-02-17 22:11:25','article',42,'project'),(118,'2021-02-17 22:11:25','2021-02-17 22:11:25','article',42,'개발일지'),(119,'2021-02-17 22:11:25','2021-02-17 22:11:25','article',42,'blog'),(120,'2021-02-17 22:11:29','2021-02-17 22:11:29','article',43,'project'),(121,'2021-02-17 22:11:29','2021-02-17 22:11:29','article',43,'개발일지'),(122,'2021-02-17 22:11:29','2021-02-17 22:11:29','article',43,'blog'),(123,'2021-02-17 22:53:41','2021-02-17 22:53:41','article',44,'HTML'),(124,'2021-02-17 22:53:41','2021-02-17 22:53:41','article',44,'CSS'),(125,'2021-02-17 22:53:41','2021-02-17 22:53:41','article',44,'display'),(126,'2021-02-22 19:01:14','2021-02-22 19:01:14','article',45,'project'),(127,'2021-02-22 19:01:14','2021-02-22 19:01:14','article',45,'개발일지'),(128,'2021-02-22 19:01:14','2021-02-22 19:01:14','article',45,'JSP'),(129,'2021-02-22 19:01:17','2021-02-22 19:01:17','article',46,'project'),(130,'2021-02-22 19:01:17','2021-02-22 19:01:17','article',46,'개발일지'),(131,'2021-02-22 19:01:17','2021-02-22 19:01:17','article',46,'JSP'),(132,'2021-03-10 11:16:48','2021-03-10 11:16:48','article',47,'etc'),(133,'2021-03-10 11:16:48','2021-03-10 11:16:48','article',47,'git'),(134,'2021-03-10 11:16:48','2021-03-10 11:16:48','article',47,'github'),(135,'2021-03-10 11:39:02','2021-03-10 11:39:02','article',48,'etc'),(136,'2021-03-10 11:39:02','2021-03-10 11:39:02','article',48,'컴파일러'),(137,'2021-03-10 11:39:02','2021-03-10 11:39:02','article',48,'인터프리터'),(138,'2021-03-10 11:59:30','2021-03-10 11:59:30','article',49,'etc'),(139,'2021-03-10 11:59:30','2021-03-10 11:59:30','article',49,'HTTP'),(140,'2021-03-10 11:59:30','2021-03-10 11:59:30','article',49,'HTTPS'),(141,'2021-03-10 11:59:30','2021-03-10 11:59:30','article',49,'SSL'),(142,'2021-03-10 11:59:30','2021-03-10 11:59:30','article',49,'인증서'),(143,'2021-03-23 19:37:29','2021-03-23 19:37:29','article',56,'SQL'),(144,'2021-03-23 19:37:29','2021-03-23 19:37:29','article',56,'MySQL'),(145,'2021-03-23 19:37:29','2021-03-23 19:37:29','article',56,'JOIN'),(146,'2021-03-26 14:50:39','2021-03-26 14:50:39','article',57,'etc'),(147,'2021-03-26 14:50:39','2021-03-26 14:50:39','article',57,'카카오'),(148,'2021-03-26 14:50:39','2021-03-26 14:50:39','article',57,'api'),(149,'2021-03-26 14:50:39','2021-03-26 14:50:39','article',57,'로그인'),(153,'2021-03-26 14:50:50','2021-03-26 14:50:50','article',58,'etc'),(154,'2021-03-26 14:50:50','2021-03-26 14:50:50','article',58,'카카오'),(155,'2021-03-26 14:50:50','2021-03-26 14:50:50','article',58,'api'),(156,'2021-03-26 14:50:50','2021-03-26 14:50:50','article',58,'메시지'),(160,'2021-03-26 14:51:56','2021-03-26 14:51:56','article',59,'project'),(161,'2021-03-26 14:51:56','2021-03-26 14:51:56','article',59,'개발일지'),(162,'2021-03-26 14:51:56','2021-03-26 14:51:56','article',59,'whatismyname'),(163,'2021-03-26 14:52:01','2021-03-26 14:52:01','article',60,'project'),(164,'2021-03-26 14:52:01','2021-03-26 14:52:01','article',60,'개발일지'),(165,'2021-03-26 14:52:01','2021-03-26 14:52:01','article',60,'whatismyname'),(166,'2021-03-26 14:52:28','2021-03-26 14:52:28','article',61,'공지'),(167,'2021-03-26 15:03:28','2021-03-26 15:03:28','article',62,'project'),(168,'2021-03-26 15:03:28','2021-03-26 15:03:28','article',62,'개발일지'),(169,'2021-03-26 15:03:28','2021-03-26 15:03:28','article',62,'lamplight'),(170,'2021-04-24 14:59:27','2021-04-24 14:59:27','article',63,'project'),(171,'2021-04-24 14:59:27','2021-04-24 14:59:27','article',63,'개발일지'),(172,'2021-04-24 14:59:27','2021-04-24 14:59:27','article',63,'lamplight'),(173,'2021-04-24 14:59:30','2021-04-24 14:59:30','article',64,'project'),(174,'2021-04-24 14:59:30','2021-04-24 14:59:30','article',64,'개발일지'),(175,'2021-04-24 14:59:30','2021-04-24 14:59:30','article',64,'lamplight'),(176,'2021-04-24 14:59:34','2021-04-24 14:59:34','article',65,'project'),(177,'2021-04-24 14:59:34','2021-04-24 14:59:34','article',65,'개발일지'),(178,'2021-04-24 14:59:34','2021-04-24 14:59:34','article',65,'lamplight'),(179,'2021-04-24 14:59:38','2021-04-24 14:59:38','article',66,'project'),(180,'2021-04-24 14:59:38','2021-04-24 14:59:38','article',66,'개발일지'),(181,'2021-04-24 14:59:38','2021-04-24 14:59:38','article',66,'lamplight'),(182,'2021-04-24 14:59:41','2021-04-24 14:59:41','article',67,'project'),(183,'2021-04-24 14:59:41','2021-04-24 14:59:41','article',67,'개발일지'),(184,'2021-04-24 14:59:41','2021-04-24 14:59:41','article',67,'lamplight'),(185,'2021-04-24 14:59:46','2021-04-24 14:59:46','article',68,'project'),(186,'2021-04-24 14:59:46','2021-04-24 14:59:46','article',68,'개발일지'),(187,'2021-04-24 14:59:46','2021-04-24 14:59:46','article',68,'lamplight'),(188,'2021-04-24 14:59:49','2021-04-24 14:59:49','article',69,'project'),(189,'2021-04-24 14:59:49','2021-04-24 14:59:49','article',69,'개발일지'),(190,'2021-04-24 14:59:49','2021-04-24 14:59:49','article',69,'lamplight'),(191,'2021-04-24 14:59:54','2021-04-24 14:59:54','article',70,'project'),(192,'2021-04-24 14:59:54','2021-04-24 14:59:54','article',70,'개발일지'),(193,'2021-04-24 14:59:54','2021-04-24 14:59:54','article',70,'lamplight'),(194,'2021-04-24 14:59:57','2021-04-24 14:59:57','article',71,'project'),(195,'2021-04-24 14:59:57','2021-04-24 14:59:57','article',71,'개발일지'),(196,'2021-04-24 14:59:57','2021-04-24 14:59:57','article',71,'lamplight'),(197,'2021-04-24 15:00:02','2021-04-24 15:00:02','article',72,'project'),(198,'2021-04-24 15:00:02','2021-04-24 15:00:02','article',72,'개발일지'),(199,'2021-04-24 15:00:02','2021-04-24 15:00:02','article',72,'lamplight'),(200,'2021-04-24 15:00:11','2021-04-24 15:00:11','article',73,'project'),(201,'2021-04-24 15:00:11','2021-04-24 15:00:11','article',73,'개발일지'),(202,'2021-04-24 15:00:11','2021-04-24 15:00:11','article',73,'lamplight'),(203,'2021-04-24 15:00:15','2021-04-24 15:00:15','article',74,'project'),(204,'2021-04-24 15:00:15','2021-04-24 15:00:15','article',74,'개발일지'),(205,'2021-04-24 15:00:15','2021-04-24 15:00:15','article',74,'lamplight'),(206,'2021-04-24 15:00:18','2021-04-24 15:00:18','article',75,'project'),(207,'2021-04-24 15:00:18','2021-04-24 15:00:18','article',75,'개발일지'),(208,'2021-04-24 15:00:18','2021-04-24 15:00:18','article',75,'lamplight'),(209,'2021-04-24 15:00:22','2021-04-24 15:00:22','article',76,'project'),(210,'2021-04-24 15:00:22','2021-04-24 15:00:22','article',76,'개발일지'),(211,'2021-04-24 15:00:22','2021-04-24 15:00:22','article',76,'lamplight'),(212,'2021-04-29 20:58:34','2021-04-29 20:58:34','article',78,'etc'),(213,'2021-04-29 20:58:34','2021-04-29 20:58:34','article',78,'해싱화'),(214,'2021-04-29 20:58:34','2021-04-29 20:58:34','article',78,'암호화'),(215,'2021-04-29 20:58:34','2021-04-29 20:58:34','article',78,'HMAC'),(216,'2021-04-29 20:58:34','2021-04-29 20:58:34','article',78,'SHA-256');
/*!40000 ALTER TABLE `tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `view`
--

DROP TABLE IF EXISTS `view`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `view` (
  `viewCount` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `viewArticleId` int(10) NOT NULL,
  PRIMARY KEY (`viewCount`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `view`
--

LOCK TABLES `view` WRITE;
/*!40000 ALTER TABLE `view` DISABLE KEYS */;
INSERT INTO `view` VALUES (1,1);
/*!40000 ALTER TABLE `view` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2021-04-29 20:59:27
